//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.9164
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.9164.
// 
namespace MobileSales {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MyMobileDataSet")]
    public partial class MyMobileDataSet : global::System.Data.DataSet {
        
        private AgjendetDataTable tableAgjendet;
        
        private FaturaDataTable tableFatura;
        
        private KlientDheLokacionDataTable tableKlientDheLokacion;
        
        private KlientetDataTable tableKlientet;
        
        private KonfigurimiDataTable tableKonfigurimi;
        
        private LiferimiDataTable tableLiferimi;
        
        private LiferimiArtDataTable tableLiferimiArt;
        
        private NumerimInternDataTable tableNumerimIntern;
        
        private PorosiaArtDataTable tablePorosiaArt;
        
        private PorositeDataTable tablePorosite;
        
        private PriceGroupDataTable tablePriceGroup;
        
        private RabatetDataTable tableRabatet;
        
        private SalesPriceDataTable tableSalesPrice;
        
        private StatusiVizitesDataTable tableStatusiVizites;
        
        private StoqetDataTable tableStoqet;
        
        private SyncConfigurationDataTable tableSyncConfiguration;
        
        private VendetDataTable tableVendet;
        
        private VizitatDataTable tableVizitat;
        
        private ListaLiferimeveDataTable tableListaLiferimeve;
        
        private ListaVizitaveDataTable tableListaVizitave;
        
        private ListaShitjeveDataTable tableListaShitjeve;
        
        private ArtikujtShiturDataTable tableArtikujtShitur;
        
        private ArtikujtDataTable tableArtikujt;
        
        private ArtikujtStoqetDataTable tableArtikujtStoqet;
        
        private Log_SyncErrorsDataTable tableLog_SyncErrors;
        
        private ArtikujDepoDataTable tableArtikujDepo;
        
        private FaturatPagesatDataTable tableFaturatPagesat;
        
        private NumriFaturaveDataTable tableNumriFaturave;
        
        private OrdersDataTable tableOrders;
        
        private Order_DetailsDataTable tableOrder_Details;
        
        private rptOrder_DetailsDataTable tablerptOrder_Details;
        
        private global::System.Data.DataRelation relationKlientet_KlientDheLokacion;
        
        private global::System.Data.DataRelation relationKlientDheLokacion_Vizitat;
        
        private global::System.Data.DataRelation relationFK_LiferimiArt_Liferimi;
        
        private global::System.Data.DataRelation relationFK_Fatura_Liferimi;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MyMobileDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgjendetDataTable Agjendet {
            get {
                return this.tableAgjendet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FaturaDataTable Fatura {
            get {
                return this.tableFatura;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KlientDheLokacionDataTable KlientDheLokacion {
            get {
                return this.tableKlientDheLokacion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KlientetDataTable Klientet {
            get {
                return this.tableKlientet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KonfigurimiDataTable Konfigurimi {
            get {
                return this.tableKonfigurimi;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LiferimiDataTable Liferimi {
            get {
                return this.tableLiferimi;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LiferimiArtDataTable LiferimiArt {
            get {
                return this.tableLiferimiArt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NumerimInternDataTable NumerimIntern {
            get {
                return this.tableNumerimIntern;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PorosiaArtDataTable PorosiaArt {
            get {
                return this.tablePorosiaArt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PorositeDataTable Porosite {
            get {
                return this.tablePorosite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PriceGroupDataTable PriceGroup {
            get {
                return this.tablePriceGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RabatetDataTable Rabatet {
            get {
                return this.tableRabatet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SalesPriceDataTable SalesPrice {
            get {
                return this.tableSalesPrice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StatusiVizitesDataTable StatusiVizites {
            get {
                return this.tableStatusiVizites;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StoqetDataTable Stoqet {
            get {
                return this.tableStoqet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SyncConfigurationDataTable SyncConfiguration {
            get {
                return this.tableSyncConfiguration;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VendetDataTable Vendet {
            get {
                return this.tableVendet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VizitatDataTable Vizitat {
            get {
                return this.tableVizitat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaLiferimeveDataTable ListaLiferimeve {
            get {
                return this.tableListaLiferimeve;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaVizitaveDataTable ListaVizitave {
            get {
                return this.tableListaVizitave;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaShitjeveDataTable ListaShitjeve {
            get {
                return this.tableListaShitjeve;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujtShiturDataTable ArtikujtShitur {
            get {
                return this.tableArtikujtShitur;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujtDataTable Artikujt {
            get {
                return this.tableArtikujt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujtStoqetDataTable ArtikujtStoqet {
            get {
                return this.tableArtikujtStoqet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Log_SyncErrorsDataTable Log_SyncErrors {
            get {
                return this.tableLog_SyncErrors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujDepoDataTable ArtikujDepo {
            get {
                return this.tableArtikujDepo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FaturatPagesatDataTable FaturatPagesat {
            get {
                return this.tableFaturatPagesat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NumriFaturaveDataTable NumriFaturave {
            get {
                return this.tableNumriFaturave;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Order_DetailsDataTable Order_Details {
            get {
                return this.tableOrder_Details;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rptOrder_DetailsDataTable rptOrder_Details {
            get {
                return this.tablerptOrder_Details;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MyMobileDataSet cln = ((MyMobileDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Agjendet"] != null)) {
                    base.Tables.Add(new AgjendetDataTable(ds.Tables["Agjendet"]));
                }
                if ((ds.Tables["Fatura"] != null)) {
                    base.Tables.Add(new FaturaDataTable(ds.Tables["Fatura"]));
                }
                if ((ds.Tables["KlientDheLokacion"] != null)) {
                    base.Tables.Add(new KlientDheLokacionDataTable(ds.Tables["KlientDheLokacion"]));
                }
                if ((ds.Tables["Klientet"] != null)) {
                    base.Tables.Add(new KlientetDataTable(ds.Tables["Klientet"]));
                }
                if ((ds.Tables["Konfigurimi"] != null)) {
                    base.Tables.Add(new KonfigurimiDataTable(ds.Tables["Konfigurimi"]));
                }
                if ((ds.Tables["Liferimi"] != null)) {
                    base.Tables.Add(new LiferimiDataTable(ds.Tables["Liferimi"]));
                }
                if ((ds.Tables["LiferimiArt"] != null)) {
                    base.Tables.Add(new LiferimiArtDataTable(ds.Tables["LiferimiArt"]));
                }
                if ((ds.Tables["NumerimIntern"] != null)) {
                    base.Tables.Add(new NumerimInternDataTable(ds.Tables["NumerimIntern"]));
                }
                if ((ds.Tables["PorosiaArt"] != null)) {
                    base.Tables.Add(new PorosiaArtDataTable(ds.Tables["PorosiaArt"]));
                }
                if ((ds.Tables["Porosite"] != null)) {
                    base.Tables.Add(new PorositeDataTable(ds.Tables["Porosite"]));
                }
                if ((ds.Tables["PriceGroup"] != null)) {
                    base.Tables.Add(new PriceGroupDataTable(ds.Tables["PriceGroup"]));
                }
                if ((ds.Tables["Rabatet"] != null)) {
                    base.Tables.Add(new RabatetDataTable(ds.Tables["Rabatet"]));
                }
                if ((ds.Tables["SalesPrice"] != null)) {
                    base.Tables.Add(new SalesPriceDataTable(ds.Tables["SalesPrice"]));
                }
                if ((ds.Tables["StatusiVizites"] != null)) {
                    base.Tables.Add(new StatusiVizitesDataTable(ds.Tables["StatusiVizites"]));
                }
                if ((ds.Tables["Stoqet"] != null)) {
                    base.Tables.Add(new StoqetDataTable(ds.Tables["Stoqet"]));
                }
                if ((ds.Tables["SyncConfiguration"] != null)) {
                    base.Tables.Add(new SyncConfigurationDataTable(ds.Tables["SyncConfiguration"]));
                }
                if ((ds.Tables["Vendet"] != null)) {
                    base.Tables.Add(new VendetDataTable(ds.Tables["Vendet"]));
                }
                if ((ds.Tables["Vizitat"] != null)) {
                    base.Tables.Add(new VizitatDataTable(ds.Tables["Vizitat"]));
                }
                if ((ds.Tables["ListaLiferimeve"] != null)) {
                    base.Tables.Add(new ListaLiferimeveDataTable(ds.Tables["ListaLiferimeve"]));
                }
                if ((ds.Tables["ListaVizitave"] != null)) {
                    base.Tables.Add(new ListaVizitaveDataTable(ds.Tables["ListaVizitave"]));
                }
                if ((ds.Tables["ListaShitjeve"] != null)) {
                    base.Tables.Add(new ListaShitjeveDataTable(ds.Tables["ListaShitjeve"]));
                }
                if ((ds.Tables["ArtikujtShitur"] != null)) {
                    base.Tables.Add(new ArtikujtShiturDataTable(ds.Tables["ArtikujtShitur"]));
                }
                if ((ds.Tables["Artikujt"] != null)) {
                    base.Tables.Add(new ArtikujtDataTable(ds.Tables["Artikujt"]));
                }
                if ((ds.Tables["ArtikujtStoqet"] != null)) {
                    base.Tables.Add(new ArtikujtStoqetDataTable(ds.Tables["ArtikujtStoqet"]));
                }
                if ((ds.Tables["Log_SyncErrors"] != null)) {
                    base.Tables.Add(new Log_SyncErrorsDataTable(ds.Tables["Log_SyncErrors"]));
                }
                if ((ds.Tables["ArtikujDepo"] != null)) {
                    base.Tables.Add(new ArtikujDepoDataTable(ds.Tables["ArtikujDepo"]));
                }
                if ((ds.Tables["FaturatPagesat"] != null)) {
                    base.Tables.Add(new FaturatPagesatDataTable(ds.Tables["FaturatPagesat"]));
                }
                if ((ds.Tables["NumriFaturave"] != null)) {
                    base.Tables.Add(new NumriFaturaveDataTable(ds.Tables["NumriFaturave"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Order_Details"] != null)) {
                    base.Tables.Add(new Order_DetailsDataTable(ds.Tables["Order_Details"]));
                }
                if ((ds.Tables["rptOrder_Details"] != null)) {
                    base.Tables.Add(new rptOrder_DetailsDataTable(ds.Tables["rptOrder_Details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAgjendet = ((AgjendetDataTable)(base.Tables["Agjendet"]));
            if ((initTable == true)) {
                if ((this.tableAgjendet != null)) {
                    this.tableAgjendet.InitVars();
                }
            }
            this.tableFatura = ((FaturaDataTable)(base.Tables["Fatura"]));
            if ((initTable == true)) {
                if ((this.tableFatura != null)) {
                    this.tableFatura.InitVars();
                }
            }
            this.tableKlientDheLokacion = ((KlientDheLokacionDataTable)(base.Tables["KlientDheLokacion"]));
            if ((initTable == true)) {
                if ((this.tableKlientDheLokacion != null)) {
                    this.tableKlientDheLokacion.InitVars();
                }
            }
            this.tableKlientet = ((KlientetDataTable)(base.Tables["Klientet"]));
            if ((initTable == true)) {
                if ((this.tableKlientet != null)) {
                    this.tableKlientet.InitVars();
                }
            }
            this.tableKonfigurimi = ((KonfigurimiDataTable)(base.Tables["Konfigurimi"]));
            if ((initTable == true)) {
                if ((this.tableKonfigurimi != null)) {
                    this.tableKonfigurimi.InitVars();
                }
            }
            this.tableLiferimi = ((LiferimiDataTable)(base.Tables["Liferimi"]));
            if ((initTable == true)) {
                if ((this.tableLiferimi != null)) {
                    this.tableLiferimi.InitVars();
                }
            }
            this.tableLiferimiArt = ((LiferimiArtDataTable)(base.Tables["LiferimiArt"]));
            if ((initTable == true)) {
                if ((this.tableLiferimiArt != null)) {
                    this.tableLiferimiArt.InitVars();
                }
            }
            this.tableNumerimIntern = ((NumerimInternDataTable)(base.Tables["NumerimIntern"]));
            if ((initTable == true)) {
                if ((this.tableNumerimIntern != null)) {
                    this.tableNumerimIntern.InitVars();
                }
            }
            this.tablePorosiaArt = ((PorosiaArtDataTable)(base.Tables["PorosiaArt"]));
            if ((initTable == true)) {
                if ((this.tablePorosiaArt != null)) {
                    this.tablePorosiaArt.InitVars();
                }
            }
            this.tablePorosite = ((PorositeDataTable)(base.Tables["Porosite"]));
            if ((initTable == true)) {
                if ((this.tablePorosite != null)) {
                    this.tablePorosite.InitVars();
                }
            }
            this.tablePriceGroup = ((PriceGroupDataTable)(base.Tables["PriceGroup"]));
            if ((initTable == true)) {
                if ((this.tablePriceGroup != null)) {
                    this.tablePriceGroup.InitVars();
                }
            }
            this.tableRabatet = ((RabatetDataTable)(base.Tables["Rabatet"]));
            if ((initTable == true)) {
                if ((this.tableRabatet != null)) {
                    this.tableRabatet.InitVars();
                }
            }
            this.tableSalesPrice = ((SalesPriceDataTable)(base.Tables["SalesPrice"]));
            if ((initTable == true)) {
                if ((this.tableSalesPrice != null)) {
                    this.tableSalesPrice.InitVars();
                }
            }
            this.tableStatusiVizites = ((StatusiVizitesDataTable)(base.Tables["StatusiVizites"]));
            if ((initTable == true)) {
                if ((this.tableStatusiVizites != null)) {
                    this.tableStatusiVizites.InitVars();
                }
            }
            this.tableStoqet = ((StoqetDataTable)(base.Tables["Stoqet"]));
            if ((initTable == true)) {
                if ((this.tableStoqet != null)) {
                    this.tableStoqet.InitVars();
                }
            }
            this.tableSyncConfiguration = ((SyncConfigurationDataTable)(base.Tables["SyncConfiguration"]));
            if ((initTable == true)) {
                if ((this.tableSyncConfiguration != null)) {
                    this.tableSyncConfiguration.InitVars();
                }
            }
            this.tableVendet = ((VendetDataTable)(base.Tables["Vendet"]));
            if ((initTable == true)) {
                if ((this.tableVendet != null)) {
                    this.tableVendet.InitVars();
                }
            }
            this.tableVizitat = ((VizitatDataTable)(base.Tables["Vizitat"]));
            if ((initTable == true)) {
                if ((this.tableVizitat != null)) {
                    this.tableVizitat.InitVars();
                }
            }
            this.tableListaLiferimeve = ((ListaLiferimeveDataTable)(base.Tables["ListaLiferimeve"]));
            if ((initTable == true)) {
                if ((this.tableListaLiferimeve != null)) {
                    this.tableListaLiferimeve.InitVars();
                }
            }
            this.tableListaVizitave = ((ListaVizitaveDataTable)(base.Tables["ListaVizitave"]));
            if ((initTable == true)) {
                if ((this.tableListaVizitave != null)) {
                    this.tableListaVizitave.InitVars();
                }
            }
            this.tableListaShitjeve = ((ListaShitjeveDataTable)(base.Tables["ListaShitjeve"]));
            if ((initTable == true)) {
                if ((this.tableListaShitjeve != null)) {
                    this.tableListaShitjeve.InitVars();
                }
            }
            this.tableArtikujtShitur = ((ArtikujtShiturDataTable)(base.Tables["ArtikujtShitur"]));
            if ((initTable == true)) {
                if ((this.tableArtikujtShitur != null)) {
                    this.tableArtikujtShitur.InitVars();
                }
            }
            this.tableArtikujt = ((ArtikujtDataTable)(base.Tables["Artikujt"]));
            if ((initTable == true)) {
                if ((this.tableArtikujt != null)) {
                    this.tableArtikujt.InitVars();
                }
            }
            this.tableArtikujtStoqet = ((ArtikujtStoqetDataTable)(base.Tables["ArtikujtStoqet"]));
            if ((initTable == true)) {
                if ((this.tableArtikujtStoqet != null)) {
                    this.tableArtikujtStoqet.InitVars();
                }
            }
            this.tableLog_SyncErrors = ((Log_SyncErrorsDataTable)(base.Tables["Log_SyncErrors"]));
            if ((initTable == true)) {
                if ((this.tableLog_SyncErrors != null)) {
                    this.tableLog_SyncErrors.InitVars();
                }
            }
            this.tableArtikujDepo = ((ArtikujDepoDataTable)(base.Tables["ArtikujDepo"]));
            if ((initTable == true)) {
                if ((this.tableArtikujDepo != null)) {
                    this.tableArtikujDepo.InitVars();
                }
            }
            this.tableFaturatPagesat = ((FaturatPagesatDataTable)(base.Tables["FaturatPagesat"]));
            if ((initTable == true)) {
                if ((this.tableFaturatPagesat != null)) {
                    this.tableFaturatPagesat.InitVars();
                }
            }
            this.tableNumriFaturave = ((NumriFaturaveDataTable)(base.Tables["NumriFaturave"]));
            if ((initTable == true)) {
                if ((this.tableNumriFaturave != null)) {
                    this.tableNumriFaturave.InitVars();
                }
            }
            this.tableOrders = ((OrdersDataTable)(base.Tables["Orders"]));
            if ((initTable == true)) {
                if ((this.tableOrders != null)) {
                    this.tableOrders.InitVars();
                }
            }
            this.tableOrder_Details = ((Order_DetailsDataTable)(base.Tables["Order_Details"]));
            if ((initTable == true)) {
                if ((this.tableOrder_Details != null)) {
                    this.tableOrder_Details.InitVars();
                }
            }
            this.tablerptOrder_Details = ((rptOrder_DetailsDataTable)(base.Tables["rptOrder_Details"]));
            if ((initTable == true)) {
                if ((this.tablerptOrder_Details != null)) {
                    this.tablerptOrder_Details.InitVars();
                }
            }
            this.relationKlientet_KlientDheLokacion = this.Relations["Klientet_KlientDheLokacion"];
            this.relationKlientDheLokacion_Vizitat = this.Relations["KlientDheLokacion_Vizitat"];
            this.relationFK_LiferimiArt_Liferimi = this.Relations["FK_LiferimiArt_Liferimi"];
            this.relationFK_Fatura_Liferimi = this.Relations["FK_Fatura_Liferimi"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MyMobileDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MyMobileDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAgjendet = new AgjendetDataTable();
            base.Tables.Add(this.tableAgjendet);
            this.tableFatura = new FaturaDataTable();
            base.Tables.Add(this.tableFatura);
            this.tableKlientDheLokacion = new KlientDheLokacionDataTable();
            base.Tables.Add(this.tableKlientDheLokacion);
            this.tableKlientet = new KlientetDataTable();
            base.Tables.Add(this.tableKlientet);
            this.tableKonfigurimi = new KonfigurimiDataTable();
            base.Tables.Add(this.tableKonfigurimi);
            this.tableLiferimi = new LiferimiDataTable();
            base.Tables.Add(this.tableLiferimi);
            this.tableLiferimiArt = new LiferimiArtDataTable();
            base.Tables.Add(this.tableLiferimiArt);
            this.tableNumerimIntern = new NumerimInternDataTable();
            base.Tables.Add(this.tableNumerimIntern);
            this.tablePorosiaArt = new PorosiaArtDataTable(false);
            base.Tables.Add(this.tablePorosiaArt);
            this.tablePorosite = new PorositeDataTable();
            base.Tables.Add(this.tablePorosite);
            this.tablePriceGroup = new PriceGroupDataTable();
            base.Tables.Add(this.tablePriceGroup);
            this.tableRabatet = new RabatetDataTable();
            base.Tables.Add(this.tableRabatet);
            this.tableSalesPrice = new SalesPriceDataTable();
            base.Tables.Add(this.tableSalesPrice);
            this.tableStatusiVizites = new StatusiVizitesDataTable();
            base.Tables.Add(this.tableStatusiVizites);
            this.tableStoqet = new StoqetDataTable();
            base.Tables.Add(this.tableStoqet);
            this.tableSyncConfiguration = new SyncConfigurationDataTable();
            base.Tables.Add(this.tableSyncConfiguration);
            this.tableVendet = new VendetDataTable();
            base.Tables.Add(this.tableVendet);
            this.tableVizitat = new VizitatDataTable();
            base.Tables.Add(this.tableVizitat);
            this.tableListaLiferimeve = new ListaLiferimeveDataTable();
            base.Tables.Add(this.tableListaLiferimeve);
            this.tableListaVizitave = new ListaVizitaveDataTable(false);
            base.Tables.Add(this.tableListaVizitave);
            this.tableListaShitjeve = new ListaShitjeveDataTable();
            base.Tables.Add(this.tableListaShitjeve);
            this.tableArtikujtShitur = new ArtikujtShiturDataTable();
            base.Tables.Add(this.tableArtikujtShitur);
            this.tableArtikujt = new ArtikujtDataTable();
            base.Tables.Add(this.tableArtikujt);
            this.tableArtikujtStoqet = new ArtikujtStoqetDataTable(false);
            base.Tables.Add(this.tableArtikujtStoqet);
            this.tableLog_SyncErrors = new Log_SyncErrorsDataTable();
            base.Tables.Add(this.tableLog_SyncErrors);
            this.tableArtikujDepo = new ArtikujDepoDataTable();
            base.Tables.Add(this.tableArtikujDepo);
            this.tableFaturatPagesat = new FaturatPagesatDataTable();
            base.Tables.Add(this.tableFaturatPagesat);
            this.tableNumriFaturave = new NumriFaturaveDataTable();
            base.Tables.Add(this.tableNumriFaturave);
            this.tableOrders = new OrdersDataTable();
            base.Tables.Add(this.tableOrders);
            this.tableOrder_Details = new Order_DetailsDataTable();
            base.Tables.Add(this.tableOrder_Details);
            this.tablerptOrder_Details = new rptOrder_DetailsDataTable();
            base.Tables.Add(this.tablerptOrder_Details);
            this.relationKlientet_KlientDheLokacion = new global::System.Data.DataRelation("Klientet_KlientDheLokacion", new global::System.Data.DataColumn[] {
                        this.tableKlientet.IDKlientiColumn}, new global::System.Data.DataColumn[] {
                        this.tableKlientDheLokacion.IDKlientiColumn}, false);
            this.Relations.Add(this.relationKlientet_KlientDheLokacion);
            this.relationKlientDheLokacion_Vizitat = new global::System.Data.DataRelation("KlientDheLokacion_Vizitat", new global::System.Data.DataColumn[] {
                        this.tableKlientDheLokacion.IDKlientDheLokacionColumn}, new global::System.Data.DataColumn[] {
                        this.tableVizitat.IDKlientDheLokacionColumn}, false);
            this.Relations.Add(this.relationKlientDheLokacion_Vizitat);
            this.relationFK_LiferimiArt_Liferimi = new global::System.Data.DataRelation("FK_LiferimiArt_Liferimi", new global::System.Data.DataColumn[] {
                        this.tableLiferimi.IDLiferimiColumn}, new global::System.Data.DataColumn[] {
                        this.tableLiferimiArt.IDLiferimiColumn}, false);
            this.Relations.Add(this.relationFK_LiferimiArt_Liferimi);
            this.relationFK_Fatura_Liferimi = new global::System.Data.DataRelation("FK_Fatura_Liferimi", new global::System.Data.DataColumn[] {
                        this.tableLiferimi.IDLiferimiColumn}, new global::System.Data.DataColumn[] {
                        this.tableFatura.IDLiferimiColumn}, false);
            this.Relations.Add(this.relationFK_Fatura_Liferimi);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAgjendet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFatura() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKlientDheLokacion() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKlientet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKonfigurimi() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLiferimi() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLiferimiArt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNumerimIntern() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePorosiaArt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePorosite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePriceGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRabatet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesPrice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStatusiVizites() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoqet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSyncConfiguration() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVendet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVizitat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListaLiferimeve() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListaVizitave() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListaShitjeve() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArtikujtShitur() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArtikujt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArtikujtStoqet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLog_SyncErrors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArtikujDepo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFaturatPagesat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNumriFaturave() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrder_Details() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerptOrder_Details() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MyMobileDataSet ds = new MyMobileDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.PorosiaArt.ShumaTotaleColumn.Expression = "SasiaPorositur*CmimiAktual-((SasiaPorositur*CmimiAktual)*Rabatet/100)";
            this.ListaVizitave.StatPorosiaColumn.Expression = "IDStatusiVizites";
            this.ListaVizitave.TestStatColumn.Expression = "IIF(IDStatusiVizites=\'6\',\'√\',IIF(IDStatusiVizites=\'5\',\'√\',IIF(IDStatusiVizites=\'4" +
                "\',\'√\',IIF(IDStatusiVizites=\'3\',\'√\',IIF(IDStatusiVizites=\'2\',\'√\',IIF(IDStatusiViz" +
                "ites=\'0\',\'X\',\'\'))))))";
            this.ArtikujtStoqet.PriceBoxColumn.Expression = "Paketa*UnitPrice";
        }
        
        public delegate void AgjendetRowChangeEventHandler(object sender, AgjendetRowChangeEvent e);
        
        public delegate void FaturaRowChangeEventHandler(object sender, FaturaRowChangeEvent e);
        
        public delegate void KlientDheLokacionRowChangeEventHandler(object sender, KlientDheLokacionRowChangeEvent e);
        
        public delegate void KlientetRowChangeEventHandler(object sender, KlientetRowChangeEvent e);
        
        public delegate void KonfigurimiRowChangeEventHandler(object sender, KonfigurimiRowChangeEvent e);
        
        public delegate void LiferimiRowChangeEventHandler(object sender, LiferimiRowChangeEvent e);
        
        public delegate void LiferimiArtRowChangeEventHandler(object sender, LiferimiArtRowChangeEvent e);
        
        public delegate void NumerimInternRowChangeEventHandler(object sender, NumerimInternRowChangeEvent e);
        
        public delegate void PorosiaArtRowChangeEventHandler(object sender, PorosiaArtRowChangeEvent e);
        
        public delegate void PorositeRowChangeEventHandler(object sender, PorositeRowChangeEvent e);
        
        public delegate void PriceGroupRowChangeEventHandler(object sender, PriceGroupRowChangeEvent e);
        
        public delegate void RabatetRowChangeEventHandler(object sender, RabatetRowChangeEvent e);
        
        public delegate void SalesPriceRowChangeEventHandler(object sender, SalesPriceRowChangeEvent e);
        
        public delegate void StatusiVizitesRowChangeEventHandler(object sender, StatusiVizitesRowChangeEvent e);
        
        public delegate void StoqetRowChangeEventHandler(object sender, StoqetRowChangeEvent e);
        
        public delegate void SyncConfigurationRowChangeEventHandler(object sender, SyncConfigurationRowChangeEvent e);
        
        public delegate void VendetRowChangeEventHandler(object sender, VendetRowChangeEvent e);
        
        public delegate void VizitatRowChangeEventHandler(object sender, VizitatRowChangeEvent e);
        
        public delegate void ListaLiferimeveRowChangeEventHandler(object sender, ListaLiferimeveRowChangeEvent e);
        
        public delegate void ListaVizitaveRowChangeEventHandler(object sender, ListaVizitaveRowChangeEvent e);
        
        public delegate void ListaShitjeveRowChangeEventHandler(object sender, ListaShitjeveRowChangeEvent e);
        
        public delegate void ArtikujtShiturRowChangeEventHandler(object sender, ArtikujtShiturRowChangeEvent e);
        
        public delegate void ArtikujtRowChangeEventHandler(object sender, ArtikujtRowChangeEvent e);
        
        public delegate void ArtikujtStoqetRowChangeEventHandler(object sender, ArtikujtStoqetRowChangeEvent e);
        
        public delegate void Log_SyncErrorsRowChangeEventHandler(object sender, Log_SyncErrorsRowChangeEvent e);
        
        public delegate void ArtikujDepoRowChangeEventHandler(object sender, ArtikujDepoRowChangeEvent e);
        
        public delegate void FaturatPagesatRowChangeEventHandler(object sender, FaturatPagesatRowChangeEvent e);
        
        public delegate void NumriFaturaveRowChangeEventHandler(object sender, NumriFaturaveRowChangeEvent e);
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        public delegate void Order_DetailsRowChangeEventHandler(object sender, Order_DetailsRowChangeEvent e);
        
        public delegate void rptOrder_DetailsRowChangeEventHandler(object sender, rptOrder_DetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgjendetDataTable : global::System.Data.TypedTableBase<AgjendetRow> {
            
            private global::System.Data.DataColumn columnIDAgjenti;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnMbiemri;
            
            private global::System.Data.DataColumn columnPerdoruesi;
            
            private global::System.Data.DataColumn columnFjalekalimi;
            
            private global::System.Data.DataColumn columnGjendja;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnDepo;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnAprovimFaturash;
            
            private global::System.Data.DataColumn columnMeAprovim;
            
            private global::System.Data.DataColumn columnPaAprovim;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetDataTable() {
                this.TableName = "Agjendet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AgjendetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDAgjentiColumn {
                get {
                    return this.columnIDAgjenti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MbiemriColumn {
                get {
                    return this.columnMbiemri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerdoruesiColumn {
                get {
                    return this.columnPerdoruesi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FjalekalimiColumn {
                get {
                    return this.columnFjalekalimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GjendjaColumn {
                get {
                    return this.columnGjendja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepoColumn {
                get {
                    return this.columnDepo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AprovimFaturashColumn {
                get {
                    return this.columnAprovimFaturash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeAprovimColumn {
                get {
                    return this.columnMeAprovim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaAprovimColumn {
                get {
                    return this.columnPaAprovim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetRow this[int index] {
                get {
                    return ((AgjendetRow)(this.Rows[index]));
                }
            }
            
            public event AgjendetRowChangeEventHandler AgjendetRowChanging;
            
            public event AgjendetRowChangeEventHandler AgjendetRowChanged;
            
            public event AgjendetRowChangeEventHandler AgjendetRowDeleting;
            
            public event AgjendetRowChangeEventHandler AgjendetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAgjendetRow(AgjendetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetRow AddAgjendetRow(string IDAgjenti, string Emri, string Mbiemri, string Perdoruesi, string Fjalekalimi, string Gjendja, string DeviceID, string Depo, int SyncStatus, bool AprovimFaturash, string MeAprovim, string PaAprovim) {
                AgjendetRow rowAgjendetRow = ((AgjendetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDAgjenti,
                        Emri,
                        Mbiemri,
                        Perdoruesi,
                        Fjalekalimi,
                        Gjendja,
                        DeviceID,
                        Depo,
                        SyncStatus,
                        AprovimFaturash,
                        MeAprovim,
                        PaAprovim};
                rowAgjendetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAgjendetRow);
                return rowAgjendetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetRow FindByIDAgjenti(string IDAgjenti) {
                return ((AgjendetRow)(this.Rows.Find(new object[] {
                            IDAgjenti})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AgjendetDataTable cln = ((AgjendetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AgjendetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDAgjenti = base.Columns["IDAgjenti"];
                this.columnEmri = base.Columns["Emri"];
                this.columnMbiemri = base.Columns["Mbiemri"];
                this.columnPerdoruesi = base.Columns["Perdoruesi"];
                this.columnFjalekalimi = base.Columns["Fjalekalimi"];
                this.columnGjendja = base.Columns["Gjendja"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnDepo = base.Columns["Depo"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnAprovimFaturash = base.Columns["AprovimFaturash"];
                this.columnMeAprovim = base.Columns["MeAprovim"];
                this.columnPaAprovim = base.Columns["PaAprovim"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDAgjenti = new global::System.Data.DataColumn("IDAgjenti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDAgjenti);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnMbiemri = new global::System.Data.DataColumn("Mbiemri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMbiemri);
                this.columnPerdoruesi = new global::System.Data.DataColumn("Perdoruesi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerdoruesi);
                this.columnFjalekalimi = new global::System.Data.DataColumn("Fjalekalimi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFjalekalimi);
                this.columnGjendja = new global::System.Data.DataColumn("Gjendja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGjendja);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnDepo = new global::System.Data.DataColumn("Depo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepo);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnAprovimFaturash = new global::System.Data.DataColumn("AprovimFaturash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAprovimFaturash);
                this.columnMeAprovim = new global::System.Data.DataColumn("MeAprovim", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeAprovim);
                this.columnPaAprovim = new global::System.Data.DataColumn("PaAprovim", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaAprovim);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDAgjenti}, true));
                this.columnIDAgjenti.AllowDBNull = false;
                this.columnIDAgjenti.Unique = true;
                this.columnIDAgjenti.MaxLength = 20;
                this.columnEmri.MaxLength = 50;
                this.columnMbiemri.MaxLength = 15;
                this.columnPerdoruesi.MaxLength = 15;
                this.columnFjalekalimi.AllowDBNull = false;
                this.columnFjalekalimi.MaxLength = 15;
                this.columnGjendja.MaxLength = 10;
                this.columnDeviceID.MaxLength = 10;
                this.columnDepo.AllowDBNull = false;
                this.columnDepo.MaxLength = 10;
                this.columnMeAprovim.MaxLength = 50;
                this.columnPaAprovim.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetRow NewAgjendetRow() {
                return ((AgjendetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AgjendetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AgjendetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgjendetRowChanged != null)) {
                    this.AgjendetRowChanged(this, new AgjendetRowChangeEvent(((AgjendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgjendetRowChanging != null)) {
                    this.AgjendetRowChanging(this, new AgjendetRowChangeEvent(((AgjendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgjendetRowDeleted != null)) {
                    this.AgjendetRowDeleted(this, new AgjendetRowChangeEvent(((AgjendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgjendetRowDeleting != null)) {
                    this.AgjendetRowDeleting(this, new AgjendetRowChangeEvent(((AgjendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAgjendetRow(AgjendetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgjendetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FaturaDataTable : global::System.Data.TypedTableBase<FaturaRow> {
            
            private global::System.Data.DataColumn columnIDFatura;
            
            private global::System.Data.DataColumn columnData;
            
            private global::System.Data.DataColumn columnShumaTotale;
            
            private global::System.Data.DataColumn columnIDLiferimi;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaDataTable() {
                this.TableName = "Fatura";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FaturaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDFaturaColumn {
                get {
                    return this.columnIDFatura;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShumaTotaleColumn {
                get {
                    return this.columnShumaTotale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDLiferimiColumn {
                get {
                    return this.columnIDLiferimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRow this[int index] {
                get {
                    return ((FaturaRow)(this.Rows[index]));
                }
            }
            
            public event FaturaRowChangeEventHandler FaturaRowChanging;
            
            public event FaturaRowChangeEventHandler FaturaRowChanged;
            
            public event FaturaRowChangeEventHandler FaturaRowDeleting;
            
            public event FaturaRowChangeEventHandler FaturaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFaturaRow(FaturaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRow AddFaturaRow(System.Guid IDFatura, string Data, double ShumaTotale, LiferimiRow parentLiferimiRowByFK_Fatura_Liferimi, string DeviceID, int SyncStatus) {
                FaturaRow rowFaturaRow = ((FaturaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDFatura,
                        Data,
                        ShumaTotale,
                        null,
                        DeviceID,
                        SyncStatus};
                if ((parentLiferimiRowByFK_Fatura_Liferimi != null)) {
                    columnValuesArray[3] = parentLiferimiRowByFK_Fatura_Liferimi[0];
                }
                rowFaturaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFaturaRow);
                return rowFaturaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRow FindByIDFatura(System.Guid IDFatura) {
                return ((FaturaRow)(this.Rows.Find(new object[] {
                            IDFatura})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FaturaDataTable cln = ((FaturaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FaturaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDFatura = base.Columns["IDFatura"];
                this.columnData = base.Columns["Data"];
                this.columnShumaTotale = base.Columns["ShumaTotale"];
                this.columnIDLiferimi = base.Columns["IDLiferimi"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDFatura = new global::System.Data.DataColumn("IDFatura", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDFatura);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnShumaTotale = new global::System.Data.DataColumn("ShumaTotale", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShumaTotale);
                this.columnIDLiferimi = new global::System.Data.DataColumn("IDLiferimi", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLiferimi);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDFatura}, true));
                this.columnIDFatura.AllowDBNull = false;
                this.columnIDFatura.Unique = true;
                this.columnData.AllowDBNull = false;
                this.columnData.MaxLength = 15;
                this.columnShumaTotale.AllowDBNull = false;
                this.columnDeviceID.AllowDBNull = false;
                this.columnDeviceID.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRow NewFaturaRow() {
                return ((FaturaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FaturaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FaturaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FaturaRowChanged != null)) {
                    this.FaturaRowChanged(this, new FaturaRowChangeEvent(((FaturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FaturaRowChanging != null)) {
                    this.FaturaRowChanging(this, new FaturaRowChangeEvent(((FaturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FaturaRowDeleted != null)) {
                    this.FaturaRowDeleted(this, new FaturaRowChangeEvent(((FaturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FaturaRowDeleting != null)) {
                    this.FaturaRowDeleting(this, new FaturaRowChangeEvent(((FaturaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFaturaRow(FaturaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FaturaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KlientDheLokacionDataTable : global::System.Data.TypedTableBase<KlientDheLokacionRow> {
            
            private global::System.Data.DataColumn columnIDKlientDheLokacion;
            
            private global::System.Data.DataColumn columnEmriLokacionit;
            
            private global::System.Data.DataColumn columnAdresa;
            
            private global::System.Data.DataColumn columnKontaktEmriMbiemri;
            
            private global::System.Data.DataColumn _columnTel_Mobil;
            
            private global::System.Data.DataColumn columnIDVendi;
            
            private global::System.Data.DataColumn columnIDKlienti;
            
            private global::System.Data.DataColumn columnBarkodi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionDataTable() {
                this.TableName = "KlientDheLokacion";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KlientDheLokacionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientDheLokacionColumn {
                get {
                    return this.columnIDKlientDheLokacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriLokacionitColumn {
                get {
                    return this.columnEmriLokacionit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdresaColumn {
                get {
                    return this.columnAdresa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KontaktEmriMbiemriColumn {
                get {
                    return this.columnKontaktEmriMbiemri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Tel_MobilColumn {
                get {
                    return this._columnTel_Mobil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVendiColumn {
                get {
                    return this.columnIDVendi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientiColumn {
                get {
                    return this.columnIDKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarkodiColumn {
                get {
                    return this.columnBarkodi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow this[int index] {
                get {
                    return ((KlientDheLokacionRow)(this.Rows[index]));
                }
            }
            
            public event KlientDheLokacionRowChangeEventHandler KlientDheLokacionRowChanging;
            
            public event KlientDheLokacionRowChangeEventHandler KlientDheLokacionRowChanged;
            
            public event KlientDheLokacionRowChangeEventHandler KlientDheLokacionRowDeleting;
            
            public event KlientDheLokacionRowChangeEventHandler KlientDheLokacionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKlientDheLokacionRow(KlientDheLokacionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow AddKlientDheLokacionRow(string IDKlientDheLokacion, string EmriLokacionit, string Adresa, string KontaktEmriMbiemri, string _Tel_Mobil, string IDVendi, KlientetRow parentKlientetRowByKlientet_KlientDheLokacion, string Barkodi) {
                KlientDheLokacionRow rowKlientDheLokacionRow = ((KlientDheLokacionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDKlientDheLokacion,
                        EmriLokacionit,
                        Adresa,
                        KontaktEmriMbiemri,
                        _Tel_Mobil,
                        IDVendi,
                        null,
                        Barkodi};
                if ((parentKlientetRowByKlientet_KlientDheLokacion != null)) {
                    columnValuesArray[6] = parentKlientetRowByKlientet_KlientDheLokacion[0];
                }
                rowKlientDheLokacionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKlientDheLokacionRow);
                return rowKlientDheLokacionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow FindByIDKlientDheLokacion(string IDKlientDheLokacion) {
                return ((KlientDheLokacionRow)(this.Rows.Find(new object[] {
                            IDKlientDheLokacion})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KlientDheLokacionDataTable cln = ((KlientDheLokacionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KlientDheLokacionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDKlientDheLokacion = base.Columns["IDKlientDheLokacion"];
                this.columnEmriLokacionit = base.Columns["EmriLokacionit"];
                this.columnAdresa = base.Columns["Adresa"];
                this.columnKontaktEmriMbiemri = base.Columns["KontaktEmriMbiemri"];
                this._columnTel_Mobil = base.Columns["Tel/Mobil"];
                this.columnIDVendi = base.Columns["IDVendi"];
                this.columnIDKlienti = base.Columns["IDKlienti"];
                this.columnBarkodi = base.Columns["Barkodi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDKlientDheLokacion = new global::System.Data.DataColumn("IDKlientDheLokacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlientDheLokacion);
                this.columnEmriLokacionit = new global::System.Data.DataColumn("EmriLokacionit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmriLokacionit);
                this.columnAdresa = new global::System.Data.DataColumn("Adresa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdresa);
                this.columnKontaktEmriMbiemri = new global::System.Data.DataColumn("KontaktEmriMbiemri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKontaktEmriMbiemri);
                this._columnTel_Mobil = new global::System.Data.DataColumn("Tel/Mobil", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnTel_Mobil.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnTel_Mobil");
                this._columnTel_Mobil.ExtendedProperties.Add("Generator_UserColumnName", "Tel/Mobil");
                base.Columns.Add(this._columnTel_Mobil);
                this.columnIDVendi = new global::System.Data.DataColumn("IDVendi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVendi);
                this.columnIDKlienti = new global::System.Data.DataColumn("IDKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlienti);
                this.columnBarkodi = new global::System.Data.DataColumn("Barkodi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarkodi);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDKlientDheLokacion}, true));
                this.columnIDKlientDheLokacion.AllowDBNull = false;
                this.columnIDKlientDheLokacion.Unique = true;
                this.columnIDKlientDheLokacion.MaxLength = 20;
                this.columnEmriLokacionit.AllowDBNull = false;
                this.columnEmriLokacionit.MaxLength = 40;
                this.columnAdresa.AllowDBNull = false;
                this.columnAdresa.MaxLength = 30;
                this.columnKontaktEmriMbiemri.AllowDBNull = false;
                this.columnKontaktEmriMbiemri.MaxLength = 50;
                this._columnTel_Mobil.AllowDBNull = false;
                this._columnTel_Mobil.MaxLength = 25;
                this.columnIDVendi.AllowDBNull = false;
                this.columnIDVendi.MaxLength = 20;
                this.columnIDKlienti.MaxLength = 20;
                this.columnBarkodi.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow NewKlientDheLokacionRow() {
                return ((KlientDheLokacionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KlientDheLokacionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KlientDheLokacionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KlientDheLokacionRowChanged != null)) {
                    this.KlientDheLokacionRowChanged(this, new KlientDheLokacionRowChangeEvent(((KlientDheLokacionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KlientDheLokacionRowChanging != null)) {
                    this.KlientDheLokacionRowChanging(this, new KlientDheLokacionRowChangeEvent(((KlientDheLokacionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KlientDheLokacionRowDeleted != null)) {
                    this.KlientDheLokacionRowDeleted(this, new KlientDheLokacionRowChangeEvent(((KlientDheLokacionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KlientDheLokacionRowDeleting != null)) {
                    this.KlientDheLokacionRowDeleting(this, new KlientDheLokacionRowChangeEvent(((KlientDheLokacionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKlientDheLokacionRow(KlientDheLokacionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KlientDheLokacionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KlientetDataTable : global::System.Data.TypedTableBase<KlientetRow> {
            
            private global::System.Data.DataColumn columnIDKlienti;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnEmailKontakt;
            
            private global::System.Data.DataColumn columnKontaktNumer;
            
            private global::System.Data.DataColumn columnShkKlienti;
            
            private global::System.Data.DataColumn columnGrRabatet;
            
            private global::System.Data.DataColumn columnGrCmimoret;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetDataTable() {
                this.TableName = "Klientet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KlientetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientiColumn {
                get {
                    return this.columnIDKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailKontaktColumn {
                get {
                    return this.columnEmailKontakt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KontaktNumerColumn {
                get {
                    return this.columnKontaktNumer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShkKlientiColumn {
                get {
                    return this.columnShkKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrRabatetColumn {
                get {
                    return this.columnGrRabatet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrCmimoretColumn {
                get {
                    return this.columnGrCmimoret;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRow this[int index] {
                get {
                    return ((KlientetRow)(this.Rows[index]));
                }
            }
            
            public event KlientetRowChangeEventHandler KlientetRowChanging;
            
            public event KlientetRowChangeEventHandler KlientetRowChanged;
            
            public event KlientetRowChangeEventHandler KlientetRowDeleting;
            
            public event KlientetRowChangeEventHandler KlientetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKlientetRow(KlientetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRow AddKlientetRow(string IDKlienti, string Emri, string EmailKontakt, string KontaktNumer, string ShkKlienti, string GrRabatet, string GrCmimoret) {
                KlientetRow rowKlientetRow = ((KlientetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDKlienti,
                        Emri,
                        EmailKontakt,
                        KontaktNumer,
                        ShkKlienti,
                        GrRabatet,
                        GrCmimoret};
                rowKlientetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKlientetRow);
                return rowKlientetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRow FindByIDKlienti(string IDKlienti) {
                return ((KlientetRow)(this.Rows.Find(new object[] {
                            IDKlienti})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KlientetDataTable cln = ((KlientetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KlientetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDKlienti = base.Columns["IDKlienti"];
                this.columnEmri = base.Columns["Emri"];
                this.columnEmailKontakt = base.Columns["EmailKontakt"];
                this.columnKontaktNumer = base.Columns["KontaktNumer"];
                this.columnShkKlienti = base.Columns["ShkKlienti"];
                this.columnGrRabatet = base.Columns["GrRabatet"];
                this.columnGrCmimoret = base.Columns["GrCmimoret"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDKlienti = new global::System.Data.DataColumn("IDKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlienti);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnEmailKontakt = new global::System.Data.DataColumn("EmailKontakt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailKontakt);
                this.columnKontaktNumer = new global::System.Data.DataColumn("KontaktNumer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKontaktNumer);
                this.columnShkKlienti = new global::System.Data.DataColumn("ShkKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShkKlienti);
                this.columnGrRabatet = new global::System.Data.DataColumn("GrRabatet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrRabatet);
                this.columnGrCmimoret = new global::System.Data.DataColumn("GrCmimoret", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrCmimoret);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDKlienti}, true));
                this.columnIDKlienti.AllowDBNull = false;
                this.columnIDKlienti.Unique = true;
                this.columnIDKlienti.MaxLength = 20;
                this.columnEmri.MaxLength = 30;
                this.columnEmailKontakt.MaxLength = 30;
                this.columnKontaktNumer.MaxLength = 30;
                this.columnShkKlienti.MaxLength = 3;
                this.columnGrRabatet.MaxLength = 20;
                this.columnGrCmimoret.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRow NewKlientetRow() {
                return ((KlientetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KlientetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KlientetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KlientetRowChanged != null)) {
                    this.KlientetRowChanged(this, new KlientetRowChangeEvent(((KlientetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KlientetRowChanging != null)) {
                    this.KlientetRowChanging(this, new KlientetRowChangeEvent(((KlientetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KlientetRowDeleted != null)) {
                    this.KlientetRowDeleted(this, new KlientetRowChangeEvent(((KlientetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KlientetRowDeleting != null)) {
                    this.KlientetRowDeleting(this, new KlientetRowChangeEvent(((KlientetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKlientetRow(KlientetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KlientetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KonfigurimiDataTable : global::System.Data.TypedTableBase<KonfigurimiRow> {
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnIDAgent;
            
            private global::System.Data.DataColumn columnGetPayment;
            
            private global::System.Data.DataColumn columnPrintBill;
            
            private global::System.Data.DataColumn columnApplicationMode;
            
            private global::System.Data.DataColumn columnDepo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiDataTable() {
                this.TableName = "Konfigurimi";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KonfigurimiDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDAgentColumn {
                get {
                    return this.columnIDAgent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GetPaymentColumn {
                get {
                    return this.columnGetPayment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrintBillColumn {
                get {
                    return this.columnPrintBill;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplicationModeColumn {
                get {
                    return this.columnApplicationMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepoColumn {
                get {
                    return this.columnDepo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiRow this[int index] {
                get {
                    return ((KonfigurimiRow)(this.Rows[index]));
                }
            }
            
            public event KonfigurimiRowChangeEventHandler KonfigurimiRowChanging;
            
            public event KonfigurimiRowChangeEventHandler KonfigurimiRowChanged;
            
            public event KonfigurimiRowChangeEventHandler KonfigurimiRowDeleting;
            
            public event KonfigurimiRowChangeEventHandler KonfigurimiRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKonfigurimiRow(KonfigurimiRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiRow AddKonfigurimiRow(string DeviceID, string IDAgent, bool GetPayment, bool PrintBill, string ApplicationMode, string Depo) {
                KonfigurimiRow rowKonfigurimiRow = ((KonfigurimiRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeviceID,
                        IDAgent,
                        GetPayment,
                        PrintBill,
                        ApplicationMode,
                        Depo};
                rowKonfigurimiRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKonfigurimiRow);
                return rowKonfigurimiRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiRow FindByDeviceID(string DeviceID) {
                return ((KonfigurimiRow)(this.Rows.Find(new object[] {
                            DeviceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KonfigurimiDataTable cln = ((KonfigurimiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KonfigurimiDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnIDAgent = base.Columns["IDAgent"];
                this.columnGetPayment = base.Columns["GetPayment"];
                this.columnPrintBill = base.Columns["PrintBill"];
                this.columnApplicationMode = base.Columns["ApplicationMode"];
                this.columnDepo = base.Columns["Depo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnIDAgent = new global::System.Data.DataColumn("IDAgent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDAgent);
                this.columnGetPayment = new global::System.Data.DataColumn("GetPayment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGetPayment);
                this.columnPrintBill = new global::System.Data.DataColumn("PrintBill", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrintBill);
                this.columnApplicationMode = new global::System.Data.DataColumn("ApplicationMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplicationMode);
                this.columnDepo = new global::System.Data.DataColumn("Depo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDeviceID}, true));
                this.columnDeviceID.AllowDBNull = false;
                this.columnDeviceID.Unique = true;
                this.columnDeviceID.MaxLength = 10;
                this.columnIDAgent.AllowDBNull = false;
                this.columnIDAgent.MaxLength = 20;
                this.columnApplicationMode.MaxLength = 10;
                this.columnDepo.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiRow NewKonfigurimiRow() {
                return ((KonfigurimiRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KonfigurimiRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KonfigurimiRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KonfigurimiRowChanged != null)) {
                    this.KonfigurimiRowChanged(this, new KonfigurimiRowChangeEvent(((KonfigurimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KonfigurimiRowChanging != null)) {
                    this.KonfigurimiRowChanging(this, new KonfigurimiRowChangeEvent(((KonfigurimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KonfigurimiRowDeleted != null)) {
                    this.KonfigurimiRowDeleted(this, new KonfigurimiRowChangeEvent(((KonfigurimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KonfigurimiRowDeleting != null)) {
                    this.KonfigurimiRowDeleting(this, new KonfigurimiRowChangeEvent(((KonfigurimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKonfigurimiRow(KonfigurimiRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KonfigurimiDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LiferimiDataTable : global::System.Data.TypedTableBase<LiferimiRow> {
            
            private global::System.Data.DataColumn columnIDLiferimi;
            
            private global::System.Data.DataColumn columnDataLiferuar;
            
            private global::System.Data.DataColumn columnKohaLiferuar;
            
            private global::System.Data.DataColumn columnTitulliLiferimit;
            
            private global::System.Data.DataColumn columnDataLiferimit;
            
            private global::System.Data.DataColumn columnKohaLiferimit;
            
            private global::System.Data.DataColumn columnIDPorosia;
            
            private global::System.Data.DataColumn columnLiferuar;
            
            private global::System.Data.DataColumn columnNrLiferimit;
            
            private global::System.Data.DataColumn columnCmimiTotal;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnShumaPaguar;
            
            private global::System.Data.DataColumn columnAprovuar;
            
            private global::System.Data.DataColumn columnLLOJDOK;
            
            private global::System.Data.DataColumn columnNrFatures;
            
            private global::System.Data.DataColumn columnPayType;
            
            private global::System.Data.DataColumn columnTotaliPaTVSH;
            
            private global::System.Data.DataColumn columnNrDetalet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiDataTable() {
                this.TableName = "Liferimi";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LiferimiDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDLiferimiColumn {
                get {
                    return this.columnIDLiferimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataLiferuarColumn {
                get {
                    return this.columnDataLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KohaLiferuarColumn {
                get {
                    return this.columnKohaLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitulliLiferimitColumn {
                get {
                    return this.columnTitulliLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataLiferimitColumn {
                get {
                    return this.columnDataLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KohaLiferimitColumn {
                get {
                    return this.columnKohaLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPorosiaColumn {
                get {
                    return this.columnIDPorosia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiferuarColumn {
                get {
                    return this.columnLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrLiferimitColumn {
                get {
                    return this.columnNrLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiTotalColumn {
                get {
                    return this.columnCmimiTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShumaPaguarColumn {
                get {
                    return this.columnShumaPaguar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AprovuarColumn {
                get {
                    return this.columnAprovuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LLOJDOKColumn {
                get {
                    return this.columnLLOJDOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrFaturesColumn {
                get {
                    return this.columnNrFatures;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayTypeColumn {
                get {
                    return this.columnPayType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotaliPaTVSHColumn {
                get {
                    return this.columnTotaliPaTVSH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrDetaletColumn {
                get {
                    return this.columnNrDetalet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow this[int index] {
                get {
                    return ((LiferimiRow)(this.Rows[index]));
                }
            }
            
            public event LiferimiRowChangeEventHandler LiferimiRowChanging;
            
            public event LiferimiRowChangeEventHandler LiferimiRowChanged;
            
            public event LiferimiRowChangeEventHandler LiferimiRowDeleting;
            
            public event LiferimiRowChangeEventHandler LiferimiRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLiferimiRow(LiferimiRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow AddLiferimiRow(
                        System.Guid IDLiferimi, 
                        System.DateTime DataLiferuar, 
                        System.DateTime KohaLiferuar, 
                        string TitulliLiferimit, 
                        System.DateTime DataLiferimit, 
                        System.DateTime KohaLiferimit, 
                        System.Guid IDPorosia, 
                        byte Liferuar, 
                        string NrLiferimit, 
                        float CmimiTotal, 
                        string DeviceID, 
                        int SyncStatus, 
                        float ShumaPaguar, 
                        bool Aprovuar, 
                        string LLOJDOK, 
                        string NrFatures, 
                        string PayType, 
                        float TotaliPaTVSH, 
                        int NrDetalet) {
                LiferimiRow rowLiferimiRow = ((LiferimiRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDLiferimi,
                        DataLiferuar,
                        KohaLiferuar,
                        TitulliLiferimit,
                        DataLiferimit,
                        KohaLiferimit,
                        IDPorosia,
                        Liferuar,
                        NrLiferimit,
                        CmimiTotal,
                        DeviceID,
                        SyncStatus,
                        ShumaPaguar,
                        Aprovuar,
                        LLOJDOK,
                        NrFatures,
                        PayType,
                        TotaliPaTVSH,
                        NrDetalet};
                rowLiferimiRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLiferimiRow);
                return rowLiferimiRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow FindByIDLiferimi(System.Guid IDLiferimi) {
                return ((LiferimiRow)(this.Rows.Find(new object[] {
                            IDLiferimi})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LiferimiDataTable cln = ((LiferimiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LiferimiDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDLiferimi = base.Columns["IDLiferimi"];
                this.columnDataLiferuar = base.Columns["DataLiferuar"];
                this.columnKohaLiferuar = base.Columns["KohaLiferuar"];
                this.columnTitulliLiferimit = base.Columns["TitulliLiferimit"];
                this.columnDataLiferimit = base.Columns["DataLiferimit"];
                this.columnKohaLiferimit = base.Columns["KohaLiferimit"];
                this.columnIDPorosia = base.Columns["IDPorosia"];
                this.columnLiferuar = base.Columns["Liferuar"];
                this.columnNrLiferimit = base.Columns["NrLiferimit"];
                this.columnCmimiTotal = base.Columns["CmimiTotal"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnShumaPaguar = base.Columns["ShumaPaguar"];
                this.columnAprovuar = base.Columns["Aprovuar"];
                this.columnLLOJDOK = base.Columns["LLOJDOK"];
                this.columnNrFatures = base.Columns["NrFatures"];
                this.columnPayType = base.Columns["PayType"];
                this.columnTotaliPaTVSH = base.Columns["TotaliPaTVSH"];
                this.columnNrDetalet = base.Columns["NrDetalet"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDLiferimi = new global::System.Data.DataColumn("IDLiferimi", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLiferimi);
                this.columnDataLiferuar = new global::System.Data.DataColumn("DataLiferuar", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataLiferuar);
                this.columnKohaLiferuar = new global::System.Data.DataColumn("KohaLiferuar", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKohaLiferuar);
                this.columnTitulliLiferimit = new global::System.Data.DataColumn("TitulliLiferimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitulliLiferimit);
                this.columnDataLiferimit = new global::System.Data.DataColumn("DataLiferimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataLiferimit);
                this.columnKohaLiferimit = new global::System.Data.DataColumn("KohaLiferimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKohaLiferimit);
                this.columnIDPorosia = new global::System.Data.DataColumn("IDPorosia", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPorosia);
                this.columnLiferuar = new global::System.Data.DataColumn("Liferuar", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiferuar);
                this.columnNrLiferimit = new global::System.Data.DataColumn("NrLiferimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrLiferimit);
                this.columnCmimiTotal = new global::System.Data.DataColumn("CmimiTotal", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiTotal);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnShumaPaguar = new global::System.Data.DataColumn("ShumaPaguar", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShumaPaguar);
                this.columnAprovuar = new global::System.Data.DataColumn("Aprovuar", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAprovuar);
                this.columnLLOJDOK = new global::System.Data.DataColumn("LLOJDOK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLLOJDOK);
                this.columnNrFatures = new global::System.Data.DataColumn("NrFatures", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrFatures);
                this.columnPayType = new global::System.Data.DataColumn("PayType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayType);
                this.columnTotaliPaTVSH = new global::System.Data.DataColumn("TotaliPaTVSH", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotaliPaTVSH);
                this.columnNrDetalet = new global::System.Data.DataColumn("NrDetalet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrDetalet);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDLiferimi}, true));
                this.columnIDLiferimi.AllowDBNull = false;
                this.columnIDLiferimi.Unique = true;
                this.columnTitulliLiferimit.MaxLength = 25;
                this.columnLiferuar.AllowDBNull = false;
                this.columnNrLiferimit.MaxLength = 25;
                this.columnDeviceID.MaxLength = 10;
                this.columnSyncStatus.AllowDBNull = false;
                this.columnSyncStatus.DefaultValue = ((int)(0));
                this.columnLLOJDOK.MaxLength = 30;
                this.columnNrFatures.MaxLength = 50;
                this.columnPayType.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow NewLiferimiRow() {
                return ((LiferimiRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LiferimiRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LiferimiRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LiferimiRowChanged != null)) {
                    this.LiferimiRowChanged(this, new LiferimiRowChangeEvent(((LiferimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LiferimiRowChanging != null)) {
                    this.LiferimiRowChanging(this, new LiferimiRowChangeEvent(((LiferimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LiferimiRowDeleted != null)) {
                    this.LiferimiRowDeleted(this, new LiferimiRowChangeEvent(((LiferimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LiferimiRowDeleting != null)) {
                    this.LiferimiRowDeleting(this, new LiferimiRowChangeEvent(((LiferimiRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLiferimiRow(LiferimiRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LiferimiDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LiferimiArtDataTable : global::System.Data.TypedTableBase<LiferimiArtRow> {
            
            private global::System.Data.DataColumn columnIDLiferimi;
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnCmimi;
            
            private global::System.Data.DataColumn columnSasiaLiferuar;
            
            private global::System.Data.DataColumn columnSasiaPorositur;
            
            private global::System.Data.DataColumn columnArtEmri;
            
            private global::System.Data.DataColumn columnTotali;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnGratis;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnIDArsyeja;
            
            private global::System.Data.DataColumn columnCmimiPaTVSH;
            
            private global::System.Data.DataColumn columnSeri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtDataTable() {
                this.TableName = "LiferimiArt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LiferimiArtDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDLiferimiColumn {
                get {
                    return this.columnIDLiferimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiColumn {
                get {
                    return this.columnCmimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaLiferuarColumn {
                get {
                    return this.columnSasiaLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaPorositurColumn {
                get {
                    return this.columnSasiaPorositur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtEmriColumn {
                get {
                    return this.columnArtEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotaliColumn {
                get {
                    return this.columnTotali;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GratisColumn {
                get {
                    return this.columnGratis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArsyejaColumn {
                get {
                    return this.columnIDArsyeja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiPaTVSHColumn {
                get {
                    return this.columnCmimiPaTVSH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriColumn {
                get {
                    return this.columnSeri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtRow this[int index] {
                get {
                    return ((LiferimiArtRow)(this.Rows[index]));
                }
            }
            
            public event LiferimiArtRowChangeEventHandler LiferimiArtRowChanging;
            
            public event LiferimiArtRowChangeEventHandler LiferimiArtRowChanged;
            
            public event LiferimiArtRowChangeEventHandler LiferimiArtRowDeleting;
            
            public event LiferimiArtRowChangeEventHandler LiferimiArtRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLiferimiArtRow(LiferimiArtRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtRow AddLiferimiArtRow(LiferimiRow parentLiferimiRowByFK_LiferimiArt_Liferimi, string IDArtikulli, float Cmimi, double SasiaLiferuar, double SasiaPorositur, string ArtEmri, float Totali, string DeviceID, double Gratis, int SyncStatus, int IDArsyeja, float CmimiPaTVSH, string Seri) {
                LiferimiArtRow rowLiferimiArtRow = ((LiferimiArtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IDArtikulli,
                        Cmimi,
                        SasiaLiferuar,
                        SasiaPorositur,
                        ArtEmri,
                        Totali,
                        DeviceID,
                        Gratis,
                        SyncStatus,
                        IDArsyeja,
                        CmimiPaTVSH,
                        Seri};
                if ((parentLiferimiRowByFK_LiferimiArt_Liferimi != null)) {
                    columnValuesArray[0] = parentLiferimiRowByFK_LiferimiArt_Liferimi[0];
                }
                rowLiferimiArtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLiferimiArtRow);
                return rowLiferimiArtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LiferimiArtDataTable cln = ((LiferimiArtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LiferimiArtDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDLiferimi = base.Columns["IDLiferimi"];
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnCmimi = base.Columns["Cmimi"];
                this.columnSasiaLiferuar = base.Columns["SasiaLiferuar"];
                this.columnSasiaPorositur = base.Columns["SasiaPorositur"];
                this.columnArtEmri = base.Columns["ArtEmri"];
                this.columnTotali = base.Columns["Totali"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnGratis = base.Columns["Gratis"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnIDArsyeja = base.Columns["IDArsyeja"];
                this.columnCmimiPaTVSH = base.Columns["CmimiPaTVSH"];
                this.columnSeri = base.Columns["Seri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDLiferimi = new global::System.Data.DataColumn("IDLiferimi", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLiferimi);
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnCmimi = new global::System.Data.DataColumn("Cmimi", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimi);
                this.columnSasiaLiferuar = new global::System.Data.DataColumn("SasiaLiferuar", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaLiferuar);
                this.columnSasiaPorositur = new global::System.Data.DataColumn("SasiaPorositur", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaPorositur);
                this.columnArtEmri = new global::System.Data.DataColumn("ArtEmri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtEmri);
                this.columnTotali = new global::System.Data.DataColumn("Totali", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotali);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnGratis = new global::System.Data.DataColumn("Gratis", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGratis);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnIDArsyeja = new global::System.Data.DataColumn("IDArsyeja", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArsyeja);
                this.columnCmimiPaTVSH = new global::System.Data.DataColumn("CmimiPaTVSH", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiPaTVSH);
                this.columnSeri = new global::System.Data.DataColumn("Seri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeri);
                this.columnIDLiferimi.AllowDBNull = false;
                this.columnIDArtikulli.AllowDBNull = false;
                this.columnIDArtikulli.MaxLength = 20;
                this.columnArtEmri.MaxLength = 50;
                this.columnDeviceID.MaxLength = 10;
                this.columnSyncStatus.AllowDBNull = false;
                this.columnSyncStatus.DefaultValue = ((int)(0));
                this.columnSeri.AllowDBNull = false;
                this.columnSeri.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtRow NewLiferimiArtRow() {
                return ((LiferimiArtRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LiferimiArtRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LiferimiArtRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LiferimiArtRowChanged != null)) {
                    this.LiferimiArtRowChanged(this, new LiferimiArtRowChangeEvent(((LiferimiArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LiferimiArtRowChanging != null)) {
                    this.LiferimiArtRowChanging(this, new LiferimiArtRowChangeEvent(((LiferimiArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LiferimiArtRowDeleted != null)) {
                    this.LiferimiArtRowDeleted(this, new LiferimiArtRowChangeEvent(((LiferimiArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LiferimiArtRowDeleting != null)) {
                    this.LiferimiArtRowDeleting(this, new LiferimiArtRowChangeEvent(((LiferimiArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLiferimiArtRow(LiferimiArtRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LiferimiArtDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NumerimInternDataTable : global::System.Data.TypedTableBase<NumerimInternRow> {
            
            private global::System.Data.DataColumn columnIDN;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternDataTable() {
                this.TableName = "NumerimIntern";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NumerimInternDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDNColumn {
                get {
                    return this.columnIDN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternRow this[int index] {
                get {
                    return ((NumerimInternRow)(this.Rows[index]));
                }
            }
            
            public event NumerimInternRowChangeEventHandler NumerimInternRowChanging;
            
            public event NumerimInternRowChangeEventHandler NumerimInternRowChanged;
            
            public event NumerimInternRowChangeEventHandler NumerimInternRowDeleting;
            
            public event NumerimInternRowChangeEventHandler NumerimInternRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNumerimInternRow(NumerimInternRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternRow AddNumerimInternRow(string DeviceID) {
                NumerimInternRow rowNumerimInternRow = ((NumerimInternRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DeviceID};
                rowNumerimInternRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNumerimInternRow);
                return rowNumerimInternRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternRow FindByIDN(int IDN) {
                return ((NumerimInternRow)(this.Rows.Find(new object[] {
                            IDN})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NumerimInternDataTable cln = ((NumerimInternDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NumerimInternDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDN = base.Columns["IDN"];
                this.columnDeviceID = base.Columns["DeviceID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDN = new global::System.Data.DataColumn("IDN", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDN);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDN}, true));
                this.columnIDN.AutoIncrement = true;
                this.columnIDN.AutoIncrementSeed = -1;
                this.columnIDN.AutoIncrementStep = -1;
                this.columnIDN.AllowDBNull = false;
                this.columnIDN.ReadOnly = true;
                this.columnIDN.Unique = true;
                this.columnDeviceID.AllowDBNull = false;
                this.columnDeviceID.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternRow NewNumerimInternRow() {
                return ((NumerimInternRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NumerimInternRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NumerimInternRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NumerimInternRowChanged != null)) {
                    this.NumerimInternRowChanged(this, new NumerimInternRowChangeEvent(((NumerimInternRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NumerimInternRowChanging != null)) {
                    this.NumerimInternRowChanging(this, new NumerimInternRowChangeEvent(((NumerimInternRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NumerimInternRowDeleted != null)) {
                    this.NumerimInternRowDeleted(this, new NumerimInternRowChangeEvent(((NumerimInternRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NumerimInternRowDeleting != null)) {
                    this.NumerimInternRowDeleting(this, new NumerimInternRowChangeEvent(((NumerimInternRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNumerimInternRow(NumerimInternRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NumerimInternDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PorosiaArtDataTable : global::System.Data.TypedTableBase<PorosiaArtRow> {
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnSasiaPorositur;
            
            private global::System.Data.DataColumn columnCmimiAktual;
            
            private global::System.Data.DataColumn columnRabatet;
            
            private global::System.Data.DataColumn columnIDPorosia;
            
            private global::System.Data.DataColumn columnSasiLiferuar;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnGratis;
            
            private global::System.Data.DataColumn columnSasiaPako;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnNrRendor;
            
            private global::System.Data.DataColumn columnShumaTotale;
            
            private global::System.Data.DataColumn columnIDArsyeja;
            
            private global::System.Data.DataColumn columnCmimiPaTVSH;
            
            private global::System.Data.DataColumn columnBUM;
            
            private global::System.Data.DataColumn columnSeri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtDataTable(bool initExpressions) {
                this.TableName = "PorosiaArt";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PorosiaArtDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaPorositurColumn {
                get {
                    return this.columnSasiaPorositur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiAktualColumn {
                get {
                    return this.columnCmimiAktual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RabatetColumn {
                get {
                    return this.columnRabatet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPorosiaColumn {
                get {
                    return this.columnIDPorosia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiLiferuarColumn {
                get {
                    return this.columnSasiLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GratisColumn {
                get {
                    return this.columnGratis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaPakoColumn {
                get {
                    return this.columnSasiaPako;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrRendorColumn {
                get {
                    return this.columnNrRendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShumaTotaleColumn {
                get {
                    return this.columnShumaTotale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArsyejaColumn {
                get {
                    return this.columnIDArsyeja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiPaTVSHColumn {
                get {
                    return this.columnCmimiPaTVSH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUMColumn {
                get {
                    return this.columnBUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriColumn {
                get {
                    return this.columnSeri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtRow this[int index] {
                get {
                    return ((PorosiaArtRow)(this.Rows[index]));
                }
            }
            
            public event PorosiaArtRowChangeEventHandler PorosiaArtRowChanging;
            
            public event PorosiaArtRowChangeEventHandler PorosiaArtRowChanged;
            
            public event PorosiaArtRowChangeEventHandler PorosiaArtRowDeleting;
            
            public event PorosiaArtRowChangeEventHandler PorosiaArtRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPorosiaArtRow(PorosiaArtRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtRow AddPorosiaArtRow(
                        string IDArtikulli, 
                        double SasiaPorositur, 
                        float CmimiAktual, 
                        float Rabatet, 
                        System.Guid IDPorosia, 
                        double SasiLiferuar, 
                        string Emri, 
                        double Gratis, 
                        double SasiaPako, 
                        string DeviceID, 
                        int SyncStatus, 
                        decimal ShumaTotale, 
                        int IDArsyeja, 
                        float CmimiPaTVSH, 
                        string BUM, 
                        string Seri) {
                PorosiaArtRow rowPorosiaArtRow = ((PorosiaArtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDArtikulli,
                        SasiaPorositur,
                        CmimiAktual,
                        Rabatet,
                        IDPorosia,
                        SasiLiferuar,
                        Emri,
                        Gratis,
                        SasiaPako,
                        DeviceID,
                        SyncStatus,
                        null,
                        ShumaTotale,
                        IDArsyeja,
                        CmimiPaTVSH,
                        BUM,
                        Seri};
                rowPorosiaArtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPorosiaArtRow);
                return rowPorosiaArtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtRow AddPorosiaArtRow(string IDArtikulli, double SasiaPorositur, float CmimiAktual, float Rabatet, System.Guid IDPorosia, double SasiLiferuar, string Emri, double Gratis, double SasiaPako, string DeviceID, int SyncStatus, int IDArsyeja, float CmimiPaTVSH, string BUM, string Seri) {
                PorosiaArtRow rowPorosiaArtRow = ((PorosiaArtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDArtikulli,
                        SasiaPorositur,
                        CmimiAktual,
                        Rabatet,
                        IDPorosia,
                        SasiLiferuar,
                        Emri,
                        Gratis,
                        SasiaPako,
                        DeviceID,
                        SyncStatus,
                        null,
                        null,
                        IDArsyeja,
                        CmimiPaTVSH,
                        BUM,
                        Seri};
                rowPorosiaArtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPorosiaArtRow);
                return rowPorosiaArtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PorosiaArtDataTable cln = ((PorosiaArtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PorosiaArtDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnSasiaPorositur = base.Columns["SasiaPorositur"];
                this.columnCmimiAktual = base.Columns["CmimiAktual"];
                this.columnRabatet = base.Columns["Rabatet"];
                this.columnIDPorosia = base.Columns["IDPorosia"];
                this.columnSasiLiferuar = base.Columns["SasiLiferuar"];
                this.columnEmri = base.Columns["Emri"];
                this.columnGratis = base.Columns["Gratis"];
                this.columnSasiaPako = base.Columns["SasiaPako"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnNrRendor = base.Columns["NrRendor"];
                this.columnShumaTotale = base.Columns["ShumaTotale"];
                this.columnIDArsyeja = base.Columns["IDArsyeja"];
                this.columnCmimiPaTVSH = base.Columns["CmimiPaTVSH"];
                this.columnBUM = base.Columns["BUM"];
                this.columnSeri = base.Columns["Seri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnSasiaPorositur = new global::System.Data.DataColumn("SasiaPorositur", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaPorositur);
                this.columnCmimiAktual = new global::System.Data.DataColumn("CmimiAktual", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiAktual);
                this.columnRabatet = new global::System.Data.DataColumn("Rabatet", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRabatet);
                this.columnIDPorosia = new global::System.Data.DataColumn("IDPorosia", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPorosia);
                this.columnSasiLiferuar = new global::System.Data.DataColumn("SasiLiferuar", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiLiferuar);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnGratis = new global::System.Data.DataColumn("Gratis", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGratis);
                this.columnSasiaPako = new global::System.Data.DataColumn("SasiaPako", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaPako);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnNrRendor = new global::System.Data.DataColumn("NrRendor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrRendor);
                this.columnShumaTotale = new global::System.Data.DataColumn("ShumaTotale", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShumaTotale);
                this.columnIDArsyeja = new global::System.Data.DataColumn("IDArsyeja", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArsyeja);
                this.columnCmimiPaTVSH = new global::System.Data.DataColumn("CmimiPaTVSH", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiPaTVSH);
                this.columnBUM = new global::System.Data.DataColumn("BUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUM);
                this.columnSeri = new global::System.Data.DataColumn("Seri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeri);
                this.columnIDArtikulli.AllowDBNull = false;
                this.columnIDArtikulli.MaxLength = 20;
                this.columnIDPorosia.AllowDBNull = false;
                this.columnEmri.MaxLength = 40;
                this.columnDeviceID.MaxLength = 10;
                this.columnSyncStatus.AllowDBNull = false;
                this.columnSyncStatus.DefaultValue = ((int)(0));
                this.columnNrRendor.AutoIncrement = true;
                this.columnNrRendor.AutoIncrementSeed = 1;
                this.columnShumaTotale.ReadOnly = true;
                this.columnBUM.MaxLength = 10;
                this.columnSeri.AllowDBNull = false;
                this.columnSeri.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtRow NewPorosiaArtRow() {
                return ((PorosiaArtRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PorosiaArtRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PorosiaArtRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ShumaTotaleColumn.Expression = "SasiaPorositur*CmimiAktual-((SasiaPorositur*CmimiAktual)*Rabatet/100)";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PorosiaArtRowChanged != null)) {
                    this.PorosiaArtRowChanged(this, new PorosiaArtRowChangeEvent(((PorosiaArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PorosiaArtRowChanging != null)) {
                    this.PorosiaArtRowChanging(this, new PorosiaArtRowChangeEvent(((PorosiaArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PorosiaArtRowDeleted != null)) {
                    this.PorosiaArtRowDeleted(this, new PorosiaArtRowChangeEvent(((PorosiaArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PorosiaArtRowDeleting != null)) {
                    this.PorosiaArtRowDeleting(this, new PorosiaArtRowChangeEvent(((PorosiaArtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePorosiaArtRow(PorosiaArtRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PorosiaArtDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PorositeDataTable : global::System.Data.TypedTableBase<PorositeRow> {
            
            private global::System.Data.DataColumn columnIDVizita;
            
            private global::System.Data.DataColumn columnTitulliPorosise;
            
            private global::System.Data.DataColumn columnDataPerLiferim;
            
            private global::System.Data.DataColumn columnIDPorosia;
            
            private global::System.Data.DataColumn columnDataPorosise;
            
            private global::System.Data.DataColumn columnOraPorosise;
            
            private global::System.Data.DataColumn columnStatusiPorosise;
            
            private global::System.Data.DataColumn columnNrPorosise;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeDataTable() {
                this.TableName = "Porosite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PorositeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVizitaColumn {
                get {
                    return this.columnIDVizita;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitulliPorosiseColumn {
                get {
                    return this.columnTitulliPorosise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPerLiferimColumn {
                get {
                    return this.columnDataPerLiferim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPorosiaColumn {
                get {
                    return this.columnIDPorosia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPorosiseColumn {
                get {
                    return this.columnDataPorosise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OraPorosiseColumn {
                get {
                    return this.columnOraPorosise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusiPorosiseColumn {
                get {
                    return this.columnStatusiPorosise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrPorosiseColumn {
                get {
                    return this.columnNrPorosise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeRow this[int index] {
                get {
                    return ((PorositeRow)(this.Rows[index]));
                }
            }
            
            public event PorositeRowChangeEventHandler PorositeRowChanging;
            
            public event PorositeRowChangeEventHandler PorositeRowChanged;
            
            public event PorositeRowChangeEventHandler PorositeRowDeleting;
            
            public event PorositeRowChangeEventHandler PorositeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPorositeRow(PorositeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeRow AddPorositeRow(System.Guid IDVizita, string TitulliPorosise, System.DateTime DataPerLiferim, System.Guid IDPorosia, System.DateTime DataPorosise, System.DateTime OraPorosise, byte StatusiPorosise, string NrPorosise, string DeviceID, int SyncStatus) {
                PorositeRow rowPorositeRow = ((PorositeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDVizita,
                        TitulliPorosise,
                        DataPerLiferim,
                        IDPorosia,
                        DataPorosise,
                        OraPorosise,
                        StatusiPorosise,
                        NrPorosise,
                        DeviceID,
                        SyncStatus};
                rowPorositeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPorositeRow);
                return rowPorositeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeRow FindByIDPorosia(System.Guid IDPorosia) {
                return ((PorositeRow)(this.Rows.Find(new object[] {
                            IDPorosia})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PorositeDataTable cln = ((PorositeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PorositeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDVizita = base.Columns["IDVizita"];
                this.columnTitulliPorosise = base.Columns["TitulliPorosise"];
                this.columnDataPerLiferim = base.Columns["DataPerLiferim"];
                this.columnIDPorosia = base.Columns["IDPorosia"];
                this.columnDataPorosise = base.Columns["DataPorosise"];
                this.columnOraPorosise = base.Columns["OraPorosise"];
                this.columnStatusiPorosise = base.Columns["StatusiPorosise"];
                this.columnNrPorosise = base.Columns["NrPorosise"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDVizita = new global::System.Data.DataColumn("IDVizita", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVizita);
                this.columnTitulliPorosise = new global::System.Data.DataColumn("TitulliPorosise", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitulliPorosise);
                this.columnDataPerLiferim = new global::System.Data.DataColumn("DataPerLiferim", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPerLiferim);
                this.columnIDPorosia = new global::System.Data.DataColumn("IDPorosia", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPorosia);
                this.columnDataPorosise = new global::System.Data.DataColumn("DataPorosise", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPorosise);
                this.columnOraPorosise = new global::System.Data.DataColumn("OraPorosise", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOraPorosise);
                this.columnStatusiPorosise = new global::System.Data.DataColumn("StatusiPorosise", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusiPorosise);
                this.columnNrPorosise = new global::System.Data.DataColumn("NrPorosise", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrPorosise);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDPorosia}, true));
                this.columnTitulliPorosise.MaxLength = 25;
                this.columnIDPorosia.AllowDBNull = false;
                this.columnIDPorosia.Unique = true;
                this.columnNrPorosise.MaxLength = 25;
                this.columnDeviceID.MaxLength = 10;
                this.columnSyncStatus.AllowDBNull = false;
                this.columnSyncStatus.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeRow NewPorositeRow() {
                return ((PorositeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PorositeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PorositeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PorositeRowChanged != null)) {
                    this.PorositeRowChanged(this, new PorositeRowChangeEvent(((PorositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PorositeRowChanging != null)) {
                    this.PorositeRowChanging(this, new PorositeRowChangeEvent(((PorositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PorositeRowDeleted != null)) {
                    this.PorositeRowDeleted(this, new PorositeRowChangeEvent(((PorositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PorositeRowDeleting != null)) {
                    this.PorositeRowDeleting(this, new PorositeRowChangeEvent(((PorositeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePorositeRow(PorositeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PorositeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PriceGroupDataTable : global::System.Data.TypedTableBase<PriceGroupRow> {
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnPriceIncludesVAT;
            
            private global::System.Data.DataColumn columnAllowInvoiceDisc_;
            
            private global::System.Data.DataColumn _columnVATBus_PostingGr__Price_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAllow_Line_Disc_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupDataTable() {
                this.TableName = "PriceGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PriceGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceIncludesVATColumn {
                get {
                    return this.columnPriceIncludesVAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowInvoiceDisc_Column {
                get {
                    return this.columnAllowInvoiceDisc_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _VATBus_PostingGr__Price_Column {
                get {
                    return this._columnVATBus_PostingGr__Price_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Allow_Line_Disc_Column {
                get {
                    return this.columnAllow_Line_Disc_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupRow this[int index] {
                get {
                    return ((PriceGroupRow)(this.Rows[index]));
                }
            }
            
            public event PriceGroupRowChangeEventHandler PriceGroupRowChanging;
            
            public event PriceGroupRowChangeEventHandler PriceGroupRowChanged;
            
            public event PriceGroupRowChangeEventHandler PriceGroupRowDeleting;
            
            public event PriceGroupRowChangeEventHandler PriceGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPriceGroupRow(PriceGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupRow AddPriceGroupRow(string Code, byte PriceIncludesVAT, byte AllowInvoiceDisc_, string _VATBus_PostingGr__Price_, string Description, byte Allow_Line_Disc_) {
                PriceGroupRow rowPriceGroupRow = ((PriceGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Code,
                        PriceIncludesVAT,
                        AllowInvoiceDisc_,
                        _VATBus_PostingGr__Price_,
                        Description,
                        Allow_Line_Disc_};
                rowPriceGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPriceGroupRow);
                return rowPriceGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupRow FindByCode(string Code) {
                return ((PriceGroupRow)(this.Rows.Find(new object[] {
                            Code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PriceGroupDataTable cln = ((PriceGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PriceGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCode = base.Columns["Code"];
                this.columnPriceIncludesVAT = base.Columns["PriceIncludesVAT"];
                this.columnAllowInvoiceDisc_ = base.Columns["AllowInvoiceDisc_"];
                this._columnVATBus_PostingGr__Price_ = base.Columns["VATBus_PostingGr_(Price)"];
                this.columnDescription = base.Columns["Description"];
                this.columnAllow_Line_Disc_ = base.Columns["Allow Line Disc_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnPriceIncludesVAT = new global::System.Data.DataColumn("PriceIncludesVAT", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceIncludesVAT);
                this.columnAllowInvoiceDisc_ = new global::System.Data.DataColumn("AllowInvoiceDisc_", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowInvoiceDisc_);
                this._columnVATBus_PostingGr__Price_ = new global::System.Data.DataColumn("VATBus_PostingGr_(Price)", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnVATBus_PostingGr__Price_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVATBus_PostingGr__Price_");
                this._columnVATBus_PostingGr__Price_.ExtendedProperties.Add("Generator_UserColumnName", "VATBus_PostingGr_(Price)");
                base.Columns.Add(this._columnVATBus_PostingGr__Price_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAllow_Line_Disc_ = new global::System.Data.DataColumn("Allow Line Disc_", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllow_Line_Disc_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCode}, true));
                this.columnCode.AllowDBNull = false;
                this.columnCode.Unique = true;
                this.columnCode.MaxLength = 10;
                this.columnPriceIncludesVAT.AllowDBNull = false;
                this.columnAllowInvoiceDisc_.AllowDBNull = false;
                this._columnVATBus_PostingGr__Price_.AllowDBNull = false;
                this._columnVATBus_PostingGr__Price_.MaxLength = 10;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 30;
                this.columnAllow_Line_Disc_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupRow NewPriceGroupRow() {
                return ((PriceGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PriceGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PriceGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PriceGroupRowChanged != null)) {
                    this.PriceGroupRowChanged(this, new PriceGroupRowChangeEvent(((PriceGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PriceGroupRowChanging != null)) {
                    this.PriceGroupRowChanging(this, new PriceGroupRowChangeEvent(((PriceGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PriceGroupRowDeleted != null)) {
                    this.PriceGroupRowDeleted(this, new PriceGroupRowChangeEvent(((PriceGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PriceGroupRowDeleting != null)) {
                    this.PriceGroupRowDeleting(this, new PriceGroupRowChangeEvent(((PriceGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePriceGroupRow(PriceGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PriceGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RabatetDataTable : global::System.Data.TypedTableBase<RabatetRow> {
            
            private global::System.Data.DataColumn columnIDRabat;
            
            private global::System.Data.DataColumn columnGrRabatet;
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnRabatet;
            
            private global::System.Data.DataColumn columnCopGratis;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetDataTable() {
                this.TableName = "Rabatet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RabatetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDRabatColumn {
                get {
                    return this.columnIDRabat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrRabatetColumn {
                get {
                    return this.columnGrRabatet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RabatetColumn {
                get {
                    return this.columnRabatet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CopGratisColumn {
                get {
                    return this.columnCopGratis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetRow this[int index] {
                get {
                    return ((RabatetRow)(this.Rows[index]));
                }
            }
            
            public event RabatetRowChangeEventHandler RabatetRowChanging;
            
            public event RabatetRowChangeEventHandler RabatetRowChanged;
            
            public event RabatetRowChangeEventHandler RabatetRowDeleting;
            
            public event RabatetRowChangeEventHandler RabatetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRabatetRow(RabatetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetRow AddRabatetRow(string GrRabatet, string IDArtikulli, float Rabatet, int CopGratis) {
                RabatetRow rowRabatetRow = ((RabatetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        GrRabatet,
                        IDArtikulli,
                        Rabatet,
                        CopGratis};
                rowRabatetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRabatetRow);
                return rowRabatetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetRow FindByIDRabat(int IDRabat) {
                return ((RabatetRow)(this.Rows.Find(new object[] {
                            IDRabat})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RabatetDataTable cln = ((RabatetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RabatetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDRabat = base.Columns["IDRabat"];
                this.columnGrRabatet = base.Columns["GrRabatet"];
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnRabatet = base.Columns["Rabatet"];
                this.columnCopGratis = base.Columns["CopGratis"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDRabat = new global::System.Data.DataColumn("IDRabat", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDRabat);
                this.columnGrRabatet = new global::System.Data.DataColumn("GrRabatet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrRabatet);
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnRabatet = new global::System.Data.DataColumn("Rabatet", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRabatet);
                this.columnCopGratis = new global::System.Data.DataColumn("CopGratis", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopGratis);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDRabat}, true));
                this.columnIDRabat.AutoIncrement = true;
                this.columnIDRabat.AutoIncrementSeed = -1;
                this.columnIDRabat.AutoIncrementStep = -1;
                this.columnIDRabat.AllowDBNull = false;
                this.columnIDRabat.ReadOnly = true;
                this.columnIDRabat.Unique = true;
                this.columnGrRabatet.MaxLength = 20;
                this.columnIDArtikulli.AllowDBNull = false;
                this.columnIDArtikulli.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetRow NewRabatetRow() {
                return ((RabatetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RabatetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RabatetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RabatetRowChanged != null)) {
                    this.RabatetRowChanged(this, new RabatetRowChangeEvent(((RabatetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RabatetRowChanging != null)) {
                    this.RabatetRowChanging(this, new RabatetRowChangeEvent(((RabatetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RabatetRowDeleted != null)) {
                    this.RabatetRowDeleted(this, new RabatetRowChangeEvent(((RabatetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RabatetRowDeleting != null)) {
                    this.RabatetRowDeleting(this, new RabatetRowChangeEvent(((RabatetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRabatetRow(RabatetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RabatetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesPriceDataTable : global::System.Data.TypedTableBase<SalesPriceRow> {
            
            private global::System.Data.DataColumn columnItemNo_;
            
            private global::System.Data.DataColumn columnSalesType;
            
            private global::System.Data.DataColumn columnSalesCode;
            
            private global::System.Data.DataColumn columnStartingDate;
            
            private global::System.Data.DataColumn columnCurrencyCode;
            
            private global::System.Data.DataColumn columnVariantCode;
            
            private global::System.Data.DataColumn columnUnitofMeasureCode;
            
            private global::System.Data.DataColumn columnMinimumQuantity;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnPriceIncludesVAT;
            
            private global::System.Data.DataColumn columnAllowInvoiceDisc_;
            
            private global::System.Data.DataColumn _columnVATBus_PostingGr__Price_;
            
            private global::System.Data.DataColumn columnEndingDate;
            
            private global::System.Data.DataColumn columnAllowLineDisc_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceDataTable() {
                this.TableName = "SalesPrice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesPriceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNo_Column {
                get {
                    return this.columnItemNo_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesTypeColumn {
                get {
                    return this.columnSalesType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesCodeColumn {
                get {
                    return this.columnSalesCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartingDateColumn {
                get {
                    return this.columnStartingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyCodeColumn {
                get {
                    return this.columnCurrencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VariantCodeColumn {
                get {
                    return this.columnVariantCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitofMeasureCodeColumn {
                get {
                    return this.columnUnitofMeasureCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumQuantityColumn {
                get {
                    return this.columnMinimumQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceIncludesVATColumn {
                get {
                    return this.columnPriceIncludesVAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowInvoiceDisc_Column {
                get {
                    return this.columnAllowInvoiceDisc_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _VATBus_PostingGr__Price_Column {
                get {
                    return this._columnVATBus_PostingGr__Price_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndingDateColumn {
                get {
                    return this.columnEndingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowLineDisc_Column {
                get {
                    return this.columnAllowLineDisc_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceRow this[int index] {
                get {
                    return ((SalesPriceRow)(this.Rows[index]));
                }
            }
            
            public event SalesPriceRowChangeEventHandler SalesPriceRowChanging;
            
            public event SalesPriceRowChangeEventHandler SalesPriceRowChanged;
            
            public event SalesPriceRowChangeEventHandler SalesPriceRowDeleting;
            
            public event SalesPriceRowChangeEventHandler SalesPriceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesPriceRow(SalesPriceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceRow AddSalesPriceRow(string ItemNo_, int SalesType, string SalesCode, System.DateTime StartingDate, string CurrencyCode, string VariantCode, string UnitofMeasureCode, double MinimumQuantity, double UnitPrice, byte PriceIncludesVAT, byte AllowInvoiceDisc_, string _VATBus_PostingGr__Price_, System.DateTime EndingDate, byte AllowLineDisc_) {
                SalesPriceRow rowSalesPriceRow = ((SalesPriceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemNo_,
                        SalesType,
                        SalesCode,
                        StartingDate,
                        CurrencyCode,
                        VariantCode,
                        UnitofMeasureCode,
                        MinimumQuantity,
                        UnitPrice,
                        PriceIncludesVAT,
                        AllowInvoiceDisc_,
                        _VATBus_PostingGr__Price_,
                        EndingDate,
                        AllowLineDisc_};
                rowSalesPriceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesPriceRow);
                return rowSalesPriceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceRow FindByItemNo_(string ItemNo_) {
                return ((SalesPriceRow)(this.Rows.Find(new object[] {
                            ItemNo_})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalesPriceDataTable cln = ((SalesPriceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesPriceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemNo_ = base.Columns["ItemNo_"];
                this.columnSalesType = base.Columns["SalesType"];
                this.columnSalesCode = base.Columns["SalesCode"];
                this.columnStartingDate = base.Columns["StartingDate"];
                this.columnCurrencyCode = base.Columns["CurrencyCode"];
                this.columnVariantCode = base.Columns["VariantCode"];
                this.columnUnitofMeasureCode = base.Columns["UnitofMeasureCode"];
                this.columnMinimumQuantity = base.Columns["MinimumQuantity"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnPriceIncludesVAT = base.Columns["PriceIncludesVAT"];
                this.columnAllowInvoiceDisc_ = base.Columns["AllowInvoiceDisc_"];
                this._columnVATBus_PostingGr__Price_ = base.Columns["VATBus_PostingGr_(Price)"];
                this.columnEndingDate = base.Columns["EndingDate"];
                this.columnAllowLineDisc_ = base.Columns["AllowLineDisc_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemNo_ = new global::System.Data.DataColumn("ItemNo_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemNo_);
                this.columnSalesType = new global::System.Data.DataColumn("SalesType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesType);
                this.columnSalesCode = new global::System.Data.DataColumn("SalesCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesCode);
                this.columnStartingDate = new global::System.Data.DataColumn("StartingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartingDate);
                this.columnCurrencyCode = new global::System.Data.DataColumn("CurrencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCode);
                this.columnVariantCode = new global::System.Data.DataColumn("VariantCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVariantCode);
                this.columnUnitofMeasureCode = new global::System.Data.DataColumn("UnitofMeasureCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitofMeasureCode);
                this.columnMinimumQuantity = new global::System.Data.DataColumn("MinimumQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumQuantity);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnPriceIncludesVAT = new global::System.Data.DataColumn("PriceIncludesVAT", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceIncludesVAT);
                this.columnAllowInvoiceDisc_ = new global::System.Data.DataColumn("AllowInvoiceDisc_", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowInvoiceDisc_);
                this._columnVATBus_PostingGr__Price_ = new global::System.Data.DataColumn("VATBus_PostingGr_(Price)", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnVATBus_PostingGr__Price_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnVATBus_PostingGr__Price_");
                this._columnVATBus_PostingGr__Price_.ExtendedProperties.Add("Generator_UserColumnName", "VATBus_PostingGr_(Price)");
                base.Columns.Add(this._columnVATBus_PostingGr__Price_);
                this.columnEndingDate = new global::System.Data.DataColumn("EndingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndingDate);
                this.columnAllowLineDisc_ = new global::System.Data.DataColumn("AllowLineDisc_", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowLineDisc_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnItemNo_}, true));
                this.columnItemNo_.AllowDBNull = false;
                this.columnItemNo_.Unique = true;
                this.columnItemNo_.MaxLength = 20;
                this.columnSalesType.AllowDBNull = false;
                this.columnSalesCode.AllowDBNull = false;
                this.columnSalesCode.MaxLength = 20;
                this.columnStartingDate.AllowDBNull = false;
                this.columnCurrencyCode.AllowDBNull = false;
                this.columnCurrencyCode.MaxLength = 10;
                this.columnVariantCode.AllowDBNull = false;
                this.columnVariantCode.MaxLength = 10;
                this.columnUnitofMeasureCode.AllowDBNull = false;
                this.columnUnitofMeasureCode.MaxLength = 10;
                this.columnMinimumQuantity.AllowDBNull = false;
                this.columnUnitPrice.AllowDBNull = false;
                this.columnPriceIncludesVAT.AllowDBNull = false;
                this.columnAllowInvoiceDisc_.AllowDBNull = false;
                this._columnVATBus_PostingGr__Price_.AllowDBNull = false;
                this._columnVATBus_PostingGr__Price_.MaxLength = 10;
                this.columnEndingDate.AllowDBNull = false;
                this.columnAllowLineDisc_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceRow NewSalesPriceRow() {
                return ((SalesPriceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesPriceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalesPriceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesPriceRowChanged != null)) {
                    this.SalesPriceRowChanged(this, new SalesPriceRowChangeEvent(((SalesPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesPriceRowChanging != null)) {
                    this.SalesPriceRowChanging(this, new SalesPriceRowChangeEvent(((SalesPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesPriceRowDeleted != null)) {
                    this.SalesPriceRowDeleted(this, new SalesPriceRowChangeEvent(((SalesPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesPriceRowDeleting != null)) {
                    this.SalesPriceRowDeleting(this, new SalesPriceRowChangeEvent(((SalesPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesPriceRow(SalesPriceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesPriceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatusiVizitesDataTable : global::System.Data.TypedTableBase<StatusiVizitesRow> {
            
            private global::System.Data.DataColumn columnIDStatusiVizites;
            
            private global::System.Data.DataColumn columnGjendja;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesDataTable() {
                this.TableName = "StatusiVizites";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatusiVizitesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDStatusiVizitesColumn {
                get {
                    return this.columnIDStatusiVizites;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GjendjaColumn {
                get {
                    return this.columnGjendja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesRow this[int index] {
                get {
                    return ((StatusiVizitesRow)(this.Rows[index]));
                }
            }
            
            public event StatusiVizitesRowChangeEventHandler StatusiVizitesRowChanging;
            
            public event StatusiVizitesRowChangeEventHandler StatusiVizitesRowChanged;
            
            public event StatusiVizitesRowChangeEventHandler StatusiVizitesRowDeleting;
            
            public event StatusiVizitesRowChangeEventHandler StatusiVizitesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStatusiVizitesRow(StatusiVizitesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesRow AddStatusiVizitesRow(string IDStatusiVizites, string Gjendja) {
                StatusiVizitesRow rowStatusiVizitesRow = ((StatusiVizitesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDStatusiVizites,
                        Gjendja};
                rowStatusiVizitesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStatusiVizitesRow);
                return rowStatusiVizitesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesRow FindByIDStatusiVizites(string IDStatusiVizites) {
                return ((StatusiVizitesRow)(this.Rows.Find(new object[] {
                            IDStatusiVizites})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StatusiVizitesDataTable cln = ((StatusiVizitesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StatusiVizitesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDStatusiVizites = base.Columns["IDStatusiVizites"];
                this.columnGjendja = base.Columns["Gjendja"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDStatusiVizites = new global::System.Data.DataColumn("IDStatusiVizites", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDStatusiVizites);
                this.columnGjendja = new global::System.Data.DataColumn("Gjendja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGjendja);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDStatusiVizites}, true));
                this.columnIDStatusiVizites.AllowDBNull = false;
                this.columnIDStatusiVizites.Unique = true;
                this.columnIDStatusiVizites.MaxLength = 20;
                this.columnGjendja.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesRow NewStatusiVizitesRow() {
                return ((StatusiVizitesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StatusiVizitesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StatusiVizitesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StatusiVizitesRowChanged != null)) {
                    this.StatusiVizitesRowChanged(this, new StatusiVizitesRowChangeEvent(((StatusiVizitesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StatusiVizitesRowChanging != null)) {
                    this.StatusiVizitesRowChanging(this, new StatusiVizitesRowChangeEvent(((StatusiVizitesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StatusiVizitesRowDeleted != null)) {
                    this.StatusiVizitesRowDeleted(this, new StatusiVizitesRowChangeEvent(((StatusiVizitesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StatusiVizitesRowDeleting != null)) {
                    this.StatusiVizitesRowDeleting(this, new StatusiVizitesRowChangeEvent(((StatusiVizitesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStatusiVizitesRow(StatusiVizitesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatusiVizitesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoqetDataTable : global::System.Data.TypedTableBase<StoqetRow> {
            
            private global::System.Data.DataColumn columnShifra;
            
            private global::System.Data.DataColumn columnDepo;
            
            private global::System.Data.DataColumn columnNjesiaMatse;
            
            private global::System.Data.DataColumn columnPaketimi;
            
            private global::System.Data.DataColumn columnSasia;
            
            private global::System.Data.DataColumn columnPaketa;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnSeri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoqetDataTable() {
                this.TableName = "Stoqet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoqetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShifraColumn {
                get {
                    return this.columnShifra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepoColumn {
                get {
                    return this.columnDepo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NjesiaMatseColumn {
                get {
                    return this.columnNjesiaMatse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaketimiColumn {
                get {
                    return this.columnPaketimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaColumn {
                get {
                    return this.columnSasia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaketaColumn {
                get {
                    return this.columnPaketa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriColumn {
                get {
                    return this.columnSeri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoqetRow this[int index] {
                get {
                    return ((StoqetRow)(this.Rows[index]));
                }
            }
            
            public event StoqetRowChangeEventHandler StoqetRowChanging;
            
            public event StoqetRowChangeEventHandler StoqetRowChanged;
            
            public event StoqetRowChangeEventHandler StoqetRowDeleting;
            
            public event StoqetRowChangeEventHandler StoqetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoqetRow(StoqetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoqetRow AddStoqetRow(string Shifra, string Depo, string NjesiaMatse, double Paketimi, double Sasia, double Paketa, int SyncStatus, string Seri) {
                StoqetRow rowStoqetRow = ((StoqetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Shifra,
                        Depo,
                        NjesiaMatse,
                        Paketimi,
                        Sasia,
                        Paketa,
                        SyncStatus,
                        Seri};
                rowStoqetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoqetRow);
                return rowStoqetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoqetDataTable cln = ((StoqetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoqetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShifra = base.Columns["Shifra"];
                this.columnDepo = base.Columns["Depo"];
                this.columnNjesiaMatse = base.Columns["NjesiaMatse"];
                this.columnPaketimi = base.Columns["Paketimi"];
                this.columnSasia = base.Columns["Sasia"];
                this.columnPaketa = base.Columns["Paketa"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnSeri = base.Columns["Seri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShifra = new global::System.Data.DataColumn("Shifra", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShifra);
                this.columnDepo = new global::System.Data.DataColumn("Depo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepo);
                this.columnNjesiaMatse = new global::System.Data.DataColumn("NjesiaMatse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNjesiaMatse);
                this.columnPaketimi = new global::System.Data.DataColumn("Paketimi", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaketimi);
                this.columnSasia = new global::System.Data.DataColumn("Sasia", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasia);
                this.columnPaketa = new global::System.Data.DataColumn("Paketa", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaketa);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnSeri = new global::System.Data.DataColumn("Seri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeri);
                this.columnShifra.AllowDBNull = false;
                this.columnShifra.MaxLength = 20;
                this.columnDepo.AllowDBNull = false;
                this.columnDepo.MaxLength = 10;
                this.columnNjesiaMatse.MaxLength = 10;
                this.columnSasia.AllowDBNull = false;
                this.columnSeri.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoqetRow NewStoqetRow() {
                return ((StoqetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoqetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoqetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoqetRowChanged != null)) {
                    this.StoqetRowChanged(this, new StoqetRowChangeEvent(((StoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoqetRowChanging != null)) {
                    this.StoqetRowChanging(this, new StoqetRowChangeEvent(((StoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoqetRowDeleted != null)) {
                    this.StoqetRowDeleted(this, new StoqetRowChangeEvent(((StoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoqetRowDeleting != null)) {
                    this.StoqetRowDeleting(this, new StoqetRowChangeEvent(((StoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoqetRow(StoqetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoqetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SyncConfigurationDataTable : global::System.Data.TypedTableBase<SyncConfigurationRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTableName;
            
            private global::System.Data.DataColumn columnSyncDirection;
            
            private global::System.Data.DataColumn columnSyncDay;
            
            private global::System.Data.DataColumn columnSyncOrder;
            
            private global::System.Data.DataColumn columnFilterUp;
            
            private global::System.Data.DataColumn columnFilterDwn;
            
            private global::System.Data.DataColumn columnPK_FieldName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationDataTable() {
                this.TableName = "SyncConfiguration";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SyncConfigurationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncDirectionColumn {
                get {
                    return this.columnSyncDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncDayColumn {
                get {
                    return this.columnSyncDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncOrderColumn {
                get {
                    return this.columnSyncOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterUpColumn {
                get {
                    return this.columnFilterUp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterDwnColumn {
                get {
                    return this.columnFilterDwn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PK_FieldNameColumn {
                get {
                    return this.columnPK_FieldName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationRow this[int index] {
                get {
                    return ((SyncConfigurationRow)(this.Rows[index]));
                }
            }
            
            public event SyncConfigurationRowChangeEventHandler SyncConfigurationRowChanging;
            
            public event SyncConfigurationRowChangeEventHandler SyncConfigurationRowChanged;
            
            public event SyncConfigurationRowChangeEventHandler SyncConfigurationRowDeleting;
            
            public event SyncConfigurationRowChangeEventHandler SyncConfigurationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSyncConfigurationRow(SyncConfigurationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationRow AddSyncConfigurationRow(string TableName, int SyncDirection, int SyncDay, int SyncOrder, string FilterUp, string FilterDwn, string PK_FieldName) {
                SyncConfigurationRow rowSyncConfigurationRow = ((SyncConfigurationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TableName,
                        SyncDirection,
                        SyncDay,
                        SyncOrder,
                        FilterUp,
                        FilterDwn,
                        PK_FieldName};
                rowSyncConfigurationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSyncConfigurationRow);
                return rowSyncConfigurationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationRow FindByID(int ID) {
                return ((SyncConfigurationRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SyncConfigurationDataTable cln = ((SyncConfigurationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SyncConfigurationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTableName = base.Columns["TableName"];
                this.columnSyncDirection = base.Columns["SyncDirection"];
                this.columnSyncDay = base.Columns["SyncDay"];
                this.columnSyncOrder = base.Columns["SyncOrder"];
                this.columnFilterUp = base.Columns["FilterUp"];
                this.columnFilterDwn = base.Columns["FilterDwn"];
                this.columnPK_FieldName = base.Columns["PK_FieldName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnSyncDirection = new global::System.Data.DataColumn("SyncDirection", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncDirection);
                this.columnSyncDay = new global::System.Data.DataColumn("SyncDay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncDay);
                this.columnSyncOrder = new global::System.Data.DataColumn("SyncOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncOrder);
                this.columnFilterUp = new global::System.Data.DataColumn("FilterUp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilterUp);
                this.columnFilterDwn = new global::System.Data.DataColumn("FilterDwn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilterDwn);
                this.columnPK_FieldName = new global::System.Data.DataColumn("PK_FieldName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPK_FieldName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTableName.MaxLength = 50;
                this.columnFilterUp.MaxLength = 255;
                this.columnFilterDwn.MaxLength = 255;
                this.columnPK_FieldName.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationRow NewSyncConfigurationRow() {
                return ((SyncConfigurationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SyncConfigurationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SyncConfigurationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SyncConfigurationRowChanged != null)) {
                    this.SyncConfigurationRowChanged(this, new SyncConfigurationRowChangeEvent(((SyncConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SyncConfigurationRowChanging != null)) {
                    this.SyncConfigurationRowChanging(this, new SyncConfigurationRowChangeEvent(((SyncConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SyncConfigurationRowDeleted != null)) {
                    this.SyncConfigurationRowDeleted(this, new SyncConfigurationRowChangeEvent(((SyncConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SyncConfigurationRowDeleting != null)) {
                    this.SyncConfigurationRowDeleting(this, new SyncConfigurationRowChangeEvent(((SyncConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSyncConfigurationRow(SyncConfigurationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SyncConfigurationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VendetDataTable : global::System.Data.TypedTableBase<VendetRow> {
            
            private global::System.Data.DataColumn columnIDVendi;
            
            private global::System.Data.DataColumn columnNrPostal;
            
            private global::System.Data.DataColumn columnQyteti;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetDataTable() {
                this.TableName = "Vendet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VendetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVendiColumn {
                get {
                    return this.columnIDVendi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrPostalColumn {
                get {
                    return this.columnNrPostal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QytetiColumn {
                get {
                    return this.columnQyteti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetRow this[int index] {
                get {
                    return ((VendetRow)(this.Rows[index]));
                }
            }
            
            public event VendetRowChangeEventHandler VendetRowChanging;
            
            public event VendetRowChangeEventHandler VendetRowChanged;
            
            public event VendetRowChangeEventHandler VendetRowDeleting;
            
            public event VendetRowChangeEventHandler VendetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVendetRow(VendetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetRow AddVendetRow(string NrPostal, string Qyteti) {
                VendetRow rowVendetRow = ((VendetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NrPostal,
                        Qyteti};
                rowVendetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVendetRow);
                return rowVendetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetRow FindByIDVendi(int IDVendi) {
                return ((VendetRow)(this.Rows.Find(new object[] {
                            IDVendi})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VendetDataTable cln = ((VendetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VendetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDVendi = base.Columns["IDVendi"];
                this.columnNrPostal = base.Columns["NrPostal"];
                this.columnQyteti = base.Columns["Qyteti"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDVendi = new global::System.Data.DataColumn("IDVendi", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVendi);
                this.columnNrPostal = new global::System.Data.DataColumn("NrPostal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrPostal);
                this.columnQyteti = new global::System.Data.DataColumn("Qyteti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQyteti);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDVendi}, true));
                this.columnIDVendi.AutoIncrement = true;
                this.columnIDVendi.AutoIncrementSeed = -1;
                this.columnIDVendi.AutoIncrementStep = -1;
                this.columnIDVendi.AllowDBNull = false;
                this.columnIDVendi.ReadOnly = true;
                this.columnIDVendi.Unique = true;
                this.columnNrPostal.MaxLength = 10;
                this.columnQyteti.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetRow NewVendetRow() {
                return ((VendetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VendetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VendetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VendetRowChanged != null)) {
                    this.VendetRowChanged(this, new VendetRowChangeEvent(((VendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VendetRowChanging != null)) {
                    this.VendetRowChanging(this, new VendetRowChangeEvent(((VendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VendetRowDeleted != null)) {
                    this.VendetRowDeleted(this, new VendetRowChangeEvent(((VendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VendetRowDeleting != null)) {
                    this.VendetRowDeleting(this, new VendetRowChangeEvent(((VendetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVendetRow(VendetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VendetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VizitatDataTable : global::System.Data.TypedTableBase<VizitatRow> {
            
            private global::System.Data.DataColumn columnIDVizita;
            
            private global::System.Data.DataColumn columnDataPlanifikimit;
            
            private global::System.Data.DataColumn columnOraPlanifikimit;
            
            private global::System.Data.DataColumn columnDataAritjes;
            
            private global::System.Data.DataColumn columnOraArritjes;
            
            private global::System.Data.DataColumn columnDataRealizimit;
            
            private global::System.Data.DataColumn columnOraRealizimit;
            
            private global::System.Data.DataColumn columnIDAgjenti;
            
            private global::System.Data.DataColumn columnNrRendor;
            
            private global::System.Data.DataColumn columnIDStatusiVizites;
            
            private global::System.Data.DataColumn columnIDKlientDheLokacion;
            
            private global::System.Data.DataColumn columnMenyraVizites;
            
            private global::System.Data.DataColumn columnKomenti;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatDataTable() {
                this.TableName = "Vizitat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VizitatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVizitaColumn {
                get {
                    return this.columnIDVizita;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPlanifikimitColumn {
                get {
                    return this.columnDataPlanifikimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OraPlanifikimitColumn {
                get {
                    return this.columnOraPlanifikimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataAritjesColumn {
                get {
                    return this.columnDataAritjes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OraArritjesColumn {
                get {
                    return this.columnOraArritjes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataRealizimitColumn {
                get {
                    return this.columnDataRealizimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OraRealizimitColumn {
                get {
                    return this.columnOraRealizimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDAgjentiColumn {
                get {
                    return this.columnIDAgjenti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrRendorColumn {
                get {
                    return this.columnNrRendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDStatusiVizitesColumn {
                get {
                    return this.columnIDStatusiVizites;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientDheLokacionColumn {
                get {
                    return this.columnIDKlientDheLokacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenyraVizitesColumn {
                get {
                    return this.columnMenyraVizites;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KomentiColumn {
                get {
                    return this.columnKomenti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRow this[int index] {
                get {
                    return ((VizitatRow)(this.Rows[index]));
                }
            }
            
            public event VizitatRowChangeEventHandler VizitatRowChanging;
            
            public event VizitatRowChangeEventHandler VizitatRowChanged;
            
            public event VizitatRowChangeEventHandler VizitatRowDeleting;
            
            public event VizitatRowChangeEventHandler VizitatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVizitatRow(VizitatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRow AddVizitatRow(System.Guid IDVizita, System.DateTime DataPlanifikimit, System.DateTime OraPlanifikimit, System.DateTime DataAritjes, System.DateTime OraArritjes, System.DateTime DataRealizimit, System.DateTime OraRealizimit, string IDAgjenti, int NrRendor, string IDStatusiVizites, KlientDheLokacionRow parentKlientDheLokacionRowByKlientDheLokacion_Vizitat, int MenyraVizites, string Komenti, string DeviceID, int SyncStatus) {
                VizitatRow rowVizitatRow = ((VizitatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDVizita,
                        DataPlanifikimit,
                        OraPlanifikimit,
                        DataAritjes,
                        OraArritjes,
                        DataRealizimit,
                        OraRealizimit,
                        IDAgjenti,
                        NrRendor,
                        IDStatusiVizites,
                        null,
                        MenyraVizites,
                        Komenti,
                        DeviceID,
                        SyncStatus};
                if ((parentKlientDheLokacionRowByKlientDheLokacion_Vizitat != null)) {
                    columnValuesArray[10] = parentKlientDheLokacionRowByKlientDheLokacion_Vizitat[0];
                }
                rowVizitatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVizitatRow);
                return rowVizitatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRow FindByIDVizita(System.Guid IDVizita) {
                return ((VizitatRow)(this.Rows.Find(new object[] {
                            IDVizita})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VizitatDataTable cln = ((VizitatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VizitatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDVizita = base.Columns["IDVizita"];
                this.columnDataPlanifikimit = base.Columns["DataPlanifikimit"];
                this.columnOraPlanifikimit = base.Columns["OraPlanifikimit"];
                this.columnDataAritjes = base.Columns["DataAritjes"];
                this.columnOraArritjes = base.Columns["OraArritjes"];
                this.columnDataRealizimit = base.Columns["DataRealizimit"];
                this.columnOraRealizimit = base.Columns["OraRealizimit"];
                this.columnIDAgjenti = base.Columns["IDAgjenti"];
                this.columnNrRendor = base.Columns["NrRendor"];
                this.columnIDStatusiVizites = base.Columns["IDStatusiVizites"];
                this.columnIDKlientDheLokacion = base.Columns["IDKlientDheLokacion"];
                this.columnMenyraVizites = base.Columns["MenyraVizites"];
                this.columnKomenti = base.Columns["Komenti"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDVizita = new global::System.Data.DataColumn("IDVizita", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVizita);
                this.columnDataPlanifikimit = new global::System.Data.DataColumn("DataPlanifikimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPlanifikimit);
                this.columnOraPlanifikimit = new global::System.Data.DataColumn("OraPlanifikimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOraPlanifikimit);
                this.columnDataAritjes = new global::System.Data.DataColumn("DataAritjes", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataAritjes);
                this.columnOraArritjes = new global::System.Data.DataColumn("OraArritjes", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOraArritjes);
                this.columnDataRealizimit = new global::System.Data.DataColumn("DataRealizimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataRealizimit);
                this.columnOraRealizimit = new global::System.Data.DataColumn("OraRealizimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOraRealizimit);
                this.columnIDAgjenti = new global::System.Data.DataColumn("IDAgjenti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDAgjenti);
                this.columnNrRendor = new global::System.Data.DataColumn("NrRendor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrRendor);
                this.columnIDStatusiVizites = new global::System.Data.DataColumn("IDStatusiVizites", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDStatusiVizites);
                this.columnIDKlientDheLokacion = new global::System.Data.DataColumn("IDKlientDheLokacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlientDheLokacion);
                this.columnMenyraVizites = new global::System.Data.DataColumn("MenyraVizites", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenyraVizites);
                this.columnKomenti = new global::System.Data.DataColumn("Komenti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKomenti);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDVizita}, true));
                this.columnIDVizita.AllowDBNull = false;
                this.columnIDVizita.Unique = true;
                this.columnDataPlanifikimit.AllowDBNull = false;
                this.columnIDAgjenti.AllowDBNull = false;
                this.columnIDAgjenti.MaxLength = 20;
                this.columnIDStatusiVizites.AllowDBNull = false;
                this.columnIDStatusiVizites.MaxLength = 20;
                this.columnIDKlientDheLokacion.AllowDBNull = false;
                this.columnIDKlientDheLokacion.MaxLength = 20;
                this.columnKomenti.MaxLength = 200;
                this.columnDeviceID.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRow NewVizitatRow() {
                return ((VizitatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VizitatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VizitatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VizitatRowChanged != null)) {
                    this.VizitatRowChanged(this, new VizitatRowChangeEvent(((VizitatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VizitatRowChanging != null)) {
                    this.VizitatRowChanging(this, new VizitatRowChangeEvent(((VizitatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VizitatRowDeleted != null)) {
                    this.VizitatRowDeleted(this, new VizitatRowChangeEvent(((VizitatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VizitatRowDeleting != null)) {
                    this.VizitatRowDeleting(this, new VizitatRowChangeEvent(((VizitatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVizitatRow(VizitatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VizitatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListaLiferimeveDataTable : global::System.Data.TypedTableBase<ListaLiferimeveRow> {
            
            private global::System.Data.DataColumn columnShifra;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnCmimiNjesi;
            
            private global::System.Data.DataColumn columnSasiaPorositur;
            
            private global::System.Data.DataColumn columnIDPorosia;
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnSasiLiferuar;
            
            private global::System.Data.DataColumn columnTitulliLiferimit;
            
            private global::System.Data.DataColumn columnDataLiferimit;
            
            private global::System.Data.DataColumn columnKohaLiferimit;
            
            private global::System.Data.DataColumn columnEmriLokacionit;
            
            private global::System.Data.DataColumn columnLiferuar;
            
            private global::System.Data.DataColumn columnIDLiferimi;
            
            private global::System.Data.DataColumn columnStokuAktual;
            
            private global::System.Data.DataColumn columnDataLiferuar;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaLiferimeveDataTable() {
                this.TableName = "ListaLiferimeve";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaLiferimeveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShifraColumn {
                get {
                    return this.columnShifra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiNjesiColumn {
                get {
                    return this.columnCmimiNjesi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaPorositurColumn {
                get {
                    return this.columnSasiaPorositur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPorosiaColumn {
                get {
                    return this.columnIDPorosia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiLiferuarColumn {
                get {
                    return this.columnSasiLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitulliLiferimitColumn {
                get {
                    return this.columnTitulliLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataLiferimitColumn {
                get {
                    return this.columnDataLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KohaLiferimitColumn {
                get {
                    return this.columnKohaLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriLokacionitColumn {
                get {
                    return this.columnEmriLokacionit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiferuarColumn {
                get {
                    return this.columnLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDLiferimiColumn {
                get {
                    return this.columnIDLiferimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StokuAktualColumn {
                get {
                    return this.columnStokuAktual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataLiferuarColumn {
                get {
                    return this.columnDataLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaLiferimeveRow this[int index] {
                get {
                    return ((ListaLiferimeveRow)(this.Rows[index]));
                }
            }
            
            public event ListaLiferimeveRowChangeEventHandler ListaLiferimeveRowChanging;
            
            public event ListaLiferimeveRowChangeEventHandler ListaLiferimeveRowChanged;
            
            public event ListaLiferimeveRowChangeEventHandler ListaLiferimeveRowDeleting;
            
            public event ListaLiferimeveRowChangeEventHandler ListaLiferimeveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListaLiferimeveRow(ListaLiferimeveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaLiferimeveRow AddListaLiferimeveRow(string Shifra, string Emri, float CmimiNjesi, int SasiaPorositur, System.Guid IDPorosia, string IDArtikulli, int SasiLiferuar, string TitulliLiferimit, System.DateTime DataLiferimit, System.DateTime KohaLiferimit, string EmriLokacionit, byte Liferuar, System.Guid IDLiferimi, int StokuAktual, System.DateTime DataLiferuar) {
                ListaLiferimeveRow rowListaLiferimeveRow = ((ListaLiferimeveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Shifra,
                        Emri,
                        CmimiNjesi,
                        SasiaPorositur,
                        IDPorosia,
                        IDArtikulli,
                        SasiLiferuar,
                        TitulliLiferimit,
                        DataLiferimit,
                        KohaLiferimit,
                        EmriLokacionit,
                        Liferuar,
                        IDLiferimi,
                        StokuAktual,
                        DataLiferuar};
                rowListaLiferimeveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListaLiferimeveRow);
                return rowListaLiferimeveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListaLiferimeveDataTable cln = ((ListaLiferimeveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListaLiferimeveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShifra = base.Columns["Shifra"];
                this.columnEmri = base.Columns["Emri"];
                this.columnCmimiNjesi = base.Columns["CmimiNjesi"];
                this.columnSasiaPorositur = base.Columns["SasiaPorositur"];
                this.columnIDPorosia = base.Columns["IDPorosia"];
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnSasiLiferuar = base.Columns["SasiLiferuar"];
                this.columnTitulliLiferimit = base.Columns["TitulliLiferimit"];
                this.columnDataLiferimit = base.Columns["DataLiferimit"];
                this.columnKohaLiferimit = base.Columns["KohaLiferimit"];
                this.columnEmriLokacionit = base.Columns["EmriLokacionit"];
                this.columnLiferuar = base.Columns["Liferuar"];
                this.columnIDLiferimi = base.Columns["IDLiferimi"];
                this.columnStokuAktual = base.Columns["StokuAktual"];
                this.columnDataLiferuar = base.Columns["DataLiferuar"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShifra = new global::System.Data.DataColumn("Shifra", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShifra);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnCmimiNjesi = new global::System.Data.DataColumn("CmimiNjesi", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiNjesi);
                this.columnSasiaPorositur = new global::System.Data.DataColumn("SasiaPorositur", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaPorositur);
                this.columnIDPorosia = new global::System.Data.DataColumn("IDPorosia", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPorosia);
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnSasiLiferuar = new global::System.Data.DataColumn("SasiLiferuar", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiLiferuar);
                this.columnTitulliLiferimit = new global::System.Data.DataColumn("TitulliLiferimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitulliLiferimit);
                this.columnDataLiferimit = new global::System.Data.DataColumn("DataLiferimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataLiferimit);
                this.columnKohaLiferimit = new global::System.Data.DataColumn("KohaLiferimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKohaLiferimit);
                this.columnEmriLokacionit = new global::System.Data.DataColumn("EmriLokacionit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmriLokacionit);
                this.columnLiferuar = new global::System.Data.DataColumn("Liferuar", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiferuar);
                this.columnIDLiferimi = new global::System.Data.DataColumn("IDLiferimi", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLiferimi);
                this.columnStokuAktual = new global::System.Data.DataColumn("StokuAktual", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStokuAktual);
                this.columnDataLiferuar = new global::System.Data.DataColumn("DataLiferuar", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataLiferuar);
                this.columnShifra.ReadOnly = true;
                this.columnShifra.MaxLength = 20;
                this.columnEmri.ReadOnly = true;
                this.columnEmri.MaxLength = 80;
                this.columnCmimiNjesi.ReadOnly = true;
                this.columnSasiaPorositur.ReadOnly = true;
                this.columnIDPorosia.ReadOnly = true;
                this.columnIDArtikulli.ReadOnly = true;
                this.columnIDArtikulli.MaxLength = 20;
                this.columnSasiLiferuar.ReadOnly = true;
                this.columnTitulliLiferimit.ReadOnly = true;
                this.columnTitulliLiferimit.MaxLength = 25;
                this.columnDataLiferimit.ReadOnly = true;
                this.columnKohaLiferimit.ReadOnly = true;
                this.columnEmriLokacionit.ReadOnly = true;
                this.columnEmriLokacionit.MaxLength = 40;
                this.columnLiferuar.ReadOnly = true;
                this.columnIDLiferimi.ReadOnly = true;
                this.columnStokuAktual.ReadOnly = true;
                this.columnDataLiferuar.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaLiferimeveRow NewListaLiferimeveRow() {
                return ((ListaLiferimeveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListaLiferimeveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListaLiferimeveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListaLiferimeveRowChanged != null)) {
                    this.ListaLiferimeveRowChanged(this, new ListaLiferimeveRowChangeEvent(((ListaLiferimeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListaLiferimeveRowChanging != null)) {
                    this.ListaLiferimeveRowChanging(this, new ListaLiferimeveRowChangeEvent(((ListaLiferimeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListaLiferimeveRowDeleted != null)) {
                    this.ListaLiferimeveRowDeleted(this, new ListaLiferimeveRowChangeEvent(((ListaLiferimeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListaLiferimeveRowDeleting != null)) {
                    this.ListaLiferimeveRowDeleting(this, new ListaLiferimeveRowChangeEvent(((ListaLiferimeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListaLiferimeveRow(ListaLiferimeveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListaLiferimeveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListaVizitaveDataTable : global::System.Data.TypedTableBase<ListaVizitaveRow> {
            
            private global::System.Data.DataColumn columnLokacioni;
            
            private global::System.Data.DataColumn columnQyteti;
            
            private global::System.Data.DataColumn _columnTel_Mobil;
            
            private global::System.Data.DataColumn columnDataPlanifikimit;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnAdresa;
            
            private global::System.Data.DataColumn columnBarkodi;
            
            private global::System.Data.DataColumn columnIDKlientDheLokacion;
            
            private global::System.Data.DataColumn columnKontaktEmriMbiemri;
            
            private global::System.Data.DataColumn columnIDStatusiVizites;
            
            private global::System.Data.DataColumn columnIDVizita;
            
            private global::System.Data.DataColumn columnShkKlienti;
            
            private global::System.Data.DataColumn columnLfrStat;
            
            private global::System.Data.DataColumn columnPrsStat;
            
            private global::System.Data.DataColumn columnIDKlienti;
            
            private global::System.Data.DataColumn columnStatPorosia;
            
            private global::System.Data.DataColumn columnTestStat;
            
            private global::System.Data.DataColumn columnNrRendor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveDataTable(bool initExpressions) {
                this.TableName = "ListaVizitave";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaVizitaveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LokacioniColumn {
                get {
                    return this.columnLokacioni;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QytetiColumn {
                get {
                    return this.columnQyteti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Tel_MobilColumn {
                get {
                    return this._columnTel_Mobil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPlanifikimitColumn {
                get {
                    return this.columnDataPlanifikimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdresaColumn {
                get {
                    return this.columnAdresa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarkodiColumn {
                get {
                    return this.columnBarkodi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientDheLokacionColumn {
                get {
                    return this.columnIDKlientDheLokacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KontaktEmriMbiemriColumn {
                get {
                    return this.columnKontaktEmriMbiemri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDStatusiVizitesColumn {
                get {
                    return this.columnIDStatusiVizites;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVizitaColumn {
                get {
                    return this.columnIDVizita;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShkKlientiColumn {
                get {
                    return this.columnShkKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LfrStatColumn {
                get {
                    return this.columnLfrStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrsStatColumn {
                get {
                    return this.columnPrsStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientiColumn {
                get {
                    return this.columnIDKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatPorosiaColumn {
                get {
                    return this.columnStatPorosia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestStatColumn {
                get {
                    return this.columnTestStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrRendorColumn {
                get {
                    return this.columnNrRendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveRow this[int index] {
                get {
                    return ((ListaVizitaveRow)(this.Rows[index]));
                }
            }
            
            public event ListaVizitaveRowChangeEventHandler ListaVizitaveRowChanging;
            
            public event ListaVizitaveRowChangeEventHandler ListaVizitaveRowChanged;
            
            public event ListaVizitaveRowChangeEventHandler ListaVizitaveRowDeleting;
            
            public event ListaVizitaveRowChangeEventHandler ListaVizitaveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListaVizitaveRow(ListaVizitaveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveRow AddListaVizitaveRow(
                        string Lokacioni, 
                        string Qyteti, 
                        string _Tel_Mobil, 
                        System.DateTime DataPlanifikimit, 
                        string Emri, 
                        string Adresa, 
                        string Barkodi, 
                        string IDKlientDheLokacion, 
                        string KontaktEmriMbiemri, 
                        string IDStatusiVizites, 
                        System.Guid IDVizita, 
                        string ShkKlienti, 
                        string LfrStat, 
                        string PrsStat, 
                        string IDKlienti, 
                        string StatPorosia, 
                        string TestStat, 
                        int NrRendor) {
                ListaVizitaveRow rowListaVizitaveRow = ((ListaVizitaveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Lokacioni,
                        Qyteti,
                        _Tel_Mobil,
                        DataPlanifikimit,
                        Emri,
                        Adresa,
                        Barkodi,
                        IDKlientDheLokacion,
                        KontaktEmriMbiemri,
                        IDStatusiVizites,
                        IDVizita,
                        ShkKlienti,
                        LfrStat,
                        PrsStat,
                        IDKlienti,
                        StatPorosia,
                        TestStat,
                        NrRendor};
                rowListaVizitaveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListaVizitaveRow);
                return rowListaVizitaveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveRow AddListaVizitaveRow(
                        string Lokacioni, 
                        string Qyteti, 
                        string _Tel_Mobil, 
                        System.DateTime DataPlanifikimit, 
                        string Emri, 
                        string Adresa, 
                        string Barkodi, 
                        string IDKlientDheLokacion, 
                        string KontaktEmriMbiemri, 
                        string IDStatusiVizites, 
                        System.Guid IDVizita, 
                        string ShkKlienti, 
                        string LfrStat, 
                        string PrsStat, 
                        string IDKlienti, 
                        int NrRendor) {
                ListaVizitaveRow rowListaVizitaveRow = ((ListaVizitaveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Lokacioni,
                        Qyteti,
                        _Tel_Mobil,
                        DataPlanifikimit,
                        Emri,
                        Adresa,
                        Barkodi,
                        IDKlientDheLokacion,
                        KontaktEmriMbiemri,
                        IDStatusiVizites,
                        IDVizita,
                        ShkKlienti,
                        LfrStat,
                        PrsStat,
                        IDKlienti,
                        null,
                        null,
                        NrRendor};
                rowListaVizitaveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListaVizitaveRow);
                return rowListaVizitaveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListaVizitaveDataTable cln = ((ListaVizitaveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListaVizitaveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLokacioni = base.Columns["Lokacioni"];
                this.columnQyteti = base.Columns["Qyteti"];
                this._columnTel_Mobil = base.Columns["Tel/Mobil"];
                this.columnDataPlanifikimit = base.Columns["DataPlanifikimit"];
                this.columnEmri = base.Columns["Emri"];
                this.columnAdresa = base.Columns["Adresa"];
                this.columnBarkodi = base.Columns["Barkodi"];
                this.columnIDKlientDheLokacion = base.Columns["IDKlientDheLokacion"];
                this.columnKontaktEmriMbiemri = base.Columns["KontaktEmriMbiemri"];
                this.columnIDStatusiVizites = base.Columns["IDStatusiVizites"];
                this.columnIDVizita = base.Columns["IDVizita"];
                this.columnShkKlienti = base.Columns["ShkKlienti"];
                this.columnLfrStat = base.Columns["LfrStat"];
                this.columnPrsStat = base.Columns["PrsStat"];
                this.columnIDKlienti = base.Columns["IDKlienti"];
                this.columnStatPorosia = base.Columns["StatPorosia"];
                this.columnTestStat = base.Columns["TestStat"];
                this.columnNrRendor = base.Columns["NrRendor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLokacioni = new global::System.Data.DataColumn("Lokacioni", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLokacioni);
                this.columnQyteti = new global::System.Data.DataColumn("Qyteti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQyteti);
                this._columnTel_Mobil = new global::System.Data.DataColumn("Tel/Mobil", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnTel_Mobil.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnTel_Mobil");
                this._columnTel_Mobil.ExtendedProperties.Add("Generator_UserColumnName", "Tel/Mobil");
                base.Columns.Add(this._columnTel_Mobil);
                this.columnDataPlanifikimit = new global::System.Data.DataColumn("DataPlanifikimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPlanifikimit);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnAdresa = new global::System.Data.DataColumn("Adresa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdresa);
                this.columnBarkodi = new global::System.Data.DataColumn("Barkodi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarkodi);
                this.columnIDKlientDheLokacion = new global::System.Data.DataColumn("IDKlientDheLokacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlientDheLokacion);
                this.columnKontaktEmriMbiemri = new global::System.Data.DataColumn("KontaktEmriMbiemri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKontaktEmriMbiemri);
                this.columnIDStatusiVizites = new global::System.Data.DataColumn("IDStatusiVizites", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDStatusiVizites);
                this.columnIDVizita = new global::System.Data.DataColumn("IDVizita", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVizita);
                this.columnShkKlienti = new global::System.Data.DataColumn("ShkKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShkKlienti);
                this.columnLfrStat = new global::System.Data.DataColumn("LfrStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLfrStat);
                this.columnPrsStat = new global::System.Data.DataColumn("PrsStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrsStat);
                this.columnIDKlienti = new global::System.Data.DataColumn("IDKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlienti);
                this.columnStatPorosia = new global::System.Data.DataColumn("StatPorosia", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatPorosia);
                this.columnTestStat = new global::System.Data.DataColumn("TestStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStat);
                this.columnNrRendor = new global::System.Data.DataColumn("NrRendor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrRendor);
                this.columnLokacioni.ReadOnly = true;
                this.columnLokacioni.MaxLength = 40;
                this.columnQyteti.ReadOnly = true;
                this.columnQyteti.MaxLength = 30;
                this._columnTel_Mobil.ReadOnly = true;
                this._columnTel_Mobil.MaxLength = 25;
                this.columnDataPlanifikimit.ReadOnly = true;
                this.columnEmri.ReadOnly = true;
                this.columnEmri.MaxLength = 30;
                this.columnAdresa.ReadOnly = true;
                this.columnAdresa.MaxLength = 30;
                this.columnBarkodi.ReadOnly = true;
                this.columnBarkodi.MaxLength = 50;
                this.columnIDKlientDheLokacion.ReadOnly = true;
                this.columnIDKlientDheLokacion.MaxLength = 20;
                this.columnKontaktEmriMbiemri.ReadOnly = true;
                this.columnKontaktEmriMbiemri.MaxLength = 50;
                this.columnIDStatusiVizites.ReadOnly = true;
                this.columnIDStatusiVizites.MaxLength = 20;
                this.columnIDVizita.ReadOnly = true;
                this.columnShkKlienti.ReadOnly = true;
                this.columnShkKlienti.MaxLength = 3;
                this.columnLfrStat.DefaultValue = ((string)("00000000-0000-0000-0000-000000000000"));
                this.columnPrsStat.DefaultValue = ((string)("10000000-0000-0000-0000-000000000000"));
                this.columnIDKlienti.ReadOnly = true;
                this.columnIDKlienti.MaxLength = 20;
                this.columnStatPorosia.ReadOnly = true;
                this.columnStatPorosia.DefaultValue = ((string)("X"));
                this.columnTestStat.ReadOnly = true;
                this.columnTestStat.DefaultValue = ((string)("\"\""));
                this.columnNrRendor.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveRow NewListaVizitaveRow() {
                return ((ListaVizitaveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListaVizitaveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListaVizitaveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.StatPorosiaColumn.Expression = "IDStatusiVizites";
                this.TestStatColumn.Expression = "IIF(IDStatusiVizites=\'6\',\'√\',IIF(IDStatusiVizites=\'5\',\'√\',IIF(IDStatusiVizites=\'4" +
                    "\',\'√\',IIF(IDStatusiVizites=\'3\',\'√\',IIF(IDStatusiVizites=\'2\',\'√\',IIF(IDStatusiViz" +
                    "ites=\'0\',\'X\',\'\'))))))";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListaVizitaveRowChanged != null)) {
                    this.ListaVizitaveRowChanged(this, new ListaVizitaveRowChangeEvent(((ListaVizitaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListaVizitaveRowChanging != null)) {
                    this.ListaVizitaveRowChanging(this, new ListaVizitaveRowChangeEvent(((ListaVizitaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListaVizitaveRowDeleted != null)) {
                    this.ListaVizitaveRowDeleted(this, new ListaVizitaveRowChangeEvent(((ListaVizitaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListaVizitaveRowDeleting != null)) {
                    this.ListaVizitaveRowDeleting(this, new ListaVizitaveRowChangeEvent(((ListaVizitaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListaVizitaveRow(ListaVizitaveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListaVizitaveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListaShitjeveDataTable : global::System.Data.TypedTableBase<ListaShitjeveRow> {
            
            private global::System.Data.DataColumn columnEmriLokacionit;
            
            private global::System.Data.DataColumn columnNrPorosise;
            
            private global::System.Data.DataColumn columnDataPlanifikimit;
            
            private global::System.Data.DataColumn columnIDVizita;
            
            private global::System.Data.DataColumn columnCmimiTotal;
            
            private global::System.Data.DataColumn columnDataLiferimit;
            
            private global::System.Data.DataColumn columnIDLiferimi;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnIDKlientDheLokacion;
            
            private global::System.Data.DataColumn columnShkKlienti;
            
            private global::System.Data.DataColumn columnIDKlienti;
            
            private global::System.Data.DataColumn columnKontaktEmriMbiemri;
            
            private global::System.Data.DataColumn columnShumaPaguar;
            
            private global::System.Data.DataColumn columnNrLiferimit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaShitjeveDataTable() {
                this.TableName = "ListaShitjeve";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaShitjeveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriLokacionitColumn {
                get {
                    return this.columnEmriLokacionit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrPorosiseColumn {
                get {
                    return this.columnNrPorosise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPlanifikimitColumn {
                get {
                    return this.columnDataPlanifikimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVizitaColumn {
                get {
                    return this.columnIDVizita;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiTotalColumn {
                get {
                    return this.columnCmimiTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataLiferimitColumn {
                get {
                    return this.columnDataLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDLiferimiColumn {
                get {
                    return this.columnIDLiferimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientDheLokacionColumn {
                get {
                    return this.columnIDKlientDheLokacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShkKlientiColumn {
                get {
                    return this.columnShkKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientiColumn {
                get {
                    return this.columnIDKlienti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KontaktEmriMbiemriColumn {
                get {
                    return this.columnKontaktEmriMbiemri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShumaPaguarColumn {
                get {
                    return this.columnShumaPaguar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrLiferimitColumn {
                get {
                    return this.columnNrLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaShitjeveRow this[int index] {
                get {
                    return ((ListaShitjeveRow)(this.Rows[index]));
                }
            }
            
            public event ListaShitjeveRowChangeEventHandler ListaShitjeveRowChanging;
            
            public event ListaShitjeveRowChangeEventHandler ListaShitjeveRowChanged;
            
            public event ListaShitjeveRowChangeEventHandler ListaShitjeveRowDeleting;
            
            public event ListaShitjeveRowChangeEventHandler ListaShitjeveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListaShitjeveRow(ListaShitjeveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaShitjeveRow AddListaShitjeveRow(string EmriLokacionit, string NrPorosise, System.DateTime DataPlanifikimit, System.Guid IDVizita, float CmimiTotal, System.DateTime DataLiferimit, System.Guid IDLiferimi, string Emri, string IDKlientDheLokacion, string ShkKlienti, string IDKlienti, string KontaktEmriMbiemri, float ShumaPaguar, string NrLiferimit) {
                ListaShitjeveRow rowListaShitjeveRow = ((ListaShitjeveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmriLokacionit,
                        NrPorosise,
                        DataPlanifikimit,
                        IDVizita,
                        CmimiTotal,
                        DataLiferimit,
                        IDLiferimi,
                        Emri,
                        IDKlientDheLokacion,
                        ShkKlienti,
                        IDKlienti,
                        KontaktEmriMbiemri,
                        ShumaPaguar,
                        NrLiferimit};
                rowListaShitjeveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListaShitjeveRow);
                return rowListaShitjeveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListaShitjeveDataTable cln = ((ListaShitjeveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListaShitjeveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmriLokacionit = base.Columns["EmriLokacionit"];
                this.columnNrPorosise = base.Columns["NrPorosise"];
                this.columnDataPlanifikimit = base.Columns["DataPlanifikimit"];
                this.columnIDVizita = base.Columns["IDVizita"];
                this.columnCmimiTotal = base.Columns["CmimiTotal"];
                this.columnDataLiferimit = base.Columns["DataLiferimit"];
                this.columnIDLiferimi = base.Columns["IDLiferimi"];
                this.columnEmri = base.Columns["Emri"];
                this.columnIDKlientDheLokacion = base.Columns["IDKlientDheLokacion"];
                this.columnShkKlienti = base.Columns["ShkKlienti"];
                this.columnIDKlienti = base.Columns["IDKlienti"];
                this.columnKontaktEmriMbiemri = base.Columns["KontaktEmriMbiemri"];
                this.columnShumaPaguar = base.Columns["ShumaPaguar"];
                this.columnNrLiferimit = base.Columns["NrLiferimit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmriLokacionit = new global::System.Data.DataColumn("EmriLokacionit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmriLokacionit);
                this.columnNrPorosise = new global::System.Data.DataColumn("NrPorosise", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrPorosise);
                this.columnDataPlanifikimit = new global::System.Data.DataColumn("DataPlanifikimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPlanifikimit);
                this.columnIDVizita = new global::System.Data.DataColumn("IDVizita", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVizita);
                this.columnCmimiTotal = new global::System.Data.DataColumn("CmimiTotal", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiTotal);
                this.columnDataLiferimit = new global::System.Data.DataColumn("DataLiferimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataLiferimit);
                this.columnIDLiferimi = new global::System.Data.DataColumn("IDLiferimi", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLiferimi);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnIDKlientDheLokacion = new global::System.Data.DataColumn("IDKlientDheLokacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlientDheLokacion);
                this.columnShkKlienti = new global::System.Data.DataColumn("ShkKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShkKlienti);
                this.columnIDKlienti = new global::System.Data.DataColumn("IDKlienti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlienti);
                this.columnKontaktEmriMbiemri = new global::System.Data.DataColumn("KontaktEmriMbiemri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKontaktEmriMbiemri);
                this.columnShumaPaguar = new global::System.Data.DataColumn("ShumaPaguar", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShumaPaguar);
                this.columnNrLiferimit = new global::System.Data.DataColumn("NrLiferimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrLiferimit);
                this.columnEmriLokacionit.ReadOnly = true;
                this.columnEmriLokacionit.MaxLength = 40;
                this.columnNrPorosise.ReadOnly = true;
                this.columnNrPorosise.MaxLength = 15;
                this.columnDataPlanifikimit.ReadOnly = true;
                this.columnIDVizita.ReadOnly = true;
                this.columnCmimiTotal.ReadOnly = true;
                this.columnDataLiferimit.ReadOnly = true;
                this.columnIDLiferimi.ReadOnly = true;
                this.columnEmri.ReadOnly = true;
                this.columnEmri.MaxLength = 30;
                this.columnIDKlientDheLokacion.ReadOnly = true;
                this.columnIDKlientDheLokacion.MaxLength = 20;
                this.columnShkKlienti.ReadOnly = true;
                this.columnShkKlienti.MaxLength = 3;
                this.columnIDKlienti.ReadOnly = true;
                this.columnIDKlienti.MaxLength = 20;
                this.columnKontaktEmriMbiemri.ReadOnly = true;
                this.columnKontaktEmriMbiemri.MaxLength = 50;
                this.columnShumaPaguar.ReadOnly = true;
                this.columnNrLiferimit.ReadOnly = true;
                this.columnNrLiferimit.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaShitjeveRow NewListaShitjeveRow() {
                return ((ListaShitjeveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListaShitjeveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListaShitjeveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListaShitjeveRowChanged != null)) {
                    this.ListaShitjeveRowChanged(this, new ListaShitjeveRowChangeEvent(((ListaShitjeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListaShitjeveRowChanging != null)) {
                    this.ListaShitjeveRowChanging(this, new ListaShitjeveRowChangeEvent(((ListaShitjeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListaShitjeveRowDeleted != null)) {
                    this.ListaShitjeveRowDeleted(this, new ListaShitjeveRowChangeEvent(((ListaShitjeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListaShitjeveRowDeleting != null)) {
                    this.ListaShitjeveRowDeleting(this, new ListaShitjeveRowChangeEvent(((ListaShitjeveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListaShitjeveRow(ListaShitjeveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListaShitjeveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArtikujtShiturDataTable : global::System.Data.TypedTableBase<ArtikujtShiturRow> {
            
            private global::System.Data.DataColumn columnCmimiTotal;
            
            private global::System.Data.DataColumn columnNrLiferimit;
            
            private global::System.Data.DataColumn columnArtEmri;
            
            private global::System.Data.DataColumn columnCmimi;
            
            private global::System.Data.DataColumn columnTotali;
            
            private global::System.Data.DataColumn columnIDLiferimi;
            
            private global::System.Data.DataColumn columnDataLiferimit;
            
            private global::System.Data.DataColumn columnIDVizita;
            
            private global::System.Data.DataColumn columnEmriLokacionit;
            
            private global::System.Data.DataColumn columnAdresa;
            
            private global::System.Data.DataColumn columnKontaktEmriMbiemri;
            
            private global::System.Data.DataColumn _columnTel_Mobil;
            
            private global::System.Data.DataColumn columnQyteti;
            
            private global::System.Data.DataColumn columnSasiaLiferuar;
            
            private global::System.Data.DataColumn columnSeri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtShiturDataTable() {
                this.TableName = "ArtikujtShitur";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujtShiturDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiTotalColumn {
                get {
                    return this.columnCmimiTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrLiferimitColumn {
                get {
                    return this.columnNrLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtEmriColumn {
                get {
                    return this.columnArtEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiColumn {
                get {
                    return this.columnCmimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotaliColumn {
                get {
                    return this.columnTotali;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDLiferimiColumn {
                get {
                    return this.columnIDLiferimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataLiferimitColumn {
                get {
                    return this.columnDataLiferimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDVizitaColumn {
                get {
                    return this.columnIDVizita;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriLokacionitColumn {
                get {
                    return this.columnEmriLokacionit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdresaColumn {
                get {
                    return this.columnAdresa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KontaktEmriMbiemriColumn {
                get {
                    return this.columnKontaktEmriMbiemri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Tel_MobilColumn {
                get {
                    return this._columnTel_Mobil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QytetiColumn {
                get {
                    return this.columnQyteti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaLiferuarColumn {
                get {
                    return this.columnSasiaLiferuar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriColumn {
                get {
                    return this.columnSeri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtShiturRow this[int index] {
                get {
                    return ((ArtikujtShiturRow)(this.Rows[index]));
                }
            }
            
            public event ArtikujtShiturRowChangeEventHandler ArtikujtShiturRowChanging;
            
            public event ArtikujtShiturRowChangeEventHandler ArtikujtShiturRowChanged;
            
            public event ArtikujtShiturRowChangeEventHandler ArtikujtShiturRowDeleting;
            
            public event ArtikujtShiturRowChangeEventHandler ArtikujtShiturRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArtikujtShiturRow(ArtikujtShiturRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtShiturRow AddArtikujtShiturRow(float CmimiTotal, string NrLiferimit, string ArtEmri, float Cmimi, float Totali, System.Guid IDLiferimi, System.DateTime DataLiferimit, System.Guid IDVizita, string EmriLokacionit, string Adresa, string KontaktEmriMbiemri, string _Tel_Mobil, string Qyteti, double SasiaLiferuar, string Seri) {
                ArtikujtShiturRow rowArtikujtShiturRow = ((ArtikujtShiturRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CmimiTotal,
                        NrLiferimit,
                        ArtEmri,
                        Cmimi,
                        Totali,
                        IDLiferimi,
                        DataLiferimit,
                        IDVizita,
                        EmriLokacionit,
                        Adresa,
                        KontaktEmriMbiemri,
                        _Tel_Mobil,
                        Qyteti,
                        SasiaLiferuar,
                        Seri};
                rowArtikujtShiturRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArtikujtShiturRow);
                return rowArtikujtShiturRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArtikujtShiturDataTable cln = ((ArtikujtShiturDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArtikujtShiturDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCmimiTotal = base.Columns["CmimiTotal"];
                this.columnNrLiferimit = base.Columns["NrLiferimit"];
                this.columnArtEmri = base.Columns["ArtEmri"];
                this.columnCmimi = base.Columns["Cmimi"];
                this.columnTotali = base.Columns["Totali"];
                this.columnIDLiferimi = base.Columns["IDLiferimi"];
                this.columnDataLiferimit = base.Columns["DataLiferimit"];
                this.columnIDVizita = base.Columns["IDVizita"];
                this.columnEmriLokacionit = base.Columns["EmriLokacionit"];
                this.columnAdresa = base.Columns["Adresa"];
                this.columnKontaktEmriMbiemri = base.Columns["KontaktEmriMbiemri"];
                this._columnTel_Mobil = base.Columns["Tel/Mobil"];
                this.columnQyteti = base.Columns["Qyteti"];
                this.columnSasiaLiferuar = base.Columns["SasiaLiferuar"];
                this.columnSeri = base.Columns["Seri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCmimiTotal = new global::System.Data.DataColumn("CmimiTotal", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiTotal);
                this.columnNrLiferimit = new global::System.Data.DataColumn("NrLiferimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrLiferimit);
                this.columnArtEmri = new global::System.Data.DataColumn("ArtEmri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtEmri);
                this.columnCmimi = new global::System.Data.DataColumn("Cmimi", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimi);
                this.columnTotali = new global::System.Data.DataColumn("Totali", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotali);
                this.columnIDLiferimi = new global::System.Data.DataColumn("IDLiferimi", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLiferimi);
                this.columnDataLiferimit = new global::System.Data.DataColumn("DataLiferimit", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataLiferimit);
                this.columnIDVizita = new global::System.Data.DataColumn("IDVizita", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDVizita);
                this.columnEmriLokacionit = new global::System.Data.DataColumn("EmriLokacionit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmriLokacionit);
                this.columnAdresa = new global::System.Data.DataColumn("Adresa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdresa);
                this.columnKontaktEmriMbiemri = new global::System.Data.DataColumn("KontaktEmriMbiemri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKontaktEmriMbiemri);
                this._columnTel_Mobil = new global::System.Data.DataColumn("Tel/Mobil", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnTel_Mobil.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnTel_Mobil");
                this._columnTel_Mobil.ExtendedProperties.Add("Generator_UserColumnName", "Tel/Mobil");
                base.Columns.Add(this._columnTel_Mobil);
                this.columnQyteti = new global::System.Data.DataColumn("Qyteti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQyteti);
                this.columnSasiaLiferuar = new global::System.Data.DataColumn("SasiaLiferuar", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaLiferuar);
                this.columnSeri = new global::System.Data.DataColumn("Seri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeri);
                this.columnCmimiTotal.ReadOnly = true;
                this.columnNrLiferimit.ReadOnly = true;
                this.columnNrLiferimit.MaxLength = 15;
                this.columnArtEmri.ReadOnly = true;
                this.columnArtEmri.MaxLength = 50;
                this.columnCmimi.ReadOnly = true;
                this.columnTotali.ReadOnly = true;
                this.columnIDLiferimi.ReadOnly = true;
                this.columnDataLiferimit.ReadOnly = true;
                this.columnIDVizita.ReadOnly = true;
                this.columnEmriLokacionit.ReadOnly = true;
                this.columnEmriLokacionit.MaxLength = 40;
                this.columnAdresa.ReadOnly = true;
                this.columnAdresa.MaxLength = 30;
                this.columnKontaktEmriMbiemri.ReadOnly = true;
                this.columnKontaktEmriMbiemri.MaxLength = 50;
                this._columnTel_Mobil.ReadOnly = true;
                this._columnTel_Mobil.MaxLength = 25;
                this.columnQyteti.ReadOnly = true;
                this.columnQyteti.MaxLength = 30;
                this.columnSasiaLiferuar.ReadOnly = true;
                this.columnSeri.ReadOnly = true;
                this.columnSeri.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtShiturRow NewArtikujtShiturRow() {
                return ((ArtikujtShiturRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ArtikujtShiturRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ArtikujtShiturRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArtikujtShiturRowChanged != null)) {
                    this.ArtikujtShiturRowChanged(this, new ArtikujtShiturRowChangeEvent(((ArtikujtShiturRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArtikujtShiturRowChanging != null)) {
                    this.ArtikujtShiturRowChanging(this, new ArtikujtShiturRowChangeEvent(((ArtikujtShiturRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArtikujtShiturRowDeleted != null)) {
                    this.ArtikujtShiturRowDeleted(this, new ArtikujtShiturRowChangeEvent(((ArtikujtShiturRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArtikujtShiturRowDeleting != null)) {
                    this.ArtikujtShiturRowDeleting(this, new ArtikujtShiturRowChangeEvent(((ArtikujtShiturRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArtikujtShiturRow(ArtikujtShiturRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArtikujtShiturDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArtikujtDataTable : global::System.Data.TypedTableBase<ArtikujtRow> {
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnCmimiNjesi;
            
            private global::System.Data.DataColumn columnSasiaPako;
            
            private global::System.Data.DataColumn columnSasia;
            
            private global::System.Data.DataColumn columnCmimiPako;
            
            private global::System.Data.DataColumn columnShifra;
            
            private global::System.Data.DataColumn columnBarkod;
            
            private global::System.Data.DataColumn columnStokuAktual;
            
            private global::System.Data.DataColumn columnTePorositur;
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnStandard;
            
            private global::System.Data.DataColumn columnBUM;
            
            private global::System.Data.DataColumn columnUPP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtDataTable() {
                this.TableName = "Artikujt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujtDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiNjesiColumn {
                get {
                    return this.columnCmimiNjesi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaPakoColumn {
                get {
                    return this.columnSasiaPako;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaColumn {
                get {
                    return this.columnSasia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CmimiPakoColumn {
                get {
                    return this.columnCmimiPako;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShifraColumn {
                get {
                    return this.columnShifra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarkodColumn {
                get {
                    return this.columnBarkod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StokuAktualColumn {
                get {
                    return this.columnStokuAktual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TePorositurColumn {
                get {
                    return this.columnTePorositur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardColumn {
                get {
                    return this.columnStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUMColumn {
                get {
                    return this.columnBUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPPColumn {
                get {
                    return this.columnUPP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtRow this[int index] {
                get {
                    return ((ArtikujtRow)(this.Rows[index]));
                }
            }
            
            public event ArtikujtRowChangeEventHandler ArtikujtRowChanging;
            
            public event ArtikujtRowChangeEventHandler ArtikujtRowChanged;
            
            public event ArtikujtRowChangeEventHandler ArtikujtRowDeleting;
            
            public event ArtikujtRowChangeEventHandler ArtikujtRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArtikujtRow(ArtikujtRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtRow AddArtikujtRow(string Emri, float CmimiNjesi, int SasiaPako, int Sasia, float CmimiPako, string Shifra, string Barkod, int StokuAktual, int TePorositur, string IDArtikulli, byte Standard, string BUM, decimal UPP) {
                ArtikujtRow rowArtikujtRow = ((ArtikujtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Emri,
                        CmimiNjesi,
                        SasiaPako,
                        Sasia,
                        CmimiPako,
                        Shifra,
                        Barkod,
                        StokuAktual,
                        TePorositur,
                        IDArtikulli,
                        Standard,
                        BUM,
                        UPP};
                rowArtikujtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArtikujtRow);
                return rowArtikujtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtRow FindByIDArtikulli(string IDArtikulli) {
                return ((ArtikujtRow)(this.Rows.Find(new object[] {
                            IDArtikulli})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArtikujtDataTable cln = ((ArtikujtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArtikujtDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmri = base.Columns["Emri"];
                this.columnCmimiNjesi = base.Columns["CmimiNjesi"];
                this.columnSasiaPako = base.Columns["SasiaPako"];
                this.columnSasia = base.Columns["Sasia"];
                this.columnCmimiPako = base.Columns["CmimiPako"];
                this.columnShifra = base.Columns["Shifra"];
                this.columnBarkod = base.Columns["Barkod"];
                this.columnStokuAktual = base.Columns["StokuAktual"];
                this.columnTePorositur = base.Columns["TePorositur"];
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnStandard = base.Columns["Standard"];
                this.columnBUM = base.Columns["BUM"];
                this.columnUPP = base.Columns["UPP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnCmimiNjesi = new global::System.Data.DataColumn("CmimiNjesi", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiNjesi);
                this.columnSasiaPako = new global::System.Data.DataColumn("SasiaPako", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasiaPako);
                this.columnSasia = new global::System.Data.DataColumn("Sasia", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasia);
                this.columnCmimiPako = new global::System.Data.DataColumn("CmimiPako", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCmimiPako);
                this.columnShifra = new global::System.Data.DataColumn("Shifra", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShifra);
                this.columnBarkod = new global::System.Data.DataColumn("Barkod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarkod);
                this.columnStokuAktual = new global::System.Data.DataColumn("StokuAktual", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStokuAktual);
                this.columnTePorositur = new global::System.Data.DataColumn("TePorositur", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTePorositur);
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnStandard = new global::System.Data.DataColumn("Standard", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandard);
                this.columnBUM = new global::System.Data.DataColumn("BUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUM);
                this.columnUPP = new global::System.Data.DataColumn("UPP", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPP);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnShifra}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint3", new global::System.Data.DataColumn[] {
                                this.columnBarkod}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint4", new global::System.Data.DataColumn[] {
                                this.columnIDArtikulli}, true));
                this.columnEmri.MaxLength = 40;
                this.columnShifra.Unique = true;
                this.columnShifra.MaxLength = 20;
                this.columnBarkod.Unique = true;
                this.columnBarkod.MaxLength = 20;
                this.columnIDArtikulli.AllowDBNull = false;
                this.columnIDArtikulli.Unique = true;
                this.columnIDArtikulli.MaxLength = 20;
                this.columnBUM.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtRow NewArtikujtRow() {
                return ((ArtikujtRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ArtikujtRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ArtikujtRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArtikujtRowChanged != null)) {
                    this.ArtikujtRowChanged(this, new ArtikujtRowChangeEvent(((ArtikujtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArtikujtRowChanging != null)) {
                    this.ArtikujtRowChanging(this, new ArtikujtRowChangeEvent(((ArtikujtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArtikujtRowDeleted != null)) {
                    this.ArtikujtRowDeleted(this, new ArtikujtRowChangeEvent(((ArtikujtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArtikujtRowDeleting != null)) {
                    this.ArtikujtRowDeleting(this, new ArtikujtRowChangeEvent(((ArtikujtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArtikujtRow(ArtikujtRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArtikujtDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArtikujtStoqetDataTable : global::System.Data.TypedTableBase<ArtikujtStoqetRow> {
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnRabatet;
            
            private global::System.Data.DataColumn columnCopGratis;
            
            private global::System.Data.DataColumn columnSasia;
            
            private global::System.Data.DataColumn columnPaketa;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnTotali;
            
            private global::System.Data.DataColumn columnDepo;
            
            private global::System.Data.DataColumn columnPriceBox;
            
            private global::System.Data.DataColumn columnPaketimi;
            
            private global::System.Data.DataColumn columnBarkod;
            
            private global::System.Data.DataColumn columnDhurate;
            
            private global::System.Data.DataColumn columnBUM;
            
            private global::System.Data.DataColumn columnSeri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetDataTable(bool initExpressions) {
                this.TableName = "ArtikujtStoqet";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujtStoqetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RabatetColumn {
                get {
                    return this.columnRabatet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CopGratisColumn {
                get {
                    return this.columnCopGratis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaColumn {
                get {
                    return this.columnSasia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaketaColumn {
                get {
                    return this.columnPaketa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotaliColumn {
                get {
                    return this.columnTotali;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepoColumn {
                get {
                    return this.columnDepo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceBoxColumn {
                get {
                    return this.columnPriceBox;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaketimiColumn {
                get {
                    return this.columnPaketimi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarkodColumn {
                get {
                    return this.columnBarkod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DhurateColumn {
                get {
                    return this.columnDhurate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUMColumn {
                get {
                    return this.columnBUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriColumn {
                get {
                    return this.columnSeri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetRow this[int index] {
                get {
                    return ((ArtikujtStoqetRow)(this.Rows[index]));
                }
            }
            
            public event ArtikujtStoqetRowChangeEventHandler ArtikujtStoqetRowChanging;
            
            public event ArtikujtStoqetRowChangeEventHandler ArtikujtStoqetRowChanged;
            
            public event ArtikujtStoqetRowChangeEventHandler ArtikujtStoqetRowDeleting;
            
            public event ArtikujtStoqetRowChangeEventHandler ArtikujtStoqetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArtikujtStoqetRow(ArtikujtStoqetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetRow AddArtikujtStoqetRow(string IDArtikulli, string Emri, float Rabatet, int CopGratis, double Sasia, double Paketa, double UnitPrice, double Totali, string Depo, double PriceBox, double Paketimi, string Barkod, int Dhurate, string BUM, string Seri) {
                ArtikujtStoqetRow rowArtikujtStoqetRow = ((ArtikujtStoqetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDArtikulli,
                        Emri,
                        Rabatet,
                        CopGratis,
                        Sasia,
                        Paketa,
                        UnitPrice,
                        Totali,
                        Depo,
                        PriceBox,
                        Paketimi,
                        Barkod,
                        Dhurate,
                        BUM,
                        Seri};
                rowArtikujtStoqetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArtikujtStoqetRow);
                return rowArtikujtStoqetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetRow AddArtikujtStoqetRow(string IDArtikulli, string Emri, float Rabatet, int CopGratis, double Sasia, double Paketa, double UnitPrice, double Totali, string Depo, double Paketimi, string Barkod, int Dhurate, string BUM, string Seri) {
                ArtikujtStoqetRow rowArtikujtStoqetRow = ((ArtikujtStoqetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDArtikulli,
                        Emri,
                        Rabatet,
                        CopGratis,
                        Sasia,
                        Paketa,
                        UnitPrice,
                        Totali,
                        Depo,
                        null,
                        Paketimi,
                        Barkod,
                        Dhurate,
                        BUM,
                        Seri};
                rowArtikujtStoqetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArtikujtStoqetRow);
                return rowArtikujtStoqetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArtikujtStoqetDataTable cln = ((ArtikujtStoqetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArtikujtStoqetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnEmri = base.Columns["Emri"];
                this.columnRabatet = base.Columns["Rabatet"];
                this.columnCopGratis = base.Columns["CopGratis"];
                this.columnSasia = base.Columns["Sasia"];
                this.columnPaketa = base.Columns["Paketa"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnTotali = base.Columns["Totali"];
                this.columnDepo = base.Columns["Depo"];
                this.columnPriceBox = base.Columns["PriceBox"];
                this.columnPaketimi = base.Columns["Paketimi"];
                this.columnBarkod = base.Columns["Barkod"];
                this.columnDhurate = base.Columns["Dhurate"];
                this.columnBUM = base.Columns["BUM"];
                this.columnSeri = base.Columns["Seri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnRabatet = new global::System.Data.DataColumn("Rabatet", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRabatet);
                this.columnCopGratis = new global::System.Data.DataColumn("CopGratis", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopGratis);
                this.columnSasia = new global::System.Data.DataColumn("Sasia", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasia);
                this.columnPaketa = new global::System.Data.DataColumn("Paketa", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaketa);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnTotali = new global::System.Data.DataColumn("Totali", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotali);
                this.columnDepo = new global::System.Data.DataColumn("Depo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepo);
                this.columnPriceBox = new global::System.Data.DataColumn("PriceBox", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceBox);
                this.columnPaketimi = new global::System.Data.DataColumn("Paketimi", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaketimi);
                this.columnBarkod = new global::System.Data.DataColumn("Barkod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarkod);
                this.columnDhurate = new global::System.Data.DataColumn("Dhurate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDhurate);
                this.columnBUM = new global::System.Data.DataColumn("BUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUM);
                this.columnSeri = new global::System.Data.DataColumn("Seri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeri);
                this.columnIDArtikulli.ReadOnly = true;
                this.columnIDArtikulli.MaxLength = 20;
                this.columnEmri.ReadOnly = true;
                this.columnEmri.MaxLength = 80;
                this.columnRabatet.ReadOnly = true;
                this.columnCopGratis.ReadOnly = true;
                this.columnSasia.ReadOnly = true;
                this.columnPaketa.ReadOnly = true;
                this.columnUnitPrice.ReadOnly = true;
                this.columnTotali.ReadOnly = true;
                this.columnDepo.ReadOnly = true;
                this.columnDepo.MaxLength = 10;
                this.columnPriceBox.ReadOnly = true;
                this.columnPaketimi.ReadOnly = true;
                this.columnBarkod.ReadOnly = true;
                this.columnBarkod.MaxLength = 20;
                this.columnDhurate.ReadOnly = true;
                this.columnBUM.ReadOnly = true;
                this.columnBUM.MaxLength = 10;
                this.columnSeri.ReadOnly = true;
                this.columnSeri.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetRow NewArtikujtStoqetRow() {
                return ((ArtikujtStoqetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ArtikujtStoqetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ArtikujtStoqetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.PriceBoxColumn.Expression = "Paketa*UnitPrice";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArtikujtStoqetRowChanged != null)) {
                    this.ArtikujtStoqetRowChanged(this, new ArtikujtStoqetRowChangeEvent(((ArtikujtStoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArtikujtStoqetRowChanging != null)) {
                    this.ArtikujtStoqetRowChanging(this, new ArtikujtStoqetRowChangeEvent(((ArtikujtStoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArtikujtStoqetRowDeleted != null)) {
                    this.ArtikujtStoqetRowDeleted(this, new ArtikujtStoqetRowChangeEvent(((ArtikujtStoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArtikujtStoqetRowDeleting != null)) {
                    this.ArtikujtStoqetRowDeleting(this, new ArtikujtStoqetRowChangeEvent(((ArtikujtStoqetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArtikujtStoqetRow(ArtikujtStoqetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArtikujtStoqetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Log_SyncErrorsDataTable : global::System.Data.TypedTableBase<Log_SyncErrorsRow> {
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnSessionID;
            
            private global::System.Data.DataColumn columnErr_Code;
            
            private global::System.Data.DataColumn columnErr_Message;
            
            private global::System.Data.DataColumn columnErr_Module;
            
            private global::System.Data.DataColumn columnErr_Line;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Log_SyncErrorsDataTable() {
                this.TableName = "Log_SyncErrors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Log_SyncErrorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SessionIDColumn {
                get {
                    return this.columnSessionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Err_CodeColumn {
                get {
                    return this.columnErr_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Err_MessageColumn {
                get {
                    return this.columnErr_Message;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Err_ModuleColumn {
                get {
                    return this.columnErr_Module;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Err_LineColumn {
                get {
                    return this.columnErr_Line;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Log_SyncErrorsRow this[int index] {
                get {
                    return ((Log_SyncErrorsRow)(this.Rows[index]));
                }
            }
            
            public event Log_SyncErrorsRowChangeEventHandler Log_SyncErrorsRowChanging;
            
            public event Log_SyncErrorsRowChangeEventHandler Log_SyncErrorsRowChanged;
            
            public event Log_SyncErrorsRowChangeEventHandler Log_SyncErrorsRowDeleting;
            
            public event Log_SyncErrorsRowChangeEventHandler Log_SyncErrorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLog_SyncErrorsRow(Log_SyncErrorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Log_SyncErrorsRow AddLog_SyncErrorsRow(string DeviceID, System.Guid SessionID, int Err_Code, string Err_Message, string Err_Module, int Err_Line) {
                Log_SyncErrorsRow rowLog_SyncErrorsRow = ((Log_SyncErrorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeviceID,
                        SessionID,
                        Err_Code,
                        Err_Message,
                        Err_Module,
                        Err_Line};
                rowLog_SyncErrorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLog_SyncErrorsRow);
                return rowLog_SyncErrorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Log_SyncErrorsDataTable cln = ((Log_SyncErrorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Log_SyncErrorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnSessionID = base.Columns["SessionID"];
                this.columnErr_Code = base.Columns["Err_Code"];
                this.columnErr_Message = base.Columns["Err_Message"];
                this.columnErr_Module = base.Columns["Err_Module"];
                this.columnErr_Line = base.Columns["Err_Line"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnSessionID = new global::System.Data.DataColumn("SessionID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSessionID);
                this.columnErr_Code = new global::System.Data.DataColumn("Err_Code", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErr_Code);
                this.columnErr_Message = new global::System.Data.DataColumn("Err_Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErr_Message);
                this.columnErr_Module = new global::System.Data.DataColumn("Err_Module", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErr_Module);
                this.columnErr_Line = new global::System.Data.DataColumn("Err_Line", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErr_Line);
                this.columnDeviceID.MaxLength = 50;
                this.columnErr_Message.MaxLength = 255;
                this.columnErr_Module.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Log_SyncErrorsRow NewLog_SyncErrorsRow() {
                return ((Log_SyncErrorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Log_SyncErrorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Log_SyncErrorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Log_SyncErrorsRowChanged != null)) {
                    this.Log_SyncErrorsRowChanged(this, new Log_SyncErrorsRowChangeEvent(((Log_SyncErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Log_SyncErrorsRowChanging != null)) {
                    this.Log_SyncErrorsRowChanging(this, new Log_SyncErrorsRowChangeEvent(((Log_SyncErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Log_SyncErrorsRowDeleted != null)) {
                    this.Log_SyncErrorsRowDeleted(this, new Log_SyncErrorsRowChangeEvent(((Log_SyncErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Log_SyncErrorsRowDeleting != null)) {
                    this.Log_SyncErrorsRowDeleting(this, new Log_SyncErrorsRowChangeEvent(((Log_SyncErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLog_SyncErrorsRow(Log_SyncErrorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Log_SyncErrorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArtikujDepoDataTable : global::System.Data.TypedTableBase<ArtikujDepoRow> {
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnSasia;
            
            private global::System.Data.DataColumn columnShifra;
            
            private global::System.Data.DataColumn columnDepo;
            
            private global::System.Data.DataColumn columnBarkod;
            
            private global::System.Data.DataColumn columnSeri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujDepoDataTable() {
                this.TableName = "ArtikujDepo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujDepoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaColumn {
                get {
                    return this.columnSasia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShifraColumn {
                get {
                    return this.columnShifra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepoColumn {
                get {
                    return this.columnDepo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarkodColumn {
                get {
                    return this.columnBarkod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriColumn {
                get {
                    return this.columnSeri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujDepoRow this[int index] {
                get {
                    return ((ArtikujDepoRow)(this.Rows[index]));
                }
            }
            
            public event ArtikujDepoRowChangeEventHandler ArtikujDepoRowChanging;
            
            public event ArtikujDepoRowChangeEventHandler ArtikujDepoRowChanged;
            
            public event ArtikujDepoRowChangeEventHandler ArtikujDepoRowDeleting;
            
            public event ArtikujDepoRowChangeEventHandler ArtikujDepoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArtikujDepoRow(ArtikujDepoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujDepoRow AddArtikujDepoRow(string Emri, double Sasia, string Shifra, string Depo, string Barkod, string Seri) {
                ArtikujDepoRow rowArtikujDepoRow = ((ArtikujDepoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Emri,
                        Sasia,
                        Shifra,
                        Depo,
                        Barkod,
                        Seri};
                rowArtikujDepoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArtikujDepoRow);
                return rowArtikujDepoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArtikujDepoDataTable cln = ((ArtikujDepoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArtikujDepoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmri = base.Columns["Emri"];
                this.columnSasia = base.Columns["Sasia"];
                this.columnShifra = base.Columns["Shifra"];
                this.columnDepo = base.Columns["Depo"];
                this.columnBarkod = base.Columns["Barkod"];
                this.columnSeri = base.Columns["Seri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnSasia = new global::System.Data.DataColumn("Sasia", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasia);
                this.columnShifra = new global::System.Data.DataColumn("Shifra", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShifra);
                this.columnDepo = new global::System.Data.DataColumn("Depo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepo);
                this.columnBarkod = new global::System.Data.DataColumn("Barkod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarkod);
                this.columnSeri = new global::System.Data.DataColumn("Seri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeri);
                this.columnEmri.ReadOnly = true;
                this.columnEmri.MaxLength = 80;
                this.columnSasia.ReadOnly = true;
                this.columnShifra.ReadOnly = true;
                this.columnShifra.MaxLength = 20;
                this.columnDepo.ReadOnly = true;
                this.columnDepo.MaxLength = 10;
                this.columnBarkod.ReadOnly = true;
                this.columnBarkod.MaxLength = 20;
                this.columnSeri.ReadOnly = true;
                this.columnSeri.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujDepoRow NewArtikujDepoRow() {
                return ((ArtikujDepoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ArtikujDepoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ArtikujDepoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArtikujDepoRowChanged != null)) {
                    this.ArtikujDepoRowChanged(this, new ArtikujDepoRowChangeEvent(((ArtikujDepoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArtikujDepoRowChanging != null)) {
                    this.ArtikujDepoRowChanging(this, new ArtikujDepoRowChangeEvent(((ArtikujDepoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArtikujDepoRowDeleted != null)) {
                    this.ArtikujDepoRowDeleted(this, new ArtikujDepoRowChangeEvent(((ArtikujDepoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArtikujDepoRowDeleting != null)) {
                    this.ArtikujDepoRowDeleting(this, new ArtikujDepoRowChangeEvent(((ArtikujDepoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArtikujDepoRow(ArtikujDepoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArtikujDepoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FaturatPagesatDataTable : global::System.Data.TypedTableBase<FaturatPagesatRow> {
            
            private global::System.Data.DataColumn columnNrFatures;
            
            private global::System.Data.DataColumn columnDataFatures;
            
            private global::System.Data.DataColumn columnDataPerPages;
            
            private global::System.Data.DataColumn columnShumaFatures;
            
            private global::System.Data.DataColumn columnBorxhi;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatDataTable() {
                this.TableName = "FaturatPagesat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FaturatPagesatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrFaturesColumn {
                get {
                    return this.columnNrFatures;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataFaturesColumn {
                get {
                    return this.columnDataFatures;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPerPagesColumn {
                get {
                    return this.columnDataPerPages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShumaFaturesColumn {
                get {
                    return this.columnShumaFatures;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BorxhiColumn {
                get {
                    return this.columnBorxhi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatRow this[int index] {
                get {
                    return ((FaturatPagesatRow)(this.Rows[index]));
                }
            }
            
            public event FaturatPagesatRowChangeEventHandler FaturatPagesatRowChanging;
            
            public event FaturatPagesatRowChangeEventHandler FaturatPagesatRowChanged;
            
            public event FaturatPagesatRowChangeEventHandler FaturatPagesatRowDeleting;
            
            public event FaturatPagesatRowChangeEventHandler FaturatPagesatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFaturatPagesatRow(FaturatPagesatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatRow AddFaturatPagesatRow(string NrFatures, System.DateTime DataFatures, System.DateTime DataPerPages, decimal ShumaFatures, decimal Borxhi, int SyncStatus) {
                FaturatPagesatRow rowFaturatPagesatRow = ((FaturatPagesatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NrFatures,
                        DataFatures,
                        DataPerPages,
                        ShumaFatures,
                        Borxhi,
                        SyncStatus};
                rowFaturatPagesatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFaturatPagesatRow);
                return rowFaturatPagesatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatRow FindByNrFatures(string NrFatures) {
                return ((FaturatPagesatRow)(this.Rows.Find(new object[] {
                            NrFatures})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FaturatPagesatDataTable cln = ((FaturatPagesatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FaturatPagesatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNrFatures = base.Columns["NrFatures"];
                this.columnDataFatures = base.Columns["DataFatures"];
                this.columnDataPerPages = base.Columns["DataPerPages"];
                this.columnShumaFatures = base.Columns["ShumaFatures"];
                this.columnBorxhi = base.Columns["Borxhi"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNrFatures = new global::System.Data.DataColumn("NrFatures", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrFatures);
                this.columnDataFatures = new global::System.Data.DataColumn("DataFatures", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataFatures);
                this.columnDataPerPages = new global::System.Data.DataColumn("DataPerPages", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPerPages);
                this.columnShumaFatures = new global::System.Data.DataColumn("ShumaFatures", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShumaFatures);
                this.columnBorxhi = new global::System.Data.DataColumn("Borxhi", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBorxhi);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNrFatures}, true));
                this.columnNrFatures.AllowDBNull = false;
                this.columnNrFatures.Unique = true;
                this.columnNrFatures.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatRow NewFaturatPagesatRow() {
                return ((FaturatPagesatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FaturatPagesatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FaturatPagesatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FaturatPagesatRowChanged != null)) {
                    this.FaturatPagesatRowChanged(this, new FaturatPagesatRowChangeEvent(((FaturatPagesatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FaturatPagesatRowChanging != null)) {
                    this.FaturatPagesatRowChanging(this, new FaturatPagesatRowChangeEvent(((FaturatPagesatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FaturatPagesatRowDeleted != null)) {
                    this.FaturatPagesatRowDeleted(this, new FaturatPagesatRowChangeEvent(((FaturatPagesatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FaturatPagesatRowDeleting != null)) {
                    this.FaturatPagesatRowDeleting(this, new FaturatPagesatRowChangeEvent(((FaturatPagesatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFaturatPagesatRow(FaturatPagesatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FaturatPagesatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NumriFaturaveDataTable : global::System.Data.TypedTableBase<NumriFaturaveRow> {
            
            private global::System.Data.DataColumn columnKOD;
            
            private global::System.Data.DataColumn columnNRKUFIS;
            
            private global::System.Data.DataColumn columnNRKUFIP;
            
            private global::System.Data.DataColumn columnNRKUFIPJT;
            
            private global::System.Data.DataColumn columnNRKUFISJT;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnIDNumri;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveDataTable() {
                this.TableName = "NumriFaturave";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NumriFaturaveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KODColumn {
                get {
                    return this.columnKOD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NRKUFISColumn {
                get {
                    return this.columnNRKUFIS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NRKUFIPColumn {
                get {
                    return this.columnNRKUFIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NRKUFIPJTColumn {
                get {
                    return this.columnNRKUFIPJT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NRKUFISJTColumn {
                get {
                    return this.columnNRKUFISJT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDNumriColumn {
                get {
                    return this.columnIDNumri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveRow this[int index] {
                get {
                    return ((NumriFaturaveRow)(this.Rows[index]));
                }
            }
            
            public event NumriFaturaveRowChangeEventHandler NumriFaturaveRowChanging;
            
            public event NumriFaturaveRowChangeEventHandler NumriFaturaveRowChanged;
            
            public event NumriFaturaveRowChangeEventHandler NumriFaturaveRowDeleting;
            
            public event NumriFaturaveRowChangeEventHandler NumriFaturaveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNumriFaturaveRow(NumriFaturaveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveRow AddNumriFaturaveRow(string KOD, int NRKUFIS, int NRKUFIP, int NRKUFIPJT, string NRKUFISJT, int SyncStatus) {
                NumriFaturaveRow rowNumriFaturaveRow = ((NumriFaturaveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KOD,
                        NRKUFIS,
                        NRKUFIP,
                        NRKUFIPJT,
                        NRKUFISJT,
                        SyncStatus,
                        null};
                rowNumriFaturaveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNumriFaturaveRow);
                return rowNumriFaturaveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveRow FindByIDNumri(int IDNumri) {
                return ((NumriFaturaveRow)(this.Rows.Find(new object[] {
                            IDNumri})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NumriFaturaveDataTable cln = ((NumriFaturaveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NumriFaturaveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKOD = base.Columns["KOD"];
                this.columnNRKUFIS = base.Columns["NRKUFIS"];
                this.columnNRKUFIP = base.Columns["NRKUFIP"];
                this.columnNRKUFIPJT = base.Columns["NRKUFIPJT"];
                this.columnNRKUFISJT = base.Columns["NRKUFISJT"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnIDNumri = base.Columns["IDNumri"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKOD = new global::System.Data.DataColumn("KOD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKOD);
                this.columnNRKUFIS = new global::System.Data.DataColumn("NRKUFIS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNRKUFIS);
                this.columnNRKUFIP = new global::System.Data.DataColumn("NRKUFIP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNRKUFIP);
                this.columnNRKUFIPJT = new global::System.Data.DataColumn("NRKUFIPJT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNRKUFIPJT);
                this.columnNRKUFISJT = new global::System.Data.DataColumn("NRKUFISJT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNRKUFISJT);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnIDNumri = new global::System.Data.DataColumn("IDNumri", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDNumri);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDNumri}, true));
                this.columnKOD.MaxLength = 30;
                this.columnNRKUFISJT.MaxLength = 100;
                this.columnIDNumri.AutoIncrement = true;
                this.columnIDNumri.AutoIncrementSeed = -1;
                this.columnIDNumri.AutoIncrementStep = -1;
                this.columnIDNumri.AllowDBNull = false;
                this.columnIDNumri.ReadOnly = true;
                this.columnIDNumri.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveRow NewNumriFaturaveRow() {
                return ((NumriFaturaveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NumriFaturaveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NumriFaturaveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NumriFaturaveRowChanged != null)) {
                    this.NumriFaturaveRowChanged(this, new NumriFaturaveRowChangeEvent(((NumriFaturaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NumriFaturaveRowChanging != null)) {
                    this.NumriFaturaveRowChanging(this, new NumriFaturaveRowChangeEvent(((NumriFaturaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NumriFaturaveRowDeleted != null)) {
                    this.NumriFaturaveRowDeleted(this, new NumriFaturaveRowChangeEvent(((NumriFaturaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NumriFaturaveRowDeleting != null)) {
                    this.NumriFaturaveRowDeleting(this, new NumriFaturaveRowChangeEvent(((NumriFaturaveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNumriFaturaveRow(NumriFaturaveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NumriFaturaveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrdersDataTable : global::System.Data.TypedTableBase<OrdersRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIDOrder;
            
            private global::System.Data.DataColumn columnDeviceID;
            
            private global::System.Data.DataColumn columnData;
            
            private global::System.Data.DataColumn columnDepo;
            
            private global::System.Data.DataColumn columnIDAgjenti;
            
            private global::System.Data.DataColumn columnIDKlientDheLokacion;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnImpStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersDataTable() {
                this.TableName = "Orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDOrderColumn {
                get {
                    return this.columnIDOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIDColumn {
                get {
                    return this.columnDeviceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepoColumn {
                get {
                    return this.columnDepo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDAgjentiColumn {
                get {
                    return this.columnIDAgjenti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDKlientDheLokacionColumn {
                get {
                    return this.columnIDKlientDheLokacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpStatusColumn {
                get {
                    return this.columnImpStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow AddOrdersRow(System.Guid ID, string IDOrder, string DeviceID, System.DateTime Data, string Depo, string IDAgjenti, string IDKlientDheLokacion, int SyncStatus, int ImpStatus) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        IDOrder,
                        DeviceID,
                        Data,
                        Depo,
                        IDAgjenti,
                        IDKlientDheLokacion,
                        SyncStatus,
                        ImpStatus};
                rowOrdersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow FindByID(System.Guid ID) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIDOrder = base.Columns["IDOrder"];
                this.columnDeviceID = base.Columns["DeviceID"];
                this.columnData = base.Columns["Data"];
                this.columnDepo = base.Columns["Depo"];
                this.columnIDAgjenti = base.Columns["IDAgjenti"];
                this.columnIDKlientDheLokacion = base.Columns["IDKlientDheLokacion"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnImpStatus = base.Columns["ImpStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDOrder = new global::System.Data.DataColumn("IDOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDOrder);
                this.columnDeviceID = new global::System.Data.DataColumn("DeviceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceID);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnDepo = new global::System.Data.DataColumn("Depo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepo);
                this.columnIDAgjenti = new global::System.Data.DataColumn("IDAgjenti", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDAgjenti);
                this.columnIDKlientDheLokacion = new global::System.Data.DataColumn("IDKlientDheLokacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDKlientDheLokacion);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnImpStatus = new global::System.Data.DataColumn("ImpStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnIDOrder.MaxLength = 30;
                this.columnDeviceID.MaxLength = 30;
                this.columnDepo.MaxLength = 30;
                this.columnIDAgjenti.MaxLength = 20;
                this.columnIDKlientDheLokacion.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Order_DetailsDataTable : global::System.Data.TypedTableBase<Order_DetailsRow> {
            
            private global::System.Data.DataColumn columnIDOrder;
            
            private global::System.Data.DataColumn columnNrRendor;
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnSasia_Porositur;
            
            private global::System.Data.DataColumn columnSyncStatus;
            
            private global::System.Data.DataColumn columnImpStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsDataTable() {
                this.TableName = "Order_Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Order_DetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDOrderColumn {
                get {
                    return this.columnIDOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NrRendorColumn {
                get {
                    return this.columnNrRendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sasia_PorositurColumn {
                get {
                    return this.columnSasia_Porositur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncStatusColumn {
                get {
                    return this.columnSyncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpStatusColumn {
                get {
                    return this.columnImpStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsRow this[int index] {
                get {
                    return ((Order_DetailsRow)(this.Rows[index]));
                }
            }
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowChanging;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowChanged;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowDeleting;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrder_DetailsRow(Order_DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsRow AddOrder_DetailsRow(string IDOrder, int NrRendor, string IDArtikulli, string Emri, float Sasia_Porositur, int SyncStatus, int ImpStatus) {
                Order_DetailsRow rowOrder_DetailsRow = ((Order_DetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDOrder,
                        NrRendor,
                        IDArtikulli,
                        Emri,
                        Sasia_Porositur,
                        SyncStatus,
                        ImpStatus};
                rowOrder_DetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrder_DetailsRow);
                return rowOrder_DetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsRow FindByIDOrderIDArtikulli(string IDOrder, string IDArtikulli) {
                return ((Order_DetailsRow)(this.Rows.Find(new object[] {
                            IDOrder,
                            IDArtikulli})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Order_DetailsDataTable cln = ((Order_DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Order_DetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDOrder = base.Columns["IDOrder"];
                this.columnNrRendor = base.Columns["NrRendor"];
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnEmri = base.Columns["Emri"];
                this.columnSasia_Porositur = base.Columns["Sasia_Porositur"];
                this.columnSyncStatus = base.Columns["SyncStatus"];
                this.columnImpStatus = base.Columns["ImpStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDOrder = new global::System.Data.DataColumn("IDOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDOrder);
                this.columnNrRendor = new global::System.Data.DataColumn("NrRendor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNrRendor);
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnSasia_Porositur = new global::System.Data.DataColumn("Sasia_Porositur", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasia_Porositur);
                this.columnSyncStatus = new global::System.Data.DataColumn("SyncStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncStatus);
                this.columnImpStatus = new global::System.Data.DataColumn("ImpStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDOrder,
                                this.columnIDArtikulli}, true));
                this.columnIDOrder.AllowDBNull = false;
                this.columnIDOrder.MaxLength = 20;
                this.columnIDArtikulli.AllowDBNull = false;
                this.columnIDArtikulli.MaxLength = 100;
                this.columnEmri.MaxLength = 50;
                this.columnImpStatus.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsRow NewOrder_DetailsRow() {
                return ((Order_DetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Order_DetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Order_DetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Order_DetailsRowChanged != null)) {
                    this.Order_DetailsRowChanged(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Order_DetailsRowChanging != null)) {
                    this.Order_DetailsRowChanging(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Order_DetailsRowDeleted != null)) {
                    this.Order_DetailsRowDeleted(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Order_DetailsRowDeleting != null)) {
                    this.Order_DetailsRowDeleting(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrder_DetailsRow(Order_DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Order_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rptOrder_DetailsDataTable : global::System.Data.TypedTableBase<rptOrder_DetailsRow> {
            
            private global::System.Data.DataColumn columnIDArtikulli;
            
            private global::System.Data.DataColumn columnEmri;
            
            private global::System.Data.DataColumn columnSasia;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsDataTable() {
                this.TableName = "rptOrder_Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptOrder_DetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDArtikulliColumn {
                get {
                    return this.columnIDArtikulli;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmriColumn {
                get {
                    return this.columnEmri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SasiaColumn {
                get {
                    return this.columnSasia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsRow this[int index] {
                get {
                    return ((rptOrder_DetailsRow)(this.Rows[index]));
                }
            }
            
            public event rptOrder_DetailsRowChangeEventHandler rptOrder_DetailsRowChanging;
            
            public event rptOrder_DetailsRowChangeEventHandler rptOrder_DetailsRowChanged;
            
            public event rptOrder_DetailsRowChangeEventHandler rptOrder_DetailsRowDeleting;
            
            public event rptOrder_DetailsRowChangeEventHandler rptOrder_DetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrptOrder_DetailsRow(rptOrder_DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsRow AddrptOrder_DetailsRow(string IDArtikulli, string Emri, double Sasia) {
                rptOrder_DetailsRow rowrptOrder_DetailsRow = ((rptOrder_DetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDArtikulli,
                        Emri,
                        Sasia};
                rowrptOrder_DetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrptOrder_DetailsRow);
                return rowrptOrder_DetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsRow FindByIDArtikulli(string IDArtikulli) {
                return ((rptOrder_DetailsRow)(this.Rows.Find(new object[] {
                            IDArtikulli})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rptOrder_DetailsDataTable cln = ((rptOrder_DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rptOrder_DetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIDArtikulli = base.Columns["IDArtikulli"];
                this.columnEmri = base.Columns["Emri"];
                this.columnSasia = base.Columns["Sasia"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIDArtikulli = new global::System.Data.DataColumn("IDArtikulli", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDArtikulli);
                this.columnEmri = new global::System.Data.DataColumn("Emri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmri);
                this.columnSasia = new global::System.Data.DataColumn("Sasia", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSasia);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDArtikulli}, true));
                this.columnIDArtikulli.AllowDBNull = false;
                this.columnIDArtikulli.Unique = true;
                this.columnIDArtikulli.MaxLength = 100;
                this.columnEmri.MaxLength = 50;
                this.columnSasia.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsRow NewrptOrder_DetailsRow() {
                return ((rptOrder_DetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rptOrder_DetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rptOrder_DetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rptOrder_DetailsRowChanged != null)) {
                    this.rptOrder_DetailsRowChanged(this, new rptOrder_DetailsRowChangeEvent(((rptOrder_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rptOrder_DetailsRowChanging != null)) {
                    this.rptOrder_DetailsRowChanging(this, new rptOrder_DetailsRowChangeEvent(((rptOrder_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rptOrder_DetailsRowDeleted != null)) {
                    this.rptOrder_DetailsRowDeleted(this, new rptOrder_DetailsRowChangeEvent(((rptOrder_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rptOrder_DetailsRowDeleting != null)) {
                    this.rptOrder_DetailsRowDeleting(this, new rptOrder_DetailsRowChangeEvent(((rptOrder_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverptOrder_DetailsRow(rptOrder_DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyMobileDataSet ds = new MyMobileDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rptOrder_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AgjendetRow : global::System.Data.DataRow {
            
            private AgjendetDataTable tableAgjendet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AgjendetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgjendet = ((AgjendetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDAgjenti {
                get {
                    return ((string)(this[this.tableAgjendet.IDAgjentiColumn]));
                }
                set {
                    this[this.tableAgjendet.IDAgjentiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mbiemri {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.MbiemriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mbiemri\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.MbiemriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Perdoruesi {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.PerdoruesiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Perdoruesi\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.PerdoruesiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fjalekalimi {
                get {
                    return ((string)(this[this.tableAgjendet.FjalekalimiColumn]));
                }
                set {
                    this[this.tableAgjendet.FjalekalimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gjendja {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.GjendjaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gjendja\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.GjendjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depo {
                get {
                    return ((string)(this[this.tableAgjendet.DepoColumn]));
                }
                set {
                    this[this.tableAgjendet.DepoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableAgjendet.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AprovimFaturash {
                get {
                    try {
                        return ((bool)(this[this.tableAgjendet.AprovimFaturashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AprovimFaturash\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.AprovimFaturashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeAprovim {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.MeAprovimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeAprovim\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.MeAprovimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaAprovim {
                get {
                    try {
                        return ((string)(this[this.tableAgjendet.PaAprovimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaAprovim\' in table \'Agjendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgjendet.PaAprovimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableAgjendet.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableAgjendet.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMbiemriNull() {
                return this.IsNull(this.tableAgjendet.MbiemriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMbiemriNull() {
                this[this.tableAgjendet.MbiemriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerdoruesiNull() {
                return this.IsNull(this.tableAgjendet.PerdoruesiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerdoruesiNull() {
                this[this.tableAgjendet.PerdoruesiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGjendjaNull() {
                return this.IsNull(this.tableAgjendet.GjendjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGjendjaNull() {
                this[this.tableAgjendet.GjendjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tableAgjendet.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tableAgjendet.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableAgjendet.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableAgjendet.SyncStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAprovimFaturashNull() {
                return this.IsNull(this.tableAgjendet.AprovimFaturashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAprovimFaturashNull() {
                this[this.tableAgjendet.AprovimFaturashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeAprovimNull() {
                return this.IsNull(this.tableAgjendet.MeAprovimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeAprovimNull() {
                this[this.tableAgjendet.MeAprovimColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaAprovimNull() {
                return this.IsNull(this.tableAgjendet.PaAprovimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaAprovimNull() {
                this[this.tableAgjendet.PaAprovimColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FaturaRow : global::System.Data.DataRow {
            
            private FaturaDataTable tableFatura;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FaturaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFatura = ((FaturaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDFatura {
                get {
                    return ((global::System.Guid)(this[this.tableFatura.IDFaturaColumn]));
                }
                set {
                    this[this.tableFatura.IDFaturaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    return ((string)(this[this.tableFatura.DataColumn]));
                }
                set {
                    this[this.tableFatura.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ShumaTotale {
                get {
                    return ((double)(this[this.tableFatura.ShumaTotaleColumn]));
                }
                set {
                    this[this.tableFatura.ShumaTotaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDLiferimi {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableFatura.IDLiferimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLiferimi\' in table \'Fatura\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFatura.IDLiferimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    return ((string)(this[this.tableFatura.DeviceIDColumn]));
                }
                set {
                    this[this.tableFatura.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableFatura.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'Fatura\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFatura.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow LiferimiRow {
                get {
                    return ((LiferimiRow)(this.GetParentRow(this.Table.ParentRelations["FK_Fatura_Liferimi"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Fatura_Liferimi"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDLiferimiNull() {
                return this.IsNull(this.tableFatura.IDLiferimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDLiferimiNull() {
                this[this.tableFatura.IDLiferimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableFatura.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableFatura.SyncStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class KlientDheLokacionRow : global::System.Data.DataRow {
            
            private KlientDheLokacionDataTable tableKlientDheLokacion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KlientDheLokacionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKlientDheLokacion = ((KlientDheLokacionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlientDheLokacion {
                get {
                    return ((string)(this[this.tableKlientDheLokacion.IDKlientDheLokacionColumn]));
                }
                set {
                    this[this.tableKlientDheLokacion.IDKlientDheLokacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmriLokacionit {
                get {
                    return ((string)(this[this.tableKlientDheLokacion.EmriLokacionitColumn]));
                }
                set {
                    this[this.tableKlientDheLokacion.EmriLokacionitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adresa {
                get {
                    return ((string)(this[this.tableKlientDheLokacion.AdresaColumn]));
                }
                set {
                    this[this.tableKlientDheLokacion.AdresaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KontaktEmriMbiemri {
                get {
                    return ((string)(this[this.tableKlientDheLokacion.KontaktEmriMbiemriColumn]));
                }
                set {
                    this[this.tableKlientDheLokacion.KontaktEmriMbiemriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Tel_Mobil {
                get {
                    return ((string)(this[this.tableKlientDheLokacion._Tel_MobilColumn]));
                }
                set {
                    this[this.tableKlientDheLokacion._Tel_MobilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDVendi {
                get {
                    return ((string)(this[this.tableKlientDheLokacion.IDVendiColumn]));
                }
                set {
                    this[this.tableKlientDheLokacion.IDVendiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlienti {
                get {
                    try {
                        return ((string)(this[this.tableKlientDheLokacion.IDKlientiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDKlienti\' in table \'KlientDheLokacion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientDheLokacion.IDKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barkodi {
                get {
                    try {
                        return ((string)(this[this.tableKlientDheLokacion.BarkodiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Barkodi\' in table \'KlientDheLokacion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientDheLokacion.BarkodiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRow KlientetRow {
                get {
                    return ((KlientetRow)(this.GetParentRow(this.Table.ParentRelations["Klientet_KlientDheLokacion"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Klientet_KlientDheLokacion"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDKlientiNull() {
                return this.IsNull(this.tableKlientDheLokacion.IDKlientiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDKlientiNull() {
                this[this.tableKlientDheLokacion.IDKlientiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarkodiNull() {
                return this.IsNull(this.tableKlientDheLokacion.BarkodiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarkodiNull() {
                this[this.tableKlientDheLokacion.BarkodiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRow[] GetVizitatRows() {
                if ((this.Table.ChildRelations["KlientDheLokacion_Vizitat"] == null)) {
                    return new VizitatRow[0];
                }
                else {
                    return ((VizitatRow[])(base.GetChildRows(this.Table.ChildRelations["KlientDheLokacion_Vizitat"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class KlientetRow : global::System.Data.DataRow {
            
            private KlientetDataTable tableKlientet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KlientetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKlientet = ((KlientetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlienti {
                get {
                    return ((string)(this[this.tableKlientet.IDKlientiColumn]));
                }
                set {
                    this[this.tableKlientet.IDKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableKlientet.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'Klientet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientet.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailKontakt {
                get {
                    try {
                        return ((string)(this[this.tableKlientet.EmailKontaktColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmailKontakt\' in table \'Klientet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientet.EmailKontaktColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KontaktNumer {
                get {
                    try {
                        return ((string)(this[this.tableKlientet.KontaktNumerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KontaktNumer\' in table \'Klientet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientet.KontaktNumerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShkKlienti {
                get {
                    try {
                        return ((string)(this[this.tableKlientet.ShkKlientiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShkKlienti\' in table \'Klientet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientet.ShkKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrRabatet {
                get {
                    try {
                        return ((string)(this[this.tableKlientet.GrRabatetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrRabatet\' in table \'Klientet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientet.GrRabatetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrCmimoret {
                get {
                    try {
                        return ((string)(this[this.tableKlientet.GrCmimoretColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrCmimoret\' in table \'Klientet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKlientet.GrCmimoretColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableKlientet.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableKlientet.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailKontaktNull() {
                return this.IsNull(this.tableKlientet.EmailKontaktColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailKontaktNull() {
                this[this.tableKlientet.EmailKontaktColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKontaktNumerNull() {
                return this.IsNull(this.tableKlientet.KontaktNumerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKontaktNumerNull() {
                this[this.tableKlientet.KontaktNumerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShkKlientiNull() {
                return this.IsNull(this.tableKlientet.ShkKlientiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShkKlientiNull() {
                this[this.tableKlientet.ShkKlientiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrRabatetNull() {
                return this.IsNull(this.tableKlientet.GrRabatetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrRabatetNull() {
                this[this.tableKlientet.GrRabatetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrCmimoretNull() {
                return this.IsNull(this.tableKlientet.GrCmimoretColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrCmimoretNull() {
                this[this.tableKlientet.GrCmimoretColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow[] GetKlientDheLokacionRows() {
                if ((this.Table.ChildRelations["Klientet_KlientDheLokacion"] == null)) {
                    return new KlientDheLokacionRow[0];
                }
                else {
                    return ((KlientDheLokacionRow[])(base.GetChildRows(this.Table.ChildRelations["Klientet_KlientDheLokacion"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class KonfigurimiRow : global::System.Data.DataRow {
            
            private KonfigurimiDataTable tableKonfigurimi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KonfigurimiRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKonfigurimi = ((KonfigurimiDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    return ((string)(this[this.tableKonfigurimi.DeviceIDColumn]));
                }
                set {
                    this[this.tableKonfigurimi.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDAgent {
                get {
                    return ((string)(this[this.tableKonfigurimi.IDAgentColumn]));
                }
                set {
                    this[this.tableKonfigurimi.IDAgentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GetPayment {
                get {
                    try {
                        return ((bool)(this[this.tableKonfigurimi.GetPaymentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GetPayment\' in table \'Konfigurimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKonfigurimi.GetPaymentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PrintBill {
                get {
                    try {
                        return ((bool)(this[this.tableKonfigurimi.PrintBillColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrintBill\' in table \'Konfigurimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKonfigurimi.PrintBillColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplicationMode {
                get {
                    try {
                        return ((string)(this[this.tableKonfigurimi.ApplicationModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApplicationMode\' in table \'Konfigurimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKonfigurimi.ApplicationModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depo {
                get {
                    try {
                        return ((string)(this[this.tableKonfigurimi.DepoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depo\' in table \'Konfigurimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKonfigurimi.DepoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGetPaymentNull() {
                return this.IsNull(this.tableKonfigurimi.GetPaymentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGetPaymentNull() {
                this[this.tableKonfigurimi.GetPaymentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintBillNull() {
                return this.IsNull(this.tableKonfigurimi.PrintBillColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintBillNull() {
                this[this.tableKonfigurimi.PrintBillColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplicationModeNull() {
                return this.IsNull(this.tableKonfigurimi.ApplicationModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplicationModeNull() {
                this[this.tableKonfigurimi.ApplicationModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepoNull() {
                return this.IsNull(this.tableKonfigurimi.DepoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepoNull() {
                this[this.tableKonfigurimi.DepoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LiferimiRow : global::System.Data.DataRow {
            
            private LiferimiDataTable tableLiferimi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LiferimiRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLiferimi = ((LiferimiDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDLiferimi {
                get {
                    return ((global::System.Guid)(this[this.tableLiferimi.IDLiferimiColumn]));
                }
                set {
                    this[this.tableLiferimi.IDLiferimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataLiferuar {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLiferimi.DataLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataLiferuar\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.DataLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime KohaLiferuar {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLiferimi.KohaLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KohaLiferuar\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.KohaLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitulliLiferimit {
                get {
                    try {
                        return ((string)(this[this.tableLiferimi.TitulliLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TitulliLiferimit\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.TitulliLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataLiferimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLiferimi.DataLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataLiferimit\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.DataLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime KohaLiferimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLiferimi.KohaLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KohaLiferimit\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.KohaLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDPorosia {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableLiferimi.IDPorosiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDPorosia\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.IDPorosiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Liferuar {
                get {
                    return ((byte)(this[this.tableLiferimi.LiferuarColumn]));
                }
                set {
                    this[this.tableLiferimi.LiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrLiferimit {
                get {
                    try {
                        return ((string)(this[this.tableLiferimi.NrLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrLiferimit\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.NrLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiTotal {
                get {
                    try {
                        return ((float)(this[this.tableLiferimi.CmimiTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiTotal\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.CmimiTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tableLiferimi.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    return ((int)(this[this.tableLiferimi.SyncStatusColumn]));
                }
                set {
                    this[this.tableLiferimi.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ShumaPaguar {
                get {
                    try {
                        return ((float)(this[this.tableLiferimi.ShumaPaguarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShumaPaguar\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.ShumaPaguarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Aprovuar {
                get {
                    try {
                        return ((bool)(this[this.tableLiferimi.AprovuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Aprovuar\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.AprovuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LLOJDOK {
                get {
                    try {
                        return ((string)(this[this.tableLiferimi.LLOJDOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LLOJDOK\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.LLOJDOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrFatures {
                get {
                    try {
                        return ((string)(this[this.tableLiferimi.NrFaturesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrFatures\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.NrFaturesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayType {
                get {
                    try {
                        return ((string)(this[this.tableLiferimi.PayTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayType\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.PayTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotaliPaTVSH {
                get {
                    try {
                        return ((float)(this[this.tableLiferimi.TotaliPaTVSHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotaliPaTVSH\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.TotaliPaTVSHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NrDetalet {
                get {
                    try {
                        return ((int)(this[this.tableLiferimi.NrDetaletColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrDetalet\' in table \'Liferimi\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimi.NrDetaletColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataLiferuarNull() {
                return this.IsNull(this.tableLiferimi.DataLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataLiferuarNull() {
                this[this.tableLiferimi.DataLiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKohaLiferuarNull() {
                return this.IsNull(this.tableLiferimi.KohaLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKohaLiferuarNull() {
                this[this.tableLiferimi.KohaLiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitulliLiferimitNull() {
                return this.IsNull(this.tableLiferimi.TitulliLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitulliLiferimitNull() {
                this[this.tableLiferimi.TitulliLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataLiferimitNull() {
                return this.IsNull(this.tableLiferimi.DataLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataLiferimitNull() {
                this[this.tableLiferimi.DataLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKohaLiferimitNull() {
                return this.IsNull(this.tableLiferimi.KohaLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKohaLiferimitNull() {
                this[this.tableLiferimi.KohaLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDPorosiaNull() {
                return this.IsNull(this.tableLiferimi.IDPorosiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDPorosiaNull() {
                this[this.tableLiferimi.IDPorosiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrLiferimitNull() {
                return this.IsNull(this.tableLiferimi.NrLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrLiferimitNull() {
                this[this.tableLiferimi.NrLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiTotalNull() {
                return this.IsNull(this.tableLiferimi.CmimiTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiTotalNull() {
                this[this.tableLiferimi.CmimiTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tableLiferimi.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tableLiferimi.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShumaPaguarNull() {
                return this.IsNull(this.tableLiferimi.ShumaPaguarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShumaPaguarNull() {
                this[this.tableLiferimi.ShumaPaguarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAprovuarNull() {
                return this.IsNull(this.tableLiferimi.AprovuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAprovuarNull() {
                this[this.tableLiferimi.AprovuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLLOJDOKNull() {
                return this.IsNull(this.tableLiferimi.LLOJDOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLLOJDOKNull() {
                this[this.tableLiferimi.LLOJDOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrFaturesNull() {
                return this.IsNull(this.tableLiferimi.NrFaturesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrFaturesNull() {
                this[this.tableLiferimi.NrFaturesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayTypeNull() {
                return this.IsNull(this.tableLiferimi.PayTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayTypeNull() {
                this[this.tableLiferimi.PayTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotaliPaTVSHNull() {
                return this.IsNull(this.tableLiferimi.TotaliPaTVSHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotaliPaTVSHNull() {
                this[this.tableLiferimi.TotaliPaTVSHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrDetaletNull() {
                return this.IsNull(this.tableLiferimi.NrDetaletColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrDetaletNull() {
                this[this.tableLiferimi.NrDetaletColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtRow[] GetLiferimiArtRows() {
                if ((this.Table.ChildRelations["FK_LiferimiArt_Liferimi"] == null)) {
                    return new LiferimiArtRow[0];
                }
                else {
                    return ((LiferimiArtRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LiferimiArt_Liferimi"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRow[] GetFaturaRows() {
                if ((this.Table.ChildRelations["FK_Fatura_Liferimi"] == null)) {
                    return new FaturaRow[0];
                }
                else {
                    return ((FaturaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Fatura_Liferimi"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LiferimiArtRow : global::System.Data.DataRow {
            
            private LiferimiArtDataTable tableLiferimiArt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LiferimiArtRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLiferimiArt = ((LiferimiArtDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDLiferimi {
                get {
                    return ((global::System.Guid)(this[this.tableLiferimiArt.IDLiferimiColumn]));
                }
                set {
                    this[this.tableLiferimiArt.IDLiferimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    return ((string)(this[this.tableLiferimiArt.IDArtikulliColumn]));
                }
                set {
                    this[this.tableLiferimiArt.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Cmimi {
                get {
                    try {
                        return ((float)(this[this.tableLiferimiArt.CmimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cmimi\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.CmimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SasiaLiferuar {
                get {
                    try {
                        return ((double)(this[this.tableLiferimiArt.SasiaLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaLiferuar\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.SasiaLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SasiaPorositur {
                get {
                    try {
                        return ((double)(this[this.tableLiferimiArt.SasiaPorositurColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaPorositur\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.SasiaPorositurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtEmri {
                get {
                    try {
                        return ((string)(this[this.tableLiferimiArt.ArtEmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArtEmri\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.ArtEmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Totali {
                get {
                    try {
                        return ((float)(this[this.tableLiferimiArt.TotaliColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Totali\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.TotaliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tableLiferimiArt.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Gratis {
                get {
                    try {
                        return ((double)(this[this.tableLiferimiArt.GratisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gratis\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.GratisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    return ((int)(this[this.tableLiferimiArt.SyncStatusColumn]));
                }
                set {
                    this[this.tableLiferimiArt.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDArsyeja {
                get {
                    try {
                        return ((int)(this[this.tableLiferimiArt.IDArsyejaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDArsyeja\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.IDArsyejaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiPaTVSH {
                get {
                    try {
                        return ((float)(this[this.tableLiferimiArt.CmimiPaTVSHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiPaTVSH\' in table \'LiferimiArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLiferimiArt.CmimiPaTVSHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seri {
                get {
                    return ((string)(this[this.tableLiferimiArt.SeriColumn]));
                }
                set {
                    this[this.tableLiferimiArt.SeriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow LiferimiRow {
                get {
                    return ((LiferimiRow)(this.GetParentRow(this.Table.ParentRelations["FK_LiferimiArt_Liferimi"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LiferimiArt_Liferimi"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiNull() {
                return this.IsNull(this.tableLiferimiArt.CmimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiNull() {
                this[this.tableLiferimiArt.CmimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaLiferuarNull() {
                return this.IsNull(this.tableLiferimiArt.SasiaLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaLiferuarNull() {
                this[this.tableLiferimiArt.SasiaLiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaPorositurNull() {
                return this.IsNull(this.tableLiferimiArt.SasiaPorositurColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaPorositurNull() {
                this[this.tableLiferimiArt.SasiaPorositurColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtEmriNull() {
                return this.IsNull(this.tableLiferimiArt.ArtEmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtEmriNull() {
                this[this.tableLiferimiArt.ArtEmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotaliNull() {
                return this.IsNull(this.tableLiferimiArt.TotaliColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotaliNull() {
                this[this.tableLiferimiArt.TotaliColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tableLiferimiArt.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tableLiferimiArt.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGratisNull() {
                return this.IsNull(this.tableLiferimiArt.GratisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGratisNull() {
                this[this.tableLiferimiArt.GratisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDArsyejaNull() {
                return this.IsNull(this.tableLiferimiArt.IDArsyejaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDArsyejaNull() {
                this[this.tableLiferimiArt.IDArsyejaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiPaTVSHNull() {
                return this.IsNull(this.tableLiferimiArt.CmimiPaTVSHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiPaTVSHNull() {
                this[this.tableLiferimiArt.CmimiPaTVSHColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NumerimInternRow : global::System.Data.DataRow {
            
            private NumerimInternDataTable tableNumerimIntern;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NumerimInternRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNumerimIntern = ((NumerimInternDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDN {
                get {
                    return ((int)(this[this.tableNumerimIntern.IDNColumn]));
                }
                set {
                    this[this.tableNumerimIntern.IDNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    return ((string)(this[this.tableNumerimIntern.DeviceIDColumn]));
                }
                set {
                    this[this.tableNumerimIntern.DeviceIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PorosiaArtRow : global::System.Data.DataRow {
            
            private PorosiaArtDataTable tablePorosiaArt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PorosiaArtRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePorosiaArt = ((PorosiaArtDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    return ((string)(this[this.tablePorosiaArt.IDArtikulliColumn]));
                }
                set {
                    this[this.tablePorosiaArt.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SasiaPorositur {
                get {
                    try {
                        return ((double)(this[this.tablePorosiaArt.SasiaPorositurColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaPorositur\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.SasiaPorositurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiAktual {
                get {
                    try {
                        return ((float)(this[this.tablePorosiaArt.CmimiAktualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiAktual\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.CmimiAktualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Rabatet {
                get {
                    try {
                        return ((float)(this[this.tablePorosiaArt.RabatetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rabatet\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.RabatetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDPorosia {
                get {
                    return ((global::System.Guid)(this[this.tablePorosiaArt.IDPorosiaColumn]));
                }
                set {
                    this[this.tablePorosiaArt.IDPorosiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SasiLiferuar {
                get {
                    try {
                        return ((double)(this[this.tablePorosiaArt.SasiLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiLiferuar\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.SasiLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tablePorosiaArt.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Gratis {
                get {
                    try {
                        return ((double)(this[this.tablePorosiaArt.GratisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gratis\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.GratisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SasiaPako {
                get {
                    try {
                        return ((double)(this[this.tablePorosiaArt.SasiaPakoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaPako\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.SasiaPakoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tablePorosiaArt.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    return ((int)(this[this.tablePorosiaArt.SyncStatusColumn]));
                }
                set {
                    this[this.tablePorosiaArt.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NrRendor {
                get {
                    try {
                        return ((int)(this[this.tablePorosiaArt.NrRendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrRendor\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.NrRendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ShumaTotale {
                get {
                    try {
                        return ((decimal)(this[this.tablePorosiaArt.ShumaTotaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShumaTotale\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.ShumaTotaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDArsyeja {
                get {
                    try {
                        return ((int)(this[this.tablePorosiaArt.IDArsyejaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDArsyeja\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.IDArsyejaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiPaTVSH {
                get {
                    try {
                        return ((float)(this[this.tablePorosiaArt.CmimiPaTVSHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiPaTVSH\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.CmimiPaTVSHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUM {
                get {
                    try {
                        return ((string)(this[this.tablePorosiaArt.BUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUM\' in table \'PorosiaArt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosiaArt.BUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seri {
                get {
                    return ((string)(this[this.tablePorosiaArt.SeriColumn]));
                }
                set {
                    this[this.tablePorosiaArt.SeriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaPorositurNull() {
                return this.IsNull(this.tablePorosiaArt.SasiaPorositurColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaPorositurNull() {
                this[this.tablePorosiaArt.SasiaPorositurColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiAktualNull() {
                return this.IsNull(this.tablePorosiaArt.CmimiAktualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiAktualNull() {
                this[this.tablePorosiaArt.CmimiAktualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRabatetNull() {
                return this.IsNull(this.tablePorosiaArt.RabatetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRabatetNull() {
                this[this.tablePorosiaArt.RabatetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiLiferuarNull() {
                return this.IsNull(this.tablePorosiaArt.SasiLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiLiferuarNull() {
                this[this.tablePorosiaArt.SasiLiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tablePorosiaArt.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tablePorosiaArt.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGratisNull() {
                return this.IsNull(this.tablePorosiaArt.GratisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGratisNull() {
                this[this.tablePorosiaArt.GratisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaPakoNull() {
                return this.IsNull(this.tablePorosiaArt.SasiaPakoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaPakoNull() {
                this[this.tablePorosiaArt.SasiaPakoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tablePorosiaArt.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tablePorosiaArt.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrRendorNull() {
                return this.IsNull(this.tablePorosiaArt.NrRendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrRendorNull() {
                this[this.tablePorosiaArt.NrRendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShumaTotaleNull() {
                return this.IsNull(this.tablePorosiaArt.ShumaTotaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShumaTotaleNull() {
                this[this.tablePorosiaArt.ShumaTotaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDArsyejaNull() {
                return this.IsNull(this.tablePorosiaArt.IDArsyejaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDArsyejaNull() {
                this[this.tablePorosiaArt.IDArsyejaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiPaTVSHNull() {
                return this.IsNull(this.tablePorosiaArt.CmimiPaTVSHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiPaTVSHNull() {
                this[this.tablePorosiaArt.CmimiPaTVSHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUMNull() {
                return this.IsNull(this.tablePorosiaArt.BUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUMNull() {
                this[this.tablePorosiaArt.BUMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PorositeRow : global::System.Data.DataRow {
            
            private PorositeDataTable tablePorosite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PorositeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePorosite = ((PorositeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDVizita {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tablePorosite.IDVizitaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDVizita\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.IDVizitaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitulliPorosise {
                get {
                    try {
                        return ((string)(this[this.tablePorosite.TitulliPorosiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TitulliPorosise\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.TitulliPorosiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataPerLiferim {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePorosite.DataPerLiferimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataPerLiferim\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.DataPerLiferimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDPorosia {
                get {
                    return ((global::System.Guid)(this[this.tablePorosite.IDPorosiaColumn]));
                }
                set {
                    this[this.tablePorosite.IDPorosiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataPorosise {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePorosite.DataPorosiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataPorosise\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.DataPorosiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OraPorosise {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePorosite.OraPorosiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OraPorosise\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.OraPorosiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte StatusiPorosise {
                get {
                    try {
                        return ((byte)(this[this.tablePorosite.StatusiPorosiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusiPorosise\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.StatusiPorosiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrPorosise {
                get {
                    try {
                        return ((string)(this[this.tablePorosite.NrPorosiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrPorosise\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.NrPorosiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tablePorosite.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'Porosite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePorosite.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    return ((int)(this[this.tablePorosite.SyncStatusColumn]));
                }
                set {
                    this[this.tablePorosite.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDVizitaNull() {
                return this.IsNull(this.tablePorosite.IDVizitaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDVizitaNull() {
                this[this.tablePorosite.IDVizitaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitulliPorosiseNull() {
                return this.IsNull(this.tablePorosite.TitulliPorosiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitulliPorosiseNull() {
                this[this.tablePorosite.TitulliPorosiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataPerLiferimNull() {
                return this.IsNull(this.tablePorosite.DataPerLiferimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataPerLiferimNull() {
                this[this.tablePorosite.DataPerLiferimColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataPorosiseNull() {
                return this.IsNull(this.tablePorosite.DataPorosiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataPorosiseNull() {
                this[this.tablePorosite.DataPorosiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOraPorosiseNull() {
                return this.IsNull(this.tablePorosite.OraPorosiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOraPorosiseNull() {
                this[this.tablePorosite.OraPorosiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusiPorosiseNull() {
                return this.IsNull(this.tablePorosite.StatusiPorosiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusiPorosiseNull() {
                this[this.tablePorosite.StatusiPorosiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrPorosiseNull() {
                return this.IsNull(this.tablePorosite.NrPorosiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrPorosiseNull() {
                this[this.tablePorosite.NrPorosiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tablePorosite.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tablePorosite.DeviceIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PriceGroupRow : global::System.Data.DataRow {
            
            private PriceGroupDataTable tablePriceGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PriceGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePriceGroup = ((PriceGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    return ((string)(this[this.tablePriceGroup.CodeColumn]));
                }
                set {
                    this[this.tablePriceGroup.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PriceIncludesVAT {
                get {
                    return ((byte)(this[this.tablePriceGroup.PriceIncludesVATColumn]));
                }
                set {
                    this[this.tablePriceGroup.PriceIncludesVATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AllowInvoiceDisc_ {
                get {
                    return ((byte)(this[this.tablePriceGroup.AllowInvoiceDisc_Column]));
                }
                set {
                    this[this.tablePriceGroup.AllowInvoiceDisc_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _VATBus_PostingGr__Price_ {
                get {
                    return ((string)(this[this.tablePriceGroup._VATBus_PostingGr__Price_Column]));
                }
                set {
                    this[this.tablePriceGroup._VATBus_PostingGr__Price_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tablePriceGroup.DescriptionColumn]));
                }
                set {
                    this[this.tablePriceGroup.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Allow_Line_Disc_ {
                get {
                    return ((byte)(this[this.tablePriceGroup.Allow_Line_Disc_Column]));
                }
                set {
                    this[this.tablePriceGroup.Allow_Line_Disc_Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RabatetRow : global::System.Data.DataRow {
            
            private RabatetDataTable tableRabatet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RabatetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRabatet = ((RabatetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDRabat {
                get {
                    return ((int)(this[this.tableRabatet.IDRabatColumn]));
                }
                set {
                    this[this.tableRabatet.IDRabatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrRabatet {
                get {
                    try {
                        return ((string)(this[this.tableRabatet.GrRabatetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrRabatet\' in table \'Rabatet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRabatet.GrRabatetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    return ((string)(this[this.tableRabatet.IDArtikulliColumn]));
                }
                set {
                    this[this.tableRabatet.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Rabatet {
                get {
                    try {
                        return ((float)(this[this.tableRabatet.RabatetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rabatet\' in table \'Rabatet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRabatet.RabatetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CopGratis {
                get {
                    try {
                        return ((int)(this[this.tableRabatet.CopGratisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CopGratis\' in table \'Rabatet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRabatet.CopGratisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrRabatetNull() {
                return this.IsNull(this.tableRabatet.GrRabatetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrRabatetNull() {
                this[this.tableRabatet.GrRabatetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRabatetNull() {
                return this.IsNull(this.tableRabatet.RabatetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRabatetNull() {
                this[this.tableRabatet.RabatetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopGratisNull() {
                return this.IsNull(this.tableRabatet.CopGratisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopGratisNull() {
                this[this.tableRabatet.CopGratisColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SalesPriceRow : global::System.Data.DataRow {
            
            private SalesPriceDataTable tableSalesPrice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesPriceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesPrice = ((SalesPriceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemNo_ {
                get {
                    return ((string)(this[this.tableSalesPrice.ItemNo_Column]));
                }
                set {
                    this[this.tableSalesPrice.ItemNo_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SalesType {
                get {
                    return ((int)(this[this.tableSalesPrice.SalesTypeColumn]));
                }
                set {
                    this[this.tableSalesPrice.SalesTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesCode {
                get {
                    return ((string)(this[this.tableSalesPrice.SalesCodeColumn]));
                }
                set {
                    this[this.tableSalesPrice.SalesCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartingDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSalesPrice.StartingDateColumn]));
                }
                set {
                    this[this.tableSalesPrice.StartingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyCode {
                get {
                    return ((string)(this[this.tableSalesPrice.CurrencyCodeColumn]));
                }
                set {
                    this[this.tableSalesPrice.CurrencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VariantCode {
                get {
                    return ((string)(this[this.tableSalesPrice.VariantCodeColumn]));
                }
                set {
                    this[this.tableSalesPrice.VariantCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitofMeasureCode {
                get {
                    return ((string)(this[this.tableSalesPrice.UnitofMeasureCodeColumn]));
                }
                set {
                    this[this.tableSalesPrice.UnitofMeasureCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MinimumQuantity {
                get {
                    return ((double)(this[this.tableSalesPrice.MinimumQuantityColumn]));
                }
                set {
                    this[this.tableSalesPrice.MinimumQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UnitPrice {
                get {
                    return ((double)(this[this.tableSalesPrice.UnitPriceColumn]));
                }
                set {
                    this[this.tableSalesPrice.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PriceIncludesVAT {
                get {
                    return ((byte)(this[this.tableSalesPrice.PriceIncludesVATColumn]));
                }
                set {
                    this[this.tableSalesPrice.PriceIncludesVATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AllowInvoiceDisc_ {
                get {
                    return ((byte)(this[this.tableSalesPrice.AllowInvoiceDisc_Column]));
                }
                set {
                    this[this.tableSalesPrice.AllowInvoiceDisc_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _VATBus_PostingGr__Price_ {
                get {
                    return ((string)(this[this.tableSalesPrice._VATBus_PostingGr__Price_Column]));
                }
                set {
                    this[this.tableSalesPrice._VATBus_PostingGr__Price_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndingDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSalesPrice.EndingDateColumn]));
                }
                set {
                    this[this.tableSalesPrice.EndingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AllowLineDisc_ {
                get {
                    return ((byte)(this[this.tableSalesPrice.AllowLineDisc_Column]));
                }
                set {
                    this[this.tableSalesPrice.AllowLineDisc_Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StatusiVizitesRow : global::System.Data.DataRow {
            
            private StatusiVizitesDataTable tableStatusiVizites;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatusiVizitesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStatusiVizites = ((StatusiVizitesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDStatusiVizites {
                get {
                    return ((string)(this[this.tableStatusiVizites.IDStatusiVizitesColumn]));
                }
                set {
                    this[this.tableStatusiVizites.IDStatusiVizitesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gjendja {
                get {
                    try {
                        return ((string)(this[this.tableStatusiVizites.GjendjaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gjendja\' in table \'StatusiVizites\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusiVizites.GjendjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGjendjaNull() {
                return this.IsNull(this.tableStatusiVizites.GjendjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGjendjaNull() {
                this[this.tableStatusiVizites.GjendjaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StoqetRow : global::System.Data.DataRow {
            
            private StoqetDataTable tableStoqet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoqetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoqet = ((StoqetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shifra {
                get {
                    return ((string)(this[this.tableStoqet.ShifraColumn]));
                }
                set {
                    this[this.tableStoqet.ShifraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depo {
                get {
                    return ((string)(this[this.tableStoqet.DepoColumn]));
                }
                set {
                    this[this.tableStoqet.DepoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NjesiaMatse {
                get {
                    try {
                        return ((string)(this[this.tableStoqet.NjesiaMatseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NjesiaMatse\' in table \'Stoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoqet.NjesiaMatseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Paketimi {
                get {
                    try {
                        return ((double)(this[this.tableStoqet.PaketimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Paketimi\' in table \'Stoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoqet.PaketimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sasia {
                get {
                    return ((double)(this[this.tableStoqet.SasiaColumn]));
                }
                set {
                    this[this.tableStoqet.SasiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Paketa {
                get {
                    try {
                        return ((double)(this[this.tableStoqet.PaketaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Paketa\' in table \'Stoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoqet.PaketaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableStoqet.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'Stoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoqet.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seri {
                get {
                    try {
                        return ((string)(this[this.tableStoqet.SeriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Seri\' in table \'Stoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoqet.SeriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNjesiaMatseNull() {
                return this.IsNull(this.tableStoqet.NjesiaMatseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNjesiaMatseNull() {
                this[this.tableStoqet.NjesiaMatseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaketimiNull() {
                return this.IsNull(this.tableStoqet.PaketimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaketimiNull() {
                this[this.tableStoqet.PaketimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaketaNull() {
                return this.IsNull(this.tableStoqet.PaketaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaketaNull() {
                this[this.tableStoqet.PaketaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableStoqet.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableStoqet.SyncStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriNull() {
                return this.IsNull(this.tableStoqet.SeriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriNull() {
                this[this.tableStoqet.SeriColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SyncConfigurationRow : global::System.Data.DataRow {
            
            private SyncConfigurationDataTable tableSyncConfiguration;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SyncConfigurationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSyncConfiguration = ((SyncConfigurationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableSyncConfiguration.IDColumn]));
                }
                set {
                    this[this.tableSyncConfiguration.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    try {
                        return ((string)(this[this.tableSyncConfiguration.TableNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TableName\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncDirection {
                get {
                    try {
                        return ((int)(this[this.tableSyncConfiguration.SyncDirectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncDirection\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.SyncDirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncDay {
                get {
                    try {
                        return ((int)(this[this.tableSyncConfiguration.SyncDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncDay\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.SyncDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncOrder {
                get {
                    try {
                        return ((int)(this[this.tableSyncConfiguration.SyncOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncOrder\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.SyncOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilterUp {
                get {
                    try {
                        return ((string)(this[this.tableSyncConfiguration.FilterUpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilterUp\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.FilterUpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilterDwn {
                get {
                    try {
                        return ((string)(this[this.tableSyncConfiguration.FilterDwnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilterDwn\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.FilterDwnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PK_FieldName {
                get {
                    try {
                        return ((string)(this[this.tableSyncConfiguration.PK_FieldNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PK_FieldName\' in table \'SyncConfiguration\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncConfiguration.PK_FieldNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTableNameNull() {
                return this.IsNull(this.tableSyncConfiguration.TableNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTableNameNull() {
                this[this.tableSyncConfiguration.TableNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncDirectionNull() {
                return this.IsNull(this.tableSyncConfiguration.SyncDirectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncDirectionNull() {
                this[this.tableSyncConfiguration.SyncDirectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncDayNull() {
                return this.IsNull(this.tableSyncConfiguration.SyncDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncDayNull() {
                this[this.tableSyncConfiguration.SyncDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncOrderNull() {
                return this.IsNull(this.tableSyncConfiguration.SyncOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncOrderNull() {
                this[this.tableSyncConfiguration.SyncOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterUpNull() {
                return this.IsNull(this.tableSyncConfiguration.FilterUpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterUpNull() {
                this[this.tableSyncConfiguration.FilterUpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterDwnNull() {
                return this.IsNull(this.tableSyncConfiguration.FilterDwnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterDwnNull() {
                this[this.tableSyncConfiguration.FilterDwnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPK_FieldNameNull() {
                return this.IsNull(this.tableSyncConfiguration.PK_FieldNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPK_FieldNameNull() {
                this[this.tableSyncConfiguration.PK_FieldNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class VendetRow : global::System.Data.DataRow {
            
            private VendetDataTable tableVendet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VendetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVendet = ((VendetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDVendi {
                get {
                    return ((int)(this[this.tableVendet.IDVendiColumn]));
                }
                set {
                    this[this.tableVendet.IDVendiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrPostal {
                get {
                    try {
                        return ((string)(this[this.tableVendet.NrPostalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrPostal\' in table \'Vendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendet.NrPostalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qyteti {
                get {
                    try {
                        return ((string)(this[this.tableVendet.QytetiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qyteti\' in table \'Vendet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVendet.QytetiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrPostalNull() {
                return this.IsNull(this.tableVendet.NrPostalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrPostalNull() {
                this[this.tableVendet.NrPostalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQytetiNull() {
                return this.IsNull(this.tableVendet.QytetiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQytetiNull() {
                this[this.tableVendet.QytetiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class VizitatRow : global::System.Data.DataRow {
            
            private VizitatDataTable tableVizitat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VizitatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVizitat = ((VizitatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDVizita {
                get {
                    return ((global::System.Guid)(this[this.tableVizitat.IDVizitaColumn]));
                }
                set {
                    this[this.tableVizitat.IDVizitaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataPlanifikimit {
                get {
                    return ((global::System.DateTime)(this[this.tableVizitat.DataPlanifikimitColumn]));
                }
                set {
                    this[this.tableVizitat.DataPlanifikimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OraPlanifikimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVizitat.OraPlanifikimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OraPlanifikimit\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.OraPlanifikimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataAritjes {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVizitat.DataAritjesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataAritjes\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.DataAritjesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OraArritjes {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVizitat.OraArritjesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OraArritjes\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.OraArritjesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataRealizimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVizitat.DataRealizimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataRealizimit\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.DataRealizimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OraRealizimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVizitat.OraRealizimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OraRealizimit\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.OraRealizimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDAgjenti {
                get {
                    return ((string)(this[this.tableVizitat.IDAgjentiColumn]));
                }
                set {
                    this[this.tableVizitat.IDAgjentiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NrRendor {
                get {
                    try {
                        return ((int)(this[this.tableVizitat.NrRendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrRendor\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.NrRendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDStatusiVizites {
                get {
                    return ((string)(this[this.tableVizitat.IDStatusiVizitesColumn]));
                }
                set {
                    this[this.tableVizitat.IDStatusiVizitesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlientDheLokacion {
                get {
                    return ((string)(this[this.tableVizitat.IDKlientDheLokacionColumn]));
                }
                set {
                    this[this.tableVizitat.IDKlientDheLokacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MenyraVizites {
                get {
                    try {
                        return ((int)(this[this.tableVizitat.MenyraVizitesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenyraVizites\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.MenyraVizitesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Komenti {
                get {
                    try {
                        return ((string)(this[this.tableVizitat.KomentiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Komenti\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.KomentiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tableVizitat.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableVizitat.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'Vizitat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVizitat.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow KlientDheLokacionRow {
                get {
                    return ((KlientDheLokacionRow)(this.GetParentRow(this.Table.ParentRelations["KlientDheLokacion_Vizitat"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KlientDheLokacion_Vizitat"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOraPlanifikimitNull() {
                return this.IsNull(this.tableVizitat.OraPlanifikimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOraPlanifikimitNull() {
                this[this.tableVizitat.OraPlanifikimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataAritjesNull() {
                return this.IsNull(this.tableVizitat.DataAritjesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataAritjesNull() {
                this[this.tableVizitat.DataAritjesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOraArritjesNull() {
                return this.IsNull(this.tableVizitat.OraArritjesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOraArritjesNull() {
                this[this.tableVizitat.OraArritjesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataRealizimitNull() {
                return this.IsNull(this.tableVizitat.DataRealizimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataRealizimitNull() {
                this[this.tableVizitat.DataRealizimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOraRealizimitNull() {
                return this.IsNull(this.tableVizitat.OraRealizimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOraRealizimitNull() {
                this[this.tableVizitat.OraRealizimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrRendorNull() {
                return this.IsNull(this.tableVizitat.NrRendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrRendorNull() {
                this[this.tableVizitat.NrRendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenyraVizitesNull() {
                return this.IsNull(this.tableVizitat.MenyraVizitesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenyraVizitesNull() {
                this[this.tableVizitat.MenyraVizitesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKomentiNull() {
                return this.IsNull(this.tableVizitat.KomentiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKomentiNull() {
                this[this.tableVizitat.KomentiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tableVizitat.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tableVizitat.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableVizitat.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableVizitat.SyncStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ListaLiferimeveRow : global::System.Data.DataRow {
            
            private ListaLiferimeveDataTable tableListaLiferimeve;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaLiferimeveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListaLiferimeve = ((ListaLiferimeveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shifra {
                get {
                    try {
                        return ((string)(this[this.tableListaLiferimeve.ShifraColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shifra\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.ShifraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableListaLiferimeve.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiNjesi {
                get {
                    try {
                        return ((float)(this[this.tableListaLiferimeve.CmimiNjesiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiNjesi\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.CmimiNjesiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SasiaPorositur {
                get {
                    try {
                        return ((int)(this[this.tableListaLiferimeve.SasiaPorositurColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaPorositur\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.SasiaPorositurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDPorosia {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableListaLiferimeve.IDPorosiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDPorosia\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.IDPorosiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    try {
                        return ((string)(this[this.tableListaLiferimeve.IDArtikulliColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDArtikulli\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SasiLiferuar {
                get {
                    try {
                        return ((int)(this[this.tableListaLiferimeve.SasiLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiLiferuar\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.SasiLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitulliLiferimit {
                get {
                    try {
                        return ((string)(this[this.tableListaLiferimeve.TitulliLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TitulliLiferimit\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.TitulliLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataLiferimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListaLiferimeve.DataLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataLiferimit\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.DataLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime KohaLiferimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListaLiferimeve.KohaLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KohaLiferimit\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.KohaLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmriLokacionit {
                get {
                    try {
                        return ((string)(this[this.tableListaLiferimeve.EmriLokacionitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmriLokacionit\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.EmriLokacionitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Liferuar {
                get {
                    try {
                        return ((byte)(this[this.tableListaLiferimeve.LiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Liferuar\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.LiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDLiferimi {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableListaLiferimeve.IDLiferimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLiferimi\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.IDLiferimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StokuAktual {
                get {
                    try {
                        return ((int)(this[this.tableListaLiferimeve.StokuAktualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StokuAktual\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.StokuAktualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataLiferuar {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListaLiferimeve.DataLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataLiferuar\' in table \'ListaLiferimeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaLiferimeve.DataLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShifraNull() {
                return this.IsNull(this.tableListaLiferimeve.ShifraColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShifraNull() {
                this[this.tableListaLiferimeve.ShifraColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableListaLiferimeve.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableListaLiferimeve.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiNjesiNull() {
                return this.IsNull(this.tableListaLiferimeve.CmimiNjesiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiNjesiNull() {
                this[this.tableListaLiferimeve.CmimiNjesiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaPorositurNull() {
                return this.IsNull(this.tableListaLiferimeve.SasiaPorositurColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaPorositurNull() {
                this[this.tableListaLiferimeve.SasiaPorositurColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDPorosiaNull() {
                return this.IsNull(this.tableListaLiferimeve.IDPorosiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDPorosiaNull() {
                this[this.tableListaLiferimeve.IDPorosiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDArtikulliNull() {
                return this.IsNull(this.tableListaLiferimeve.IDArtikulliColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDArtikulliNull() {
                this[this.tableListaLiferimeve.IDArtikulliColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiLiferuarNull() {
                return this.IsNull(this.tableListaLiferimeve.SasiLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiLiferuarNull() {
                this[this.tableListaLiferimeve.SasiLiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitulliLiferimitNull() {
                return this.IsNull(this.tableListaLiferimeve.TitulliLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitulliLiferimitNull() {
                this[this.tableListaLiferimeve.TitulliLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataLiferimitNull() {
                return this.IsNull(this.tableListaLiferimeve.DataLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataLiferimitNull() {
                this[this.tableListaLiferimeve.DataLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKohaLiferimitNull() {
                return this.IsNull(this.tableListaLiferimeve.KohaLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKohaLiferimitNull() {
                this[this.tableListaLiferimeve.KohaLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriLokacionitNull() {
                return this.IsNull(this.tableListaLiferimeve.EmriLokacionitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriLokacionitNull() {
                this[this.tableListaLiferimeve.EmriLokacionitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiferuarNull() {
                return this.IsNull(this.tableListaLiferimeve.LiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiferuarNull() {
                this[this.tableListaLiferimeve.LiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDLiferimiNull() {
                return this.IsNull(this.tableListaLiferimeve.IDLiferimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDLiferimiNull() {
                this[this.tableListaLiferimeve.IDLiferimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStokuAktualNull() {
                return this.IsNull(this.tableListaLiferimeve.StokuAktualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStokuAktualNull() {
                this[this.tableListaLiferimeve.StokuAktualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataLiferuarNull() {
                return this.IsNull(this.tableListaLiferimeve.DataLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataLiferuarNull() {
                this[this.tableListaLiferimeve.DataLiferuarColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ListaVizitaveRow : global::System.Data.DataRow {
            
            private ListaVizitaveDataTable tableListaVizitave;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaVizitaveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListaVizitave = ((ListaVizitaveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lokacioni {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.LokacioniColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lokacioni\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.LokacioniColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qyteti {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.QytetiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qyteti\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.QytetiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Tel_Mobil {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave._Tel_MobilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tel/Mobil\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave._Tel_MobilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataPlanifikimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListaVizitave.DataPlanifikimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataPlanifikimit\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.DataPlanifikimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adresa {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.AdresaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adresa\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.AdresaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barkodi {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.BarkodiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Barkodi\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.BarkodiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlientDheLokacion {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.IDKlientDheLokacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDKlientDheLokacion\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.IDKlientDheLokacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KontaktEmriMbiemri {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.KontaktEmriMbiemriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KontaktEmriMbiemri\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.KontaktEmriMbiemriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDStatusiVizites {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.IDStatusiVizitesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDStatusiVizites\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.IDStatusiVizitesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDVizita {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableListaVizitave.IDVizitaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDVizita\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.IDVizitaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShkKlienti {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.ShkKlientiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShkKlienti\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.ShkKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LfrStat {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.LfrStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LfrStat\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.LfrStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrsStat {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.PrsStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrsStat\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.PrsStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlienti {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.IDKlientiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDKlienti\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.IDKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatPorosia {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.StatPorosiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatPorosia\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.StatPorosiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestStat {
                get {
                    try {
                        return ((string)(this[this.tableListaVizitave.TestStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestStat\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.TestStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NrRendor {
                get {
                    try {
                        return ((int)(this[this.tableListaVizitave.NrRendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrRendor\' in table \'ListaVizitave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaVizitave.NrRendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLokacioniNull() {
                return this.IsNull(this.tableListaVizitave.LokacioniColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLokacioniNull() {
                this[this.tableListaVizitave.LokacioniColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQytetiNull() {
                return this.IsNull(this.tableListaVizitave.QytetiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQytetiNull() {
                this[this.tableListaVizitave.QytetiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Tel_MobilNull() {
                return this.IsNull(this.tableListaVizitave._Tel_MobilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Tel_MobilNull() {
                this[this.tableListaVizitave._Tel_MobilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataPlanifikimitNull() {
                return this.IsNull(this.tableListaVizitave.DataPlanifikimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataPlanifikimitNull() {
                this[this.tableListaVizitave.DataPlanifikimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableListaVizitave.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableListaVizitave.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdresaNull() {
                return this.IsNull(this.tableListaVizitave.AdresaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdresaNull() {
                this[this.tableListaVizitave.AdresaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarkodiNull() {
                return this.IsNull(this.tableListaVizitave.BarkodiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarkodiNull() {
                this[this.tableListaVizitave.BarkodiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDKlientDheLokacionNull() {
                return this.IsNull(this.tableListaVizitave.IDKlientDheLokacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDKlientDheLokacionNull() {
                this[this.tableListaVizitave.IDKlientDheLokacionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKontaktEmriMbiemriNull() {
                return this.IsNull(this.tableListaVizitave.KontaktEmriMbiemriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKontaktEmriMbiemriNull() {
                this[this.tableListaVizitave.KontaktEmriMbiemriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDStatusiVizitesNull() {
                return this.IsNull(this.tableListaVizitave.IDStatusiVizitesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDStatusiVizitesNull() {
                this[this.tableListaVizitave.IDStatusiVizitesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDVizitaNull() {
                return this.IsNull(this.tableListaVizitave.IDVizitaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDVizitaNull() {
                this[this.tableListaVizitave.IDVizitaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShkKlientiNull() {
                return this.IsNull(this.tableListaVizitave.ShkKlientiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShkKlientiNull() {
                this[this.tableListaVizitave.ShkKlientiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLfrStatNull() {
                return this.IsNull(this.tableListaVizitave.LfrStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLfrStatNull() {
                this[this.tableListaVizitave.LfrStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrsStatNull() {
                return this.IsNull(this.tableListaVizitave.PrsStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrsStatNull() {
                this[this.tableListaVizitave.PrsStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDKlientiNull() {
                return this.IsNull(this.tableListaVizitave.IDKlientiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDKlientiNull() {
                this[this.tableListaVizitave.IDKlientiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatPorosiaNull() {
                return this.IsNull(this.tableListaVizitave.StatPorosiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatPorosiaNull() {
                this[this.tableListaVizitave.StatPorosiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStatNull() {
                return this.IsNull(this.tableListaVizitave.TestStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStatNull() {
                this[this.tableListaVizitave.TestStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrRendorNull() {
                return this.IsNull(this.tableListaVizitave.NrRendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrRendorNull() {
                this[this.tableListaVizitave.NrRendorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ListaShitjeveRow : global::System.Data.DataRow {
            
            private ListaShitjeveDataTable tableListaShitjeve;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaShitjeveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListaShitjeve = ((ListaShitjeveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmriLokacionit {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.EmriLokacionitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmriLokacionit\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.EmriLokacionitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrPorosise {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.NrPorosiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrPorosise\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.NrPorosiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataPlanifikimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListaShitjeve.DataPlanifikimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataPlanifikimit\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.DataPlanifikimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDVizita {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableListaShitjeve.IDVizitaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDVizita\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.IDVizitaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiTotal {
                get {
                    try {
                        return ((float)(this[this.tableListaShitjeve.CmimiTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiTotal\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.CmimiTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataLiferimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListaShitjeve.DataLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataLiferimit\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.DataLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDLiferimi {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableListaShitjeve.IDLiferimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLiferimi\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.IDLiferimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlientDheLokacion {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.IDKlientDheLokacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDKlientDheLokacion\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.IDKlientDheLokacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShkKlienti {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.ShkKlientiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShkKlienti\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.ShkKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlienti {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.IDKlientiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDKlienti\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.IDKlientiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KontaktEmriMbiemri {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.KontaktEmriMbiemriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KontaktEmriMbiemri\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.KontaktEmriMbiemriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ShumaPaguar {
                get {
                    try {
                        return ((float)(this[this.tableListaShitjeve.ShumaPaguarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShumaPaguar\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.ShumaPaguarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrLiferimit {
                get {
                    try {
                        return ((string)(this[this.tableListaShitjeve.NrLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrLiferimit\' in table \'ListaShitjeve\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaShitjeve.NrLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriLokacionitNull() {
                return this.IsNull(this.tableListaShitjeve.EmriLokacionitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriLokacionitNull() {
                this[this.tableListaShitjeve.EmriLokacionitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrPorosiseNull() {
                return this.IsNull(this.tableListaShitjeve.NrPorosiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrPorosiseNull() {
                this[this.tableListaShitjeve.NrPorosiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataPlanifikimitNull() {
                return this.IsNull(this.tableListaShitjeve.DataPlanifikimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataPlanifikimitNull() {
                this[this.tableListaShitjeve.DataPlanifikimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDVizitaNull() {
                return this.IsNull(this.tableListaShitjeve.IDVizitaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDVizitaNull() {
                this[this.tableListaShitjeve.IDVizitaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiTotalNull() {
                return this.IsNull(this.tableListaShitjeve.CmimiTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiTotalNull() {
                this[this.tableListaShitjeve.CmimiTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataLiferimitNull() {
                return this.IsNull(this.tableListaShitjeve.DataLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataLiferimitNull() {
                this[this.tableListaShitjeve.DataLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDLiferimiNull() {
                return this.IsNull(this.tableListaShitjeve.IDLiferimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDLiferimiNull() {
                this[this.tableListaShitjeve.IDLiferimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableListaShitjeve.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableListaShitjeve.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDKlientDheLokacionNull() {
                return this.IsNull(this.tableListaShitjeve.IDKlientDheLokacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDKlientDheLokacionNull() {
                this[this.tableListaShitjeve.IDKlientDheLokacionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShkKlientiNull() {
                return this.IsNull(this.tableListaShitjeve.ShkKlientiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShkKlientiNull() {
                this[this.tableListaShitjeve.ShkKlientiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDKlientiNull() {
                return this.IsNull(this.tableListaShitjeve.IDKlientiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDKlientiNull() {
                this[this.tableListaShitjeve.IDKlientiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKontaktEmriMbiemriNull() {
                return this.IsNull(this.tableListaShitjeve.KontaktEmriMbiemriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKontaktEmriMbiemriNull() {
                this[this.tableListaShitjeve.KontaktEmriMbiemriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShumaPaguarNull() {
                return this.IsNull(this.tableListaShitjeve.ShumaPaguarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShumaPaguarNull() {
                this[this.tableListaShitjeve.ShumaPaguarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrLiferimitNull() {
                return this.IsNull(this.tableListaShitjeve.NrLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrLiferimitNull() {
                this[this.tableListaShitjeve.NrLiferimitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ArtikujtShiturRow : global::System.Data.DataRow {
            
            private ArtikujtShiturDataTable tableArtikujtShitur;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujtShiturRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArtikujtShitur = ((ArtikujtShiturDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiTotal {
                get {
                    try {
                        return ((float)(this[this.tableArtikujtShitur.CmimiTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiTotal\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.CmimiTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrLiferimit {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.NrLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrLiferimit\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.NrLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtEmri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.ArtEmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArtEmri\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.ArtEmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Cmimi {
                get {
                    try {
                        return ((float)(this[this.tableArtikujtShitur.CmimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cmimi\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.CmimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Totali {
                get {
                    try {
                        return ((float)(this[this.tableArtikujtShitur.TotaliColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Totali\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.TotaliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDLiferimi {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableArtikujtShitur.IDLiferimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLiferimi\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.IDLiferimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataLiferimit {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableArtikujtShitur.DataLiferimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataLiferimit\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.DataLiferimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid IDVizita {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableArtikujtShitur.IDVizitaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDVizita\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.IDVizitaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmriLokacionit {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.EmriLokacionitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmriLokacionit\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.EmriLokacionitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adresa {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.AdresaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adresa\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.AdresaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KontaktEmriMbiemri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.KontaktEmriMbiemriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KontaktEmriMbiemri\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.KontaktEmriMbiemriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Tel_Mobil {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur._Tel_MobilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tel/Mobil\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur._Tel_MobilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qyteti {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.QytetiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qyteti\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.QytetiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SasiaLiferuar {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtShitur.SasiaLiferuarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaLiferuar\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.SasiaLiferuarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtShitur.SeriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Seri\' in table \'ArtikujtShitur\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtShitur.SeriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiTotalNull() {
                return this.IsNull(this.tableArtikujtShitur.CmimiTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiTotalNull() {
                this[this.tableArtikujtShitur.CmimiTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrLiferimitNull() {
                return this.IsNull(this.tableArtikujtShitur.NrLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrLiferimitNull() {
                this[this.tableArtikujtShitur.NrLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtEmriNull() {
                return this.IsNull(this.tableArtikujtShitur.ArtEmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtEmriNull() {
                this[this.tableArtikujtShitur.ArtEmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiNull() {
                return this.IsNull(this.tableArtikujtShitur.CmimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiNull() {
                this[this.tableArtikujtShitur.CmimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotaliNull() {
                return this.IsNull(this.tableArtikujtShitur.TotaliColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotaliNull() {
                this[this.tableArtikujtShitur.TotaliColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDLiferimiNull() {
                return this.IsNull(this.tableArtikujtShitur.IDLiferimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDLiferimiNull() {
                this[this.tableArtikujtShitur.IDLiferimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataLiferimitNull() {
                return this.IsNull(this.tableArtikujtShitur.DataLiferimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataLiferimitNull() {
                this[this.tableArtikujtShitur.DataLiferimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDVizitaNull() {
                return this.IsNull(this.tableArtikujtShitur.IDVizitaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDVizitaNull() {
                this[this.tableArtikujtShitur.IDVizitaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriLokacionitNull() {
                return this.IsNull(this.tableArtikujtShitur.EmriLokacionitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriLokacionitNull() {
                this[this.tableArtikujtShitur.EmriLokacionitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdresaNull() {
                return this.IsNull(this.tableArtikujtShitur.AdresaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdresaNull() {
                this[this.tableArtikujtShitur.AdresaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKontaktEmriMbiemriNull() {
                return this.IsNull(this.tableArtikujtShitur.KontaktEmriMbiemriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKontaktEmriMbiemriNull() {
                this[this.tableArtikujtShitur.KontaktEmriMbiemriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Tel_MobilNull() {
                return this.IsNull(this.tableArtikujtShitur._Tel_MobilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Tel_MobilNull() {
                this[this.tableArtikujtShitur._Tel_MobilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQytetiNull() {
                return this.IsNull(this.tableArtikujtShitur.QytetiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQytetiNull() {
                this[this.tableArtikujtShitur.QytetiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaLiferuarNull() {
                return this.IsNull(this.tableArtikujtShitur.SasiaLiferuarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaLiferuarNull() {
                this[this.tableArtikujtShitur.SasiaLiferuarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriNull() {
                return this.IsNull(this.tableArtikujtShitur.SeriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriNull() {
                this[this.tableArtikujtShitur.SeriColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ArtikujtRow : global::System.Data.DataRow {
            
            private ArtikujtDataTable tableArtikujt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujtRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArtikujt = ((ArtikujtDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujt.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiNjesi {
                get {
                    try {
                        return ((float)(this[this.tableArtikujt.CmimiNjesiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiNjesi\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.CmimiNjesiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SasiaPako {
                get {
                    try {
                        return ((int)(this[this.tableArtikujt.SasiaPakoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SasiaPako\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.SasiaPakoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sasia {
                get {
                    try {
                        return ((int)(this[this.tableArtikujt.SasiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sasia\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.SasiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CmimiPako {
                get {
                    try {
                        return ((float)(this[this.tableArtikujt.CmimiPakoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CmimiPako\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.CmimiPakoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shifra {
                get {
                    try {
                        return ((string)(this[this.tableArtikujt.ShifraColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shifra\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.ShifraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barkod {
                get {
                    try {
                        return ((string)(this[this.tableArtikujt.BarkodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Barkod\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.BarkodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StokuAktual {
                get {
                    try {
                        return ((int)(this[this.tableArtikujt.StokuAktualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StokuAktual\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.StokuAktualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TePorositur {
                get {
                    try {
                        return ((int)(this[this.tableArtikujt.TePorositurColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TePorositur\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.TePorositurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    return ((string)(this[this.tableArtikujt.IDArtikulliColumn]));
                }
                set {
                    this[this.tableArtikujt.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Standard {
                get {
                    try {
                        return ((byte)(this[this.tableArtikujt.StandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Standard\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.StandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUM {
                get {
                    try {
                        return ((string)(this[this.tableArtikujt.BUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUM\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.BUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UPP {
                get {
                    try {
                        return ((decimal)(this[this.tableArtikujt.UPPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPP\' in table \'Artikujt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujt.UPPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableArtikujt.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableArtikujt.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiNjesiNull() {
                return this.IsNull(this.tableArtikujt.CmimiNjesiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiNjesiNull() {
                this[this.tableArtikujt.CmimiNjesiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaPakoNull() {
                return this.IsNull(this.tableArtikujt.SasiaPakoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaPakoNull() {
                this[this.tableArtikujt.SasiaPakoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaNull() {
                return this.IsNull(this.tableArtikujt.SasiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaNull() {
                this[this.tableArtikujt.SasiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCmimiPakoNull() {
                return this.IsNull(this.tableArtikujt.CmimiPakoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCmimiPakoNull() {
                this[this.tableArtikujt.CmimiPakoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShifraNull() {
                return this.IsNull(this.tableArtikujt.ShifraColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShifraNull() {
                this[this.tableArtikujt.ShifraColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarkodNull() {
                return this.IsNull(this.tableArtikujt.BarkodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarkodNull() {
                this[this.tableArtikujt.BarkodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStokuAktualNull() {
                return this.IsNull(this.tableArtikujt.StokuAktualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStokuAktualNull() {
                this[this.tableArtikujt.StokuAktualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTePorositurNull() {
                return this.IsNull(this.tableArtikujt.TePorositurColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTePorositurNull() {
                this[this.tableArtikujt.TePorositurColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardNull() {
                return this.IsNull(this.tableArtikujt.StandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardNull() {
                this[this.tableArtikujt.StandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUMNull() {
                return this.IsNull(this.tableArtikujt.BUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUMNull() {
                this[this.tableArtikujt.BUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPPNull() {
                return this.IsNull(this.tableArtikujt.UPPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPPNull() {
                this[this.tableArtikujt.UPPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ArtikujtStoqetRow : global::System.Data.DataRow {
            
            private ArtikujtStoqetDataTable tableArtikujtStoqet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujtStoqetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArtikujtStoqet = ((ArtikujtStoqetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtStoqet.IDArtikulliColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDArtikulli\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtStoqet.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Rabatet {
                get {
                    try {
                        return ((float)(this[this.tableArtikujtStoqet.RabatetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rabatet\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.RabatetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CopGratis {
                get {
                    try {
                        return ((int)(this[this.tableArtikujtStoqet.CopGratisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CopGratis\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.CopGratisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sasia {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtStoqet.SasiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sasia\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.SasiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Paketa {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtStoqet.PaketaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Paketa\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.PaketaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UnitPrice {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtStoqet.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Totali {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtStoqet.TotaliColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Totali\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.TotaliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depo {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtStoqet.DepoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depo\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.DepoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PriceBox {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtStoqet.PriceBoxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PriceBox\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.PriceBoxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Paketimi {
                get {
                    try {
                        return ((double)(this[this.tableArtikujtStoqet.PaketimiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Paketimi\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.PaketimiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barkod {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtStoqet.BarkodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Barkod\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.BarkodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Dhurate {
                get {
                    try {
                        return ((int)(this[this.tableArtikujtStoqet.DhurateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Dhurate\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.DhurateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUM {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtStoqet.BUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUM\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.BUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujtStoqet.SeriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Seri\' in table \'ArtikujtStoqet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujtStoqet.SeriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDArtikulliNull() {
                return this.IsNull(this.tableArtikujtStoqet.IDArtikulliColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDArtikulliNull() {
                this[this.tableArtikujtStoqet.IDArtikulliColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableArtikujtStoqet.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableArtikujtStoqet.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRabatetNull() {
                return this.IsNull(this.tableArtikujtStoqet.RabatetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRabatetNull() {
                this[this.tableArtikujtStoqet.RabatetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopGratisNull() {
                return this.IsNull(this.tableArtikujtStoqet.CopGratisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopGratisNull() {
                this[this.tableArtikujtStoqet.CopGratisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaNull() {
                return this.IsNull(this.tableArtikujtStoqet.SasiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaNull() {
                this[this.tableArtikujtStoqet.SasiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaketaNull() {
                return this.IsNull(this.tableArtikujtStoqet.PaketaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaketaNull() {
                this[this.tableArtikujtStoqet.PaketaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableArtikujtStoqet.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitPriceNull() {
                this[this.tableArtikujtStoqet.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotaliNull() {
                return this.IsNull(this.tableArtikujtStoqet.TotaliColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotaliNull() {
                this[this.tableArtikujtStoqet.TotaliColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepoNull() {
                return this.IsNull(this.tableArtikujtStoqet.DepoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepoNull() {
                this[this.tableArtikujtStoqet.DepoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceBoxNull() {
                return this.IsNull(this.tableArtikujtStoqet.PriceBoxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceBoxNull() {
                this[this.tableArtikujtStoqet.PriceBoxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaketimiNull() {
                return this.IsNull(this.tableArtikujtStoqet.PaketimiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaketimiNull() {
                this[this.tableArtikujtStoqet.PaketimiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarkodNull() {
                return this.IsNull(this.tableArtikujtStoqet.BarkodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarkodNull() {
                this[this.tableArtikujtStoqet.BarkodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDhurateNull() {
                return this.IsNull(this.tableArtikujtStoqet.DhurateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDhurateNull() {
                this[this.tableArtikujtStoqet.DhurateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUMNull() {
                return this.IsNull(this.tableArtikujtStoqet.BUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUMNull() {
                this[this.tableArtikujtStoqet.BUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriNull() {
                return this.IsNull(this.tableArtikujtStoqet.SeriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriNull() {
                this[this.tableArtikujtStoqet.SeriColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Log_SyncErrorsRow : global::System.Data.DataRow {
            
            private Log_SyncErrorsDataTable tableLog_SyncErrors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Log_SyncErrorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLog_SyncErrors = ((Log_SyncErrorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tableLog_SyncErrors.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'Log_SyncErrors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLog_SyncErrors.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SessionID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableLog_SyncErrors.SessionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SessionID\' in table \'Log_SyncErrors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLog_SyncErrors.SessionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Err_Code {
                get {
                    try {
                        return ((int)(this[this.tableLog_SyncErrors.Err_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Err_Code\' in table \'Log_SyncErrors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLog_SyncErrors.Err_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Err_Message {
                get {
                    try {
                        return ((string)(this[this.tableLog_SyncErrors.Err_MessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Err_Message\' in table \'Log_SyncErrors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLog_SyncErrors.Err_MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Err_Module {
                get {
                    try {
                        return ((string)(this[this.tableLog_SyncErrors.Err_ModuleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Err_Module\' in table \'Log_SyncErrors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLog_SyncErrors.Err_ModuleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Err_Line {
                get {
                    try {
                        return ((int)(this[this.tableLog_SyncErrors.Err_LineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Err_Line\' in table \'Log_SyncErrors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLog_SyncErrors.Err_LineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tableLog_SyncErrors.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tableLog_SyncErrors.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSessionIDNull() {
                return this.IsNull(this.tableLog_SyncErrors.SessionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSessionIDNull() {
                this[this.tableLog_SyncErrors.SessionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErr_CodeNull() {
                return this.IsNull(this.tableLog_SyncErrors.Err_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErr_CodeNull() {
                this[this.tableLog_SyncErrors.Err_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErr_MessageNull() {
                return this.IsNull(this.tableLog_SyncErrors.Err_MessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErr_MessageNull() {
                this[this.tableLog_SyncErrors.Err_MessageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErr_ModuleNull() {
                return this.IsNull(this.tableLog_SyncErrors.Err_ModuleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErr_ModuleNull() {
                this[this.tableLog_SyncErrors.Err_ModuleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErr_LineNull() {
                return this.IsNull(this.tableLog_SyncErrors.Err_LineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErr_LineNull() {
                this[this.tableLog_SyncErrors.Err_LineColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ArtikujDepoRow : global::System.Data.DataRow {
            
            private ArtikujDepoDataTable tableArtikujDepo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArtikujDepoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArtikujDepo = ((ArtikujDepoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujDepo.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'ArtikujDepo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujDepo.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sasia {
                get {
                    try {
                        return ((double)(this[this.tableArtikujDepo.SasiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sasia\' in table \'ArtikujDepo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujDepo.SasiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shifra {
                get {
                    try {
                        return ((string)(this[this.tableArtikujDepo.ShifraColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shifra\' in table \'ArtikujDepo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujDepo.ShifraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depo {
                get {
                    try {
                        return ((string)(this[this.tableArtikujDepo.DepoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depo\' in table \'ArtikujDepo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujDepo.DepoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Barkod {
                get {
                    try {
                        return ((string)(this[this.tableArtikujDepo.BarkodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Barkod\' in table \'ArtikujDepo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujDepo.BarkodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seri {
                get {
                    try {
                        return ((string)(this[this.tableArtikujDepo.SeriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Seri\' in table \'ArtikujDepo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArtikujDepo.SeriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableArtikujDepo.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableArtikujDepo.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaNull() {
                return this.IsNull(this.tableArtikujDepo.SasiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaNull() {
                this[this.tableArtikujDepo.SasiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShifraNull() {
                return this.IsNull(this.tableArtikujDepo.ShifraColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShifraNull() {
                this[this.tableArtikujDepo.ShifraColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepoNull() {
                return this.IsNull(this.tableArtikujDepo.DepoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepoNull() {
                this[this.tableArtikujDepo.DepoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarkodNull() {
                return this.IsNull(this.tableArtikujDepo.BarkodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarkodNull() {
                this[this.tableArtikujDepo.BarkodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriNull() {
                return this.IsNull(this.tableArtikujDepo.SeriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriNull() {
                this[this.tableArtikujDepo.SeriColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FaturatPagesatRow : global::System.Data.DataRow {
            
            private FaturatPagesatDataTable tableFaturatPagesat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FaturatPagesatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFaturatPagesat = ((FaturatPagesatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NrFatures {
                get {
                    return ((string)(this[this.tableFaturatPagesat.NrFaturesColumn]));
                }
                set {
                    this[this.tableFaturatPagesat.NrFaturesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataFatures {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFaturatPagesat.DataFaturesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataFatures\' in table \'FaturatPagesat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFaturatPagesat.DataFaturesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataPerPages {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFaturatPagesat.DataPerPagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataPerPages\' in table \'FaturatPagesat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFaturatPagesat.DataPerPagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ShumaFatures {
                get {
                    try {
                        return ((decimal)(this[this.tableFaturatPagesat.ShumaFaturesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShumaFatures\' in table \'FaturatPagesat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFaturatPagesat.ShumaFaturesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Borxhi {
                get {
                    try {
                        return ((decimal)(this[this.tableFaturatPagesat.BorxhiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Borxhi\' in table \'FaturatPagesat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFaturatPagesat.BorxhiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableFaturatPagesat.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'FaturatPagesat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFaturatPagesat.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataFaturesNull() {
                return this.IsNull(this.tableFaturatPagesat.DataFaturesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataFaturesNull() {
                this[this.tableFaturatPagesat.DataFaturesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataPerPagesNull() {
                return this.IsNull(this.tableFaturatPagesat.DataPerPagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataPerPagesNull() {
                this[this.tableFaturatPagesat.DataPerPagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShumaFaturesNull() {
                return this.IsNull(this.tableFaturatPagesat.ShumaFaturesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShumaFaturesNull() {
                this[this.tableFaturatPagesat.ShumaFaturesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBorxhiNull() {
                return this.IsNull(this.tableFaturatPagesat.BorxhiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBorxhiNull() {
                this[this.tableFaturatPagesat.BorxhiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableFaturatPagesat.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableFaturatPagesat.SyncStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NumriFaturaveRow : global::System.Data.DataRow {
            
            private NumriFaturaveDataTable tableNumriFaturave;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NumriFaturaveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNumriFaturave = ((NumriFaturaveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KOD {
                get {
                    try {
                        return ((string)(this[this.tableNumriFaturave.KODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KOD\' in table \'NumriFaturave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNumriFaturave.KODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NRKUFIS {
                get {
                    try {
                        return ((int)(this[this.tableNumriFaturave.NRKUFISColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NRKUFIS\' in table \'NumriFaturave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNumriFaturave.NRKUFISColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NRKUFIP {
                get {
                    try {
                        return ((int)(this[this.tableNumriFaturave.NRKUFIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NRKUFIP\' in table \'NumriFaturave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNumriFaturave.NRKUFIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NRKUFIPJT {
                get {
                    try {
                        return ((int)(this[this.tableNumriFaturave.NRKUFIPJTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NRKUFIPJT\' in table \'NumriFaturave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNumriFaturave.NRKUFIPJTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NRKUFISJT {
                get {
                    try {
                        return ((string)(this[this.tableNumriFaturave.NRKUFISJTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NRKUFISJT\' in table \'NumriFaturave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNumriFaturave.NRKUFISJTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableNumriFaturave.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'NumriFaturave\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNumriFaturave.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDNumri {
                get {
                    return ((int)(this[this.tableNumriFaturave.IDNumriColumn]));
                }
                set {
                    this[this.tableNumriFaturave.IDNumriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKODNull() {
                return this.IsNull(this.tableNumriFaturave.KODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKODNull() {
                this[this.tableNumriFaturave.KODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNRKUFISNull() {
                return this.IsNull(this.tableNumriFaturave.NRKUFISColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNRKUFISNull() {
                this[this.tableNumriFaturave.NRKUFISColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNRKUFIPNull() {
                return this.IsNull(this.tableNumriFaturave.NRKUFIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNRKUFIPNull() {
                this[this.tableNumriFaturave.NRKUFIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNRKUFIPJTNull() {
                return this.IsNull(this.tableNumriFaturave.NRKUFIPJTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNRKUFIPJTNull() {
                this[this.tableNumriFaturave.NRKUFIPJTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNRKUFISJTNull() {
                return this.IsNull(this.tableNumriFaturave.NRKUFISJTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNRKUFISJTNull() {
                this[this.tableNumriFaturave.NRKUFISJTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableNumriFaturave.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableNumriFaturave.SyncStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class OrdersRow : global::System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((global::System.Guid)(this[this.tableOrders.IDColumn]));
                }
                set {
                    this[this.tableOrders.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDOrder {
                get {
                    try {
                        return ((string)(this[this.tableOrders.IDOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDOrder\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.IDOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceID {
                get {
                    try {
                        return ((string)(this[this.tableOrders.DeviceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceID\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DeviceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Data {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOrders.DataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Data\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Depo {
                get {
                    try {
                        return ((string)(this[this.tableOrders.DepoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depo\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DepoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDAgjenti {
                get {
                    try {
                        return ((string)(this[this.tableOrders.IDAgjentiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDAgjenti\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.IDAgjentiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDKlientDheLokacion {
                get {
                    try {
                        return ((string)(this[this.tableOrders.IDKlientDheLokacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDKlientDheLokacion\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.IDKlientDheLokacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableOrders.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImpStatus {
                get {
                    try {
                        return ((int)(this[this.tableOrders.ImpStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpStatus\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.ImpStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDOrderNull() {
                return this.IsNull(this.tableOrders.IDOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDOrderNull() {
                this[this.tableOrders.IDOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIDNull() {
                return this.IsNull(this.tableOrders.DeviceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIDNull() {
                this[this.tableOrders.DeviceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tableOrders.DataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tableOrders.DataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepoNull() {
                return this.IsNull(this.tableOrders.DepoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepoNull() {
                this[this.tableOrders.DepoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDAgjentiNull() {
                return this.IsNull(this.tableOrders.IDAgjentiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDAgjentiNull() {
                this[this.tableOrders.IDAgjentiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDKlientDheLokacionNull() {
                return this.IsNull(this.tableOrders.IDKlientDheLokacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDKlientDheLokacionNull() {
                this[this.tableOrders.IDKlientDheLokacionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableOrders.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableOrders.SyncStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpStatusNull() {
                return this.IsNull(this.tableOrders.ImpStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpStatusNull() {
                this[this.tableOrders.ImpStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Order_DetailsRow : global::System.Data.DataRow {
            
            private Order_DetailsDataTable tableOrder_Details;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Order_DetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrder_Details = ((Order_DetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDOrder {
                get {
                    return ((string)(this[this.tableOrder_Details.IDOrderColumn]));
                }
                set {
                    this[this.tableOrder_Details.IDOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NrRendor {
                get {
                    try {
                        return ((int)(this[this.tableOrder_Details.NrRendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NrRendor\' in table \'Order_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.NrRendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    return ((string)(this[this.tableOrder_Details.IDArtikulliColumn]));
                }
                set {
                    this[this.tableOrder_Details.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tableOrder_Details.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'Order_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Sasia_Porositur {
                get {
                    try {
                        return ((float)(this[this.tableOrder_Details.Sasia_PorositurColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sasia_Porositur\' in table \'Order_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.Sasia_PorositurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncStatus {
                get {
                    try {
                        return ((int)(this[this.tableOrder_Details.SyncStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncStatus\' in table \'Order_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.SyncStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImpStatus {
                get {
                    try {
                        return ((int)(this[this.tableOrder_Details.ImpStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpStatus\' in table \'Order_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.ImpStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNrRendorNull() {
                return this.IsNull(this.tableOrder_Details.NrRendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNrRendorNull() {
                this[this.tableOrder_Details.NrRendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tableOrder_Details.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tableOrder_Details.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasia_PorositurNull() {
                return this.IsNull(this.tableOrder_Details.Sasia_PorositurColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasia_PorositurNull() {
                this[this.tableOrder_Details.Sasia_PorositurColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncStatusNull() {
                return this.IsNull(this.tableOrder_Details.SyncStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncStatusNull() {
                this[this.tableOrder_Details.SyncStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpStatusNull() {
                return this.IsNull(this.tableOrder_Details.ImpStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpStatusNull() {
                this[this.tableOrder_Details.ImpStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class rptOrder_DetailsRow : global::System.Data.DataRow {
            
            private rptOrder_DetailsDataTable tablerptOrder_Details;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rptOrder_DetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerptOrder_Details = ((rptOrder_DetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDArtikulli {
                get {
                    return ((string)(this[this.tablerptOrder_Details.IDArtikulliColumn]));
                }
                set {
                    this[this.tablerptOrder_Details.IDArtikulliColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emri {
                get {
                    try {
                        return ((string)(this[this.tablerptOrder_Details.EmriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emri\' in table \'rptOrder_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptOrder_Details.EmriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Sasia {
                get {
                    try {
                        return ((double)(this[this.tablerptOrder_Details.SasiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sasia\' in table \'rptOrder_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerptOrder_Details.SasiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmriNull() {
                return this.IsNull(this.tablerptOrder_Details.EmriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmriNull() {
                this[this.tablerptOrder_Details.EmriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSasiaNull() {
                return this.IsNull(this.tablerptOrder_Details.SasiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSasiaNull() {
                this[this.tablerptOrder_Details.SasiaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class AgjendetRowChangeEvent : global::System.EventArgs {
            
            private AgjendetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetRowChangeEvent(AgjendetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgjendetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class FaturaRowChangeEvent : global::System.EventArgs {
            
            private FaturaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRowChangeEvent(FaturaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class KlientDheLokacionRowChangeEvent : global::System.EventArgs {
            
            private KlientDheLokacionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRowChangeEvent(KlientDheLokacionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientDheLokacionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class KlientetRowChangeEvent : global::System.EventArgs {
            
            private KlientetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRowChangeEvent(KlientetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KlientetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class KonfigurimiRowChangeEvent : global::System.EventArgs {
            
            private KonfigurimiRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiRowChangeEvent(KonfigurimiRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KonfigurimiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class LiferimiRowChangeEvent : global::System.EventArgs {
            
            private LiferimiRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRowChangeEvent(LiferimiRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class LiferimiArtRowChangeEvent : global::System.EventArgs {
            
            private LiferimiArtRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtRowChangeEvent(LiferimiArtRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LiferimiArtRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class NumerimInternRowChangeEvent : global::System.EventArgs {
            
            private NumerimInternRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternRowChangeEvent(NumerimInternRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumerimInternRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class PorosiaArtRowChangeEvent : global::System.EventArgs {
            
            private PorosiaArtRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtRowChangeEvent(PorosiaArtRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorosiaArtRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class PorositeRowChangeEvent : global::System.EventArgs {
            
            private PorositeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeRowChangeEvent(PorositeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PorositeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class PriceGroupRowChangeEvent : global::System.EventArgs {
            
            private PriceGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupRowChangeEvent(PriceGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RabatetRowChangeEvent : global::System.EventArgs {
            
            private RabatetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetRowChangeEvent(RabatetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RabatetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class SalesPriceRowChangeEvent : global::System.EventArgs {
            
            private SalesPriceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceRowChangeEvent(SalesPriceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesPriceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class StatusiVizitesRowChangeEvent : global::System.EventArgs {
            
            private StatusiVizitesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesRowChangeEvent(StatusiVizitesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusiVizitesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class StoqetRowChangeEvent : global::System.EventArgs {
            
            private StoqetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoqetRowChangeEvent(StoqetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoqetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class SyncConfigurationRowChangeEvent : global::System.EventArgs {
            
            private SyncConfigurationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationRowChangeEvent(SyncConfigurationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncConfigurationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class VendetRowChangeEvent : global::System.EventArgs {
            
            private VendetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetRowChangeEvent(VendetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VendetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class VizitatRowChangeEvent : global::System.EventArgs {
            
            private VizitatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRowChangeEvent(VizitatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VizitatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ListaLiferimeveRowChangeEvent : global::System.EventArgs {
            
            private ListaLiferimeveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaLiferimeveRowChangeEvent(ListaLiferimeveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaLiferimeveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ListaVizitaveRowChangeEvent : global::System.EventArgs {
            
            private ListaVizitaveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveRowChangeEvent(ListaVizitaveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaVizitaveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ListaShitjeveRowChangeEvent : global::System.EventArgs {
            
            private ListaShitjeveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaShitjeveRowChangeEvent(ListaShitjeveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaShitjeveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ArtikujtShiturRowChangeEvent : global::System.EventArgs {
            
            private ArtikujtShiturRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtShiturRowChangeEvent(ArtikujtShiturRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtShiturRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ArtikujtRowChangeEvent : global::System.EventArgs {
            
            private ArtikujtRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtRowChangeEvent(ArtikujtRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ArtikujtStoqetRowChangeEvent : global::System.EventArgs {
            
            private ArtikujtStoqetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetRowChangeEvent(ArtikujtStoqetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujtStoqetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class Log_SyncErrorsRowChangeEvent : global::System.EventArgs {
            
            private Log_SyncErrorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Log_SyncErrorsRowChangeEvent(Log_SyncErrorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Log_SyncErrorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ArtikujDepoRowChangeEvent : global::System.EventArgs {
            
            private ArtikujDepoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujDepoRowChangeEvent(ArtikujDepoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArtikujDepoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class FaturatPagesatRowChangeEvent : global::System.EventArgs {
            
            private FaturatPagesatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatRowChangeEvent(FaturatPagesatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FaturatPagesatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class NumriFaturaveRowChangeEvent : global::System.EventArgs {
            
            private NumriFaturaveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveRowChangeEvent(NumriFaturaveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NumriFaturaveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class OrdersRowChangeEvent : global::System.EventArgs {
            
            private OrdersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRowChangeEvent(OrdersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class Order_DetailsRowChangeEvent : global::System.EventArgs {
            
            private Order_DetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsRowChangeEvent(Order_DetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Order_DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class rptOrder_DetailsRowChangeEvent : global::System.EventArgs {
            
            private rptOrder_DetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsRowChangeEvent(rptOrder_DetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rptOrder_DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MobileSales.MyMobileDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class AgjendetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AgjendetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Agjendet";
            tableMapping.ColumnMappings.Add("IDAgjenti", "IDAgjenti");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Mbiemri", "Mbiemri");
            tableMapping.ColumnMappings.Add("Perdoruesi", "Perdoruesi");
            tableMapping.ColumnMappings.Add("Fjalekalimi", "Fjalekalimi");
            tableMapping.ColumnMappings.Add("Gjendja", "Gjendja");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("Depo", "Depo");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("AprovimFaturash", "AprovimFaturash");
            tableMapping.ColumnMappings.Add("MeAprovim", "MeAprovim");
            tableMapping.ColumnMappings.Add("PaAprovim", "PaAprovim");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Agjendet] WHERE (([IDAgjenti] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Agjendet] ([IDAgjenti], [Emri], [Mbiemri], [Perdoruesi], [Fjalekalim" +
                "i], [Gjendja], [DeviceID], [Depo], [SyncStatus], [AprovimFaturash], [MeAprovim]," +
                " [PaAprovim]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @" +
                "p12)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Mbiemri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fjalekalimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gjendja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AprovimFaturash", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "MeAprovim", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PaAprovim", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Agjendet] SET [IDAgjenti] = @p1, [Emri] = @p2, [Mbiemri] = @p3, [Perdoruesi] = @p4, [Fjalekalimi] = @p5, [Gjendja] = @p6, [DeviceID] = @p7, [Depo] = @p8, [SyncStatus] = @p9, [AprovimFaturash] = @p10, [MeAprovim] = @p11, [PaAprovim] = @p12 WHERE (([IDAgjenti] = @p13))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Mbiemri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fjalekalimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gjendja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AprovimFaturash", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "MeAprovim", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PaAprovim", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     IDAgjenti, Emri, Mbiemri, Perdoruesi, Fjalekalimi, Gjendja, DeviceID, " +
                "Depo, SyncStatus, AprovimFaturash, MeAprovim, PaAprovim\r\nFROM         Agjendet";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT AprovimFaturash, Depo, DeviceID, Emri, Fjalekalimi, Gjendja, IDAgjenti, Mb" +
                "iemri, MeAprovim, PaAprovim, Perdoruesi, SyncStatus FROM Agjendet WHERE (DeviceI" +
                "D = @Devid)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Devid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     AprovimFaturash, Depo, DeviceID, Emri, Fjalekalimi, Gjendja, IDAgjenti" +
                ", Mbiemri, MeAprovim, PaAprovim, Perdoruesi, SyncStatus\r\nFROM         Agjendet\r\n" +
                "WHERE     (Perdoruesi = @perdoruesi) AND (MeAprovim = @fjalekalimi)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@perdoruesi", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@fjalekalimi", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "MeAprovim", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT     AprovimFaturash, Depo, DeviceID, Emri, Fjalekalimi, Gjendja, IDAgjenti" +
                ", Mbiemri, MeAprovim, PaAprovim, Perdoruesi, SyncStatus\r\nFROM         Agjendet\r\n" +
                "WHERE     (Perdoruesi = @perdoruesi) AND (PaAprovim = @fjalekalimi)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@perdoruesi", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@fjalekalimi", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "PaAprovim", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT AprovimFaturash, Depo, DeviceID, Emri, Fjalekalimi, Gjendja, IDAgjenti, Mb" +
                "iemri, MeAprovim, PaAprovim, Perdoruesi, SyncStatus FROM Agjendet WHERE (Perdoru" +
                "esi = @perdoruesi) AND (Fjalekalimi = @Fjalekalimi)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@perdoruesi", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Fjalekalimi", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fjalekalimi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT     DeviceID\r\nFROM         Agjendet\r\nGROUP BY DeviceID, Perdoruesi\r\nHAVING" +
                "      (Perdoruesi = @perdoruesi)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@perdoruesi", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "SELECT     COUNT(*) AS Expr1\r\nFROM         Agjendet\r\nWHERE     (Perdoruesi = @use" +
                "r) AND (Fjalekalimi = @fk) AND (Gjendja = \'Aktiv\')";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@user", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Perdoruesi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@fk", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fjalekalimi", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.AgjendetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.AgjendetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.AgjendetDataTable dataTable = new MyMobileDataSet.AgjendetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDevID(MyMobileDataSet.AgjendetDataTable dataTable, string Devid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Devid == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Devid));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.AgjendetDataTable GetDataBy3(string Devid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Devid == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Devid));
            }
            MyMobileDataSet.AgjendetDataTable dataTable = new MyMobileDataSet.AgjendetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMeAprovim(MyMobileDataSet.AgjendetDataTable dataTable, string perdoruesi, string fjalekalimi) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((perdoruesi == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(perdoruesi));
            }
            if ((fjalekalimi == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(fjalekalimi));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.AgjendetDataTable GetDataBy4(string perdoruesi, string fjalekalimi) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((perdoruesi == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(perdoruesi));
            }
            if ((fjalekalimi == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(fjalekalimi));
            }
            MyMobileDataSet.AgjendetDataTable dataTable = new MyMobileDataSet.AgjendetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPaAprovim(MyMobileDataSet.AgjendetDataTable dataTable, string perdoruesi, string fjalekalimi) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((perdoruesi == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(perdoruesi));
            }
            if ((fjalekalimi == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(fjalekalimi));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.AgjendetDataTable GetDataBy5(string perdoruesi, string fjalekalimi) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((perdoruesi == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(perdoruesi));
            }
            if ((fjalekalimi == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(fjalekalimi));
            }
            MyMobileDataSet.AgjendetDataTable dataTable = new MyMobileDataSet.AgjendetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPerdoruesi(MyMobileDataSet.AgjendetDataTable dataTable, string perdoruesi, string Fjalekalimi) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((perdoruesi == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(perdoruesi));
            }
            if ((Fjalekalimi == null)) {
                throw new global::System.ArgumentNullException("Fjalekalimi");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Fjalekalimi));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.AgjendetDataTable GetDataBy1(string perdoruesi, string Fjalekalimi) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((perdoruesi == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(perdoruesi));
            }
            if ((Fjalekalimi == null)) {
                throw new global::System.ArgumentNullException("Fjalekalimi");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(Fjalekalimi));
            }
            MyMobileDataSet.AgjendetDataTable dataTable = new MyMobileDataSet.AgjendetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.AgjendetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Agjendet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, global::System.Nullable<int> p9, global::System.Nullable<bool> p10, string p11, string p12) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(p12));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, global::System.Nullable<int> p9, global::System.Nullable<bool> p10, string p11, string p12, string p13) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(p10.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11 == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(p12));
            }
            if ((p13 == null)) {
                throw new global::System.ArgumentNullException("p13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(p13));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, string p3, string p4, string p5, string p6, string p7, string p8, global::System.Nullable<int> p9, global::System.Nullable<bool> p10, string p11, string p12, string p13) {
            return this.Update(p13, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual string GetDevID(string perdoruesi) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[5];
            if ((perdoruesi == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(perdoruesi));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((string)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<int> GetLogin(string user, string fk) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[6];
            if ((user == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(user));
            }
            if ((fk == null)) {
                throw new global::System.ArgumentNullException("fk");
            }
            else {
                command.Parameters[1].Value = ((string)(fk));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class FaturaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FaturaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Fatura";
            tableMapping.ColumnMappings.Add("IDFatura", "IDFatura");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("ShumaTotale", "ShumaTotale");
            tableMapping.ColumnMappings.Add("IDLiferimi", "IDLiferimi");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Fatura] WHERE (([IDFatura] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDFatura", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Fatura] ([IDFatura], [Data], [ShumaTotale], [IDLiferimi], [DeviceID]" +
                ", [SyncStatus]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDFatura", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaTotale", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Fatura] SET [IDFatura] = @p1, [Data] = @p2, [ShumaTotale] = @p3, [IDLifer" +
                "imi] = @p4, [DeviceID] = @p5, [SyncStatus] = @p6 WHERE (([IDFatura] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDFatura", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaTotale", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDFatura", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IDFatura], [Data], [ShumaTotale], [IDLiferimi], [DeviceID], [SyncStatus] " +
                "FROM [Fatura]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.FaturaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.FaturaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.FaturaDataTable dataTable = new MyMobileDataSet.FaturaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.FaturaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Fatura");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid p1, string p2, double p3, global::System.Nullable<global::System.Guid> p4, string p5, global::System.Nullable<int> p6) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(p1));
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(p3));
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid p1, string p2, double p3, global::System.Nullable<global::System.Guid> p4, string p5, global::System.Nullable<int> p6, System.Guid p7) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(p1));
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(p3));
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.Guid)(p7));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, double p3, global::System.Nullable<global::System.Guid> p4, string p5, global::System.Nullable<int> p6, System.Guid p7) {
            return this.Update(p7, p2, p3, p4, p5, p6, p7);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class KlientDheLokacionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KlientDheLokacionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "KlientDheLokacion";
            tableMapping.ColumnMappings.Add("IDKlientDheLokacion", "IDKlientDheLokacion");
            tableMapping.ColumnMappings.Add("EmriLokacionit", "EmriLokacionit");
            tableMapping.ColumnMappings.Add("Adresa", "Adresa");
            tableMapping.ColumnMappings.Add("KontaktEmriMbiemri", "KontaktEmriMbiemri");
            tableMapping.ColumnMappings.Add("Tel/Mobil", "Tel/Mobil");
            tableMapping.ColumnMappings.Add("IDVendi", "IDVendi");
            tableMapping.ColumnMappings.Add("IDKlienti", "IDKlienti");
            tableMapping.ColumnMappings.Add("Barkodi", "Barkodi");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [KlientDheLokacion] WHERE (([IDKlientDheLokacion] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [KlientDheLokacion] ([IDKlientDheLokacion], [EmriLokacionit], [Adresa" +
                "], [KontaktEmriMbiemri], [Tel/Mobil], [IDVendi], [IDKlienti], [Barkodi]) VALUES " +
                "(@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EmriLokacionit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Adresa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KontaktEmriMbiemri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tel/Mobil", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVendi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkodi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [KlientDheLokacion] SET [IDKlientDheLokacion] = @p1, [EmriLokacionit] = @p" +
                "2, [Adresa] = @p3, [KontaktEmriMbiemri] = @p4, [Tel/Mobil] = @p5, [IDVendi] = @p" +
                "6, [IDKlienti] = @p7, [Barkodi] = @p8 WHERE (([IDKlientDheLokacion] = @p9))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EmriLokacionit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Adresa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KontaktEmriMbiemri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tel/Mobil", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVendi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkodi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IDKlientDheLokacion], [EmriLokacionit], [Adresa], [KontaktEmriMbiemri], [" +
                "Tel/Mobil], [IDVendi], [IDKlienti], [Barkodi] FROM [KlientDheLokacion]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Adresa, Barkodi, EmriLokacionit, IDKlientDheLokacion, IDKlienti, IDVendi, " +
                "KontaktEmriMbiemri, [Tel/Mobil] FROM KlientDheLokacion WHERE (IDKlientDheLokacio" +
                "n = @IDKlientDheLokacion)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlientDheLokacion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT Adresa, Barkodi, EmriLokacionit, IDKlientDheLokacion, IDKlienti, IDVendi, " +
                "KontaktEmriMbiemri, [Tel/Mobil] FROM KlientDheLokacion WHERE (IDKlienti = @IDKli" +
                "enti)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT Adresa, Barkodi, EmriLokacionit, IDKlientDheLokacion, IDKlienti, IDVendi, " +
                "KontaktEmriMbiemri, [Tel/Mobil] FROM KlientDheLokacion WHERE (EmriLokacionit = @" +
                "Lokacioni) ORDER BY EmriLokacionit";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Lokacioni", global::System.Data.SqlDbType.NVarChar, 40, global::System.Data.ParameterDirection.Input, true, 0, 0, "EmriLokacionit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT Adresa, Barkodi, EmriLokacionit, IDKlientDheLokacion, IDKlienti, IDVendi, " +
                "KontaktEmriMbiemri, [Tel/Mobil] FROM KlientDheLokacion WHERE (Barkodi = @Barkod)" +
                "";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Barkod", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkodi", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.KlientDheLokacionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.KlientDheLokacionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.KlientDheLokacionDataTable dataTable = new MyMobileDataSet.KlientDheLokacionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDKlientDheLokacion(MyMobileDataSet.KlientDheLokacionDataTable dataTable, string IDKlientDheLokacion) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientDheLokacion));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KlientDheLokacionDataTable GetDataBy3(string IDKlientDheLokacion) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientDheLokacion));
            }
            MyMobileDataSet.KlientDheLokacionDataTable dataTable = new MyMobileDataSet.KlientDheLokacionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDKlienti(MyMobileDataSet.KlientDheLokacionDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDKlienti == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KlientDheLokacionDataTable GetDataBy2(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDKlienti == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.KlientDheLokacionDataTable dataTable = new MyMobileDataSet.KlientDheLokacionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetIDLokacioni(MyMobileDataSet.KlientDheLokacionDataTable dataTable, string Lokacioni) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((Lokacioni == null)) {
                throw new global::System.ArgumentNullException("Lokacioni");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Lokacioni));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KlientDheLokacionDataTable GetDataBy(string Lokacioni) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((Lokacioni == null)) {
                throw new global::System.ArgumentNullException("Lokacioni");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Lokacioni));
            }
            MyMobileDataSet.KlientDheLokacionDataTable dataTable = new MyMobileDataSet.KlientDheLokacionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SearchByBarcode(MyMobileDataSet.KlientDheLokacionDataTable dataTable, string Barkod) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((Barkod == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Barkod));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KlientDheLokacionDataTable GetDataBy1(string Barkod) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((Barkod == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Barkod));
            }
            MyMobileDataSet.KlientDheLokacionDataTable dataTable = new MyMobileDataSet.KlientDheLokacionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.KlientDheLokacionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "KlientDheLokacion");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                throw new global::System.ArgumentNullException("p4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                throw new global::System.ArgumentNullException("p6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                throw new global::System.ArgumentNullException("p4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                throw new global::System.ArgumentNullException("p6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                throw new global::System.ArgumentNullException("p9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(p9));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9) {
            return this.Update(p9, p2, p3, p4, p5, p6, p7, p8, p9);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class KlientetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KlientetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Klientet";
            tableMapping.ColumnMappings.Add("IDKlienti", "IDKlienti");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("EmailKontakt1", "EmailKontakt");
            tableMapping.ColumnMappings.Add("KontaktNumer1", "KontaktNumer");
            tableMapping.ColumnMappings.Add("ShkKlienti", "ShkKlienti");
            tableMapping.ColumnMappings.Add("GrRabatet", "GrRabatet");
            tableMapping.ColumnMappings.Add("GrCmimoret", "GrCmimoret");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Klientet] WHERE (([IDKlienti] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Klientet] ([IDKlienti], [Emri], [EmailKontakt1], [KontaktNumer1], [S" +
                "hkKlienti], [GrRabatet], [GrCmimoret]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7" +
                ")";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EmailKontakt1", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KontaktNumer1", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShkKlienti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GrRabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GrCmimoret", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Klientet] SET [IDKlienti] = @p1, [Emri] = @p2, [EmailKontakt1] = @p3, [Ko" +
                "ntaktNumer1] = @p4, [ShkKlienti] = @p5, [GrRabatet] = @p6, [GrCmimoret] = @p7 WH" +
                "ERE (([IDKlienti] = @p8))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EmailKontakt1", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KontaktNumer1", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShkKlienti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GrRabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GrCmimoret", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IDKlienti], [Emri], [EmailKontakt1], [KontaktNumer1], [ShkKlienti], [GrRa" +
                "batet], [GrCmimoret] FROM [Klientet]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     IDKlienti, Emri, EmailKontakt1, KontaktNumer1, ShkKlienti, GrRabatet, " +
                "GrCmimoret\r\nFROM         Klientet\r\nWHERE     (IDKlienti = @IDKlienti)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT Klientet.EmailKontakt1, Klientet.Emri, Klientet.GrCmimoret, Klientet.GrRabatet, Klientet.IDKlienti, Klientet.KontaktNumer1, Klientet.ShkKlienti FROM Klientet INNER JOIN KlientDheLokacion ON Klientet.IDKlienti = KlientDheLokacion.IDKlienti INNER JOIN Vizitat ON KlientDheLokacion.IDKlientDheLokacion = Vizitat.IDKlientDheLokacion WHERE (Vizitat.IDVizita = @IDVizita) ORDER BY Klientet.Emri";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.KlientetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.KlientetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.KlientetDataTable dataTable = new MyMobileDataSet.KlientetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDKlienti(MyMobileDataSet.KlientetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KlientetDataTable GetDataBy1(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.KlientetDataTable dataTable = new MyMobileDataSet.KlientetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillRegjistrimiVizites(MyMobileDataSet.KlientetDataTable dataTable, System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KlientetDataTable GetDataBy(System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            MyMobileDataSet.KlientetDataTable dataTable = new MyMobileDataSet.KlientetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.KlientetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Klientet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, string p3, string p4, string p5, string p6, string p7, string p8) {
            return this.Update(p8, p2, p3, p4, p5, p6, p7, p8);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class KonfigurimiTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KonfigurimiTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Konfigurimi";
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("IDAgent", "IDAgent");
            tableMapping.ColumnMappings.Add("GetPayment", "GetPayment");
            tableMapping.ColumnMappings.Add("PrintBill", "PrintBill");
            tableMapping.ColumnMappings.Add("ApplicationMode", "ApplicationMode");
            tableMapping.ColumnMappings.Add("Depo", "Depo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Konfigurimi] WHERE (([DeviceID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Konfigurimi] ([DeviceID], [IDAgent], [GetPayment], [PrintBill], [App" +
                "licationMode], [Depo]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgent", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GetPayment", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PrintBill", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ApplicationMode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Konfigurimi] SET [DeviceID] = @p1, [IDAgent] = @p2, [GetPayment] = @p3, [" +
                "PrintBill] = @p4, [ApplicationMode] = @p5, [Depo] = @p6 WHERE (([DeviceID] = @p7" +
                "))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgent", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GetPayment", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PrintBill", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ApplicationMode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     DeviceID, IDAgent, GetPayment, PrintBill, ApplicationMode, Depo\r\nFROM " +
                "        Konfigurimi";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     ApplicationMode, Depo, DeviceID, GetPayment, IDAgent, PrintBill\r\nFROM " +
                "        Konfigurimi\r\nWHERE     (IDAgent = @IDAgjenti) AND (DeviceID = @DeviceId)" +
                "";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDAgjenti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgent", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceId", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     ApplicationMode, Depo, DeviceID, GetPayment, IDAgent, PrintBill\r\nFROM " +
                "        Konfigurimi\r\nWHERE     (DeviceID = @DevID)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DevID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.KonfigurimiDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.KonfigurimiDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.KonfigurimiDataTable dataTable = new MyMobileDataSet.KonfigurimiDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDAgjentiAndaDeviId(MyMobileDataSet.KonfigurimiDataTable dataTable, string IDAgjenti, string DeviceId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            if ((DeviceId == null)) {
                throw new global::System.ArgumentNullException("DeviceId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(DeviceId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KonfigurimiDataTable GetDataBy1(string IDAgjenti, string DeviceId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            if ((DeviceId == null)) {
                throw new global::System.ArgumentNullException("DeviceId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(DeviceId));
            }
            MyMobileDataSet.KonfigurimiDataTable dataTable = new MyMobileDataSet.KonfigurimiDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Permittance(MyMobileDataSet.KonfigurimiDataTable dataTable, string DevID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((DevID == null)) {
                throw new global::System.ArgumentNullException("DevID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DevID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.KonfigurimiDataTable GetDataBy(string DevID) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((DevID == null)) {
                throw new global::System.ArgumentNullException("DevID");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DevID));
            }
            MyMobileDataSet.KonfigurimiDataTable dataTable = new MyMobileDataSet.KonfigurimiDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.KonfigurimiDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Konfigurimi");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, global::System.Nullable<bool> p3, global::System.Nullable<bool> p4, string p5, string p6) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, global::System.Nullable<bool> p3, global::System.Nullable<bool> p4, string p5, string p6, string p7) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                throw new global::System.ArgumentNullException("p7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, global::System.Nullable<bool> p3, global::System.Nullable<bool> p4, string p5, string p6, string p7) {
            return this.Update(p7, p2, p3, p4, p5, p6, p7);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class LiferimiTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LiferimiTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Liferimi";
            tableMapping.ColumnMappings.Add("IDLiferimi", "IDLiferimi");
            tableMapping.ColumnMappings.Add("DataLiferuar", "DataLiferuar");
            tableMapping.ColumnMappings.Add("KohaLiferuar", "KohaLiferuar");
            tableMapping.ColumnMappings.Add("TitulliLiferimit", "TitulliLiferimit");
            tableMapping.ColumnMappings.Add("DataLiferimit", "DataLiferimit");
            tableMapping.ColumnMappings.Add("KohaLiferimit", "KohaLiferimit");
            tableMapping.ColumnMappings.Add("IDPorosia", "IDPorosia");
            tableMapping.ColumnMappings.Add("Liferuar", "Liferuar");
            tableMapping.ColumnMappings.Add("NrLiferimit", "NrLiferimit");
            tableMapping.ColumnMappings.Add("CmimiTotal", "CmimiTotal");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("ShumaPaguar", "ShumaPaguar");
            tableMapping.ColumnMappings.Add("Aprovuar", "Aprovuar");
            tableMapping.ColumnMappings.Add("LLOJDOK", "LLOJDOK");
            tableMapping.ColumnMappings.Add("NrFatures", "NrFatures");
            tableMapping.ColumnMappings.Add("PayType", "PayType");
            tableMapping.ColumnMappings.Add("TotaliPaTVSH", "TotaliPaTVSH");
            tableMapping.ColumnMappings.Add("NrDetalet", "NrDetalet");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Liferimi] WHERE (([IDLiferimi] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Liferimi] ([DataLiferuar], [KohaLiferuar], [TitulliLiferimit], [DataLiferimit], [KohaLiferimit], [Liferuar], [NrLiferimit], [CmimiTotal], [DeviceID], [SyncStatus], [IDLiferimi], [IDPorosia], [ShumaPaguar], [Aprovuar], [LLOJDOK], [NrFatures], [PayType], [TotaliPaTVSH], [NrDetalet]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KohaLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TitulliLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KohaLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Liferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiTotal", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaPaguar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Aprovuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LLOJDOK", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PayType", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TotaliPaTVSH", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p19", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrDetalet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Liferimi] SET [DataLiferuar] = @p1, [KohaLiferuar] = @p2, [TitulliLiferimit] = @p3, [DataLiferimit] = @p4, [KohaLiferimit] = @p5, [Liferuar] = @p6, [NrLiferimit] = @p7, [CmimiTotal] = @p8, [DeviceID] = @p9, [SyncStatus] = @p10, [IDLiferimi] = @p11, [IDPorosia] = @p12, [ShumaPaguar] = @p13, [Aprovuar] = @p14, [LLOJDOK] = @p15, [NrFatures] = @p16, [PayType] = @p17, [TotaliPaTVSH] = @p18, [NrDetalet] = @p19 WHERE (([IDLiferimi] = @p20))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KohaLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TitulliLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KohaLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Liferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiTotal", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaPaguar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Aprovuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LLOJDOK", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PayType", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TotaliPaTVSH", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p19", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrDetalet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p20", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     DataLiferuar, KohaLiferuar, TitulliLiferimit, DataLiferimit, KohaLiferimit, Liferuar, NrLiferimit, CmimiTotal, DeviceID, SyncStatus, IDLiferimi, IDPorosia, 
                      ShumaPaguar, Aprovuar, LLOJDOK, NrFatures, PayType, TotaliPaTVSH, NrDetalet
FROM         Liferimi
WHERE     (IDLiferimi = @ID)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    Liferimi\r\nSET              Liferuar = @Gjendja, SyncStatus = 0\r\nWHERE  " +
                "   (IDLiferimi = @IDLiferimi)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Gjendja", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "Liferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDLiferimi", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM Liferimi\r\nWHERE     (IDLiferimi = @IDLiferimi)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDLiferimi", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT Aprovuar, CmimiTotal, DataLiferimit, DataLiferuar, DeviceID, IDLiferimi, IDPorosia, KohaLiferimit, KohaLiferuar, LLOJDOK, Liferuar, NrDetalet, NrFatures, NrLiferimit, PayType, ShumaPaguar, SyncStatus, TitulliLiferimit, TotaliPaTVSH FROM Liferimi WHERE (IDPorosia = @IdPorosia)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IdPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "INSERT INTO Liferimi\r\n                      (DataLiferuar, DataLiferimit, IDPoros" +
                "ia, Liferuar, CmimiTotal, NrLiferimit, DeviceID,ShumaPaguar)\r\nVALUES     (@DataL" +
                "iferuar,@DataLiferimit,@IDPorosia,@Liferuar,@CmimiTotal,@NrLiferimit,@DeviceID,@" +
                "ShumaPaguar)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataLiferuar", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataLiferimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Liferuar", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "Liferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CmimiTotal", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiTotal", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NrLiferimit", global::System.Data.SqlDbType.NVarChar, 25, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ShumaPaguar", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaPaguar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "UPDATE    Liferimi\r\nSET              DataLiferuar = @DataLiferuar, KohaLiferuar =" +
                " @KohaLiferuar, Liferuar = 1\r\nWHERE     (IDLiferimi = @IDLiferim)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataLiferuar", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@KohaLiferuar", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "KohaLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDLiferim", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.LiferimiDataTable dataTable, System.Guid ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(ID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.LiferimiDataTable GetData(System.Guid ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(ID));
            MyMobileDataSet.LiferimiDataTable dataTable = new MyMobileDataSet.LiferimiDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDPorosia(MyMobileDataSet.LiferimiDataTable dataTable, global::System.Nullable<global::System.Guid> IdPorosia) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IdPorosia.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IdPorosia.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.LiferimiDataTable GetDataBy4(global::System.Nullable<global::System.Guid> IdPorosia) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IdPorosia.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IdPorosia.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.LiferimiDataTable dataTable = new MyMobileDataSet.LiferimiDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.LiferimiDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Liferimi");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int ChangeStatusLiferimi(byte Gjendja, System.Guid IDLiferimi) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((byte)(Gjendja));
            command.Parameters[1].Value = ((System.Guid)(IDLiferimi));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int Delete1(System.Guid IDLiferimi) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((System.Guid)(IDLiferimi));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int KrijoLiferim(global::System.Nullable<global::System.DateTime> DataLiferuar, global::System.Nullable<global::System.DateTime> DataLiferimit, global::System.Nullable<global::System.Guid> IDPorosia, byte Liferuar, global::System.Nullable<float> CmimiTotal, string NrLiferimit, string DeviceID, global::System.Nullable<float> ShumaPaguar) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[4];
            if ((DataLiferuar.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(DataLiferuar.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DataLiferimit.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(DataLiferimit.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDPorosia.HasValue == true)) {
                command.Parameters[2].Value = ((System.Guid)(IDPorosia.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            command.Parameters[3].Value = ((byte)(Liferuar));
            if ((CmimiTotal.HasValue == true)) {
                command.Parameters[4].Value = ((float)(CmimiTotal.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((NrLiferimit == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(NrLiferimit));
            }
            if ((DeviceID == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(DeviceID));
            }
            if ((ShumaPaguar.HasValue == true)) {
                command.Parameters[7].Value = ((float)(ShumaPaguar.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateLiferimi(global::System.Nullable<global::System.DateTime> DataLiferuar, global::System.Nullable<global::System.DateTime> KohaLiferuar, System.Guid IDLiferim) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[5];
            if ((DataLiferuar.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(DataLiferuar.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((KohaLiferuar.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(KohaLiferuar.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            command.Parameters[2].Value = ((System.Guid)(IDLiferim));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class LiferimiArtTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LiferimiArtTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LiferimiArt";
            tableMapping.ColumnMappings.Add("IDLiferimi", "IDLiferimi");
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("Cmimi", "Cmimi");
            tableMapping.ColumnMappings.Add("SasiaLiferuar", "SasiaLiferuar");
            tableMapping.ColumnMappings.Add("SasiaPorositur", "SasiaPorositur");
            tableMapping.ColumnMappings.Add("ArtEmri", "ArtEmri");
            tableMapping.ColumnMappings.Add("Totali", "Totali");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("Gratis", "Gratis");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("IDArsyeja", "IDArsyeja");
            tableMapping.ColumnMappings.Add("CmimiPaTVSH", "CmimiPaTVSH");
            tableMapping.ColumnMappings.Add("Seri", "Seri");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     IDLiferimi, IDArtikulli, Cmimi, SasiaLiferuar, SasiaPorositur, ArtEmri" +
                ", Totali, DeviceID, Gratis, SyncStatus, IDArsyeja, CmimiPaTVSH, Seri\r\nFROM      " +
                "   LiferimiArt\r\nWHERE     (IDLiferimi = @id)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@id", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.LiferimiArtDataTable dataTable, System.Guid id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.LiferimiArtDataTable GetData(System.Guid id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(id));
            MyMobileDataSet.LiferimiArtDataTable dataTable = new MyMobileDataSet.LiferimiArtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class NumerimInternTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NumerimInternTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NumerimIntern";
            tableMapping.ColumnMappings.Add("IDN", "IDN");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [NumerimIntern] WHERE (([IDN] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDN", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [NumerimIntern] ([DeviceID]) VALUES (@p1)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [NumerimIntern] SET [DeviceID] = @p1 WHERE (([IDN] = @p2))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDN", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IDN], [DeviceID] FROM [NumerimIntern]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO NumerimIntern\r\n                      (DeviceID)\r\nVALUES     (@DeviceI" +
                "D)\r\n";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     MAX(IDN) AS mxIDN\r\nFROM         NumerimIntern";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.NumerimInternDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.NumerimInternDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.NumerimInternDataTable dataTable = new MyMobileDataSet.NumerimInternDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.NumerimInternDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NumerimIntern");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, int p2) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(p2));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string DeviceID) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[1];
            if ((DeviceID == null)) {
                throw new global::System.ArgumentNullException("DeviceID");
            }
            else {
                command.Parameters[0].Value = ((string)(DeviceID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual object MaxIDN() {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[2];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class PorosiaArtTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PorosiaArtTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PorosiaArt";
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("SasiaPorositur", "SasiaPorositur");
            tableMapping.ColumnMappings.Add("CmimiAktual", "CmimiAktual");
            tableMapping.ColumnMappings.Add("Rabatet", "Rabatet");
            tableMapping.ColumnMappings.Add("IDPorosia", "IDPorosia");
            tableMapping.ColumnMappings.Add("SasiLiferuar", "SasiLiferuar");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Gratis", "Gratis");
            tableMapping.ColumnMappings.Add("SasiaPako", "SasiaPako");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("IDArsyeja", "IDArsyeja");
            tableMapping.ColumnMappings.Add("CmimiPaTVSH", "CmimiPaTVSH");
            tableMapping.ColumnMappings.Add("BUM", "BUM");
            tableMapping.ColumnMappings.Add("Seri", "Seri");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [PorosiaArt] WHERE (([IDArtikulli] = @p1) AND ([IDPorosia] = @p2) AND" +
                " ([Seri] = @p3))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [PorosiaArt] ([IDArtikulli], [SasiaPorositur], [CmimiAktual], [Rabatet], [IDPorosia], [SasiLiferuar], [Emri], [Gratis], [SasiaPako], [DeviceID], [SyncStatus], [IDArsyeja], [CmimiPaTVSH], [BUM], [Seri]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPorositur", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiAktual", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gratis", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPako", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArsyeja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiPaTVSH", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "BUM", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [PorosiaArt] SET [IDArtikulli] = @p1, [SasiaPorositur] = @p2, [CmimiAktual] = @p3, [Rabatet] = @p4, [IDPorosia] = @p5, [SasiLiferuar] = @p6, [Emri] = @p7, [Gratis] = @p8, [SasiaPako] = @p9, [DeviceID] = @p10, [SyncStatus] = @p11, [IDArsyeja] = @p12, [CmimiPaTVSH] = @p13, [BUM] = @p14, [Seri] = @p15 WHERE (([IDArtikulli] = @p16) AND ([IDPorosia] = @p17) AND ([Seri] = @p18))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPorositur", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiAktual", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gratis", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPako", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArsyeja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiPaTVSH", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "BUM", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[11];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDArtikulli, SasiaPorositur, CmimiAktual, Rabatet, IDPorosia, SasiLiferuar" +
                ", Emri, Gratis, SasiaPako, DeviceID, SyncStatus, IDArsyeja, CmimiPaTVSH, BUM, Se" +
                "ri FROM PorosiaArt";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM PorosiaArt\r\nWHERE     (IDPorosia = @IDPorosia) AND (IDArtikulli = @ID" +
                "Artikulli) and (Seri = @Seri)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     PorosiaArt.IDArtikulli, PorosiaArt.SasiaPorositur, PorosiaArt.CmimiAktual, PorosiaArt.Rabatet, PorosiaArt.IDPorosia, PorosiaArt.SasiLiferuar, 
                      Artikujt.Emri, PorosiaArt.Gratis, PorosiaArt.SasiaPako, PorosiaArt.CmimiPaTVSH, PorosiaArt.BUM, PorosiaArt.Seri
FROM         PorosiaArt INNER JOIN
                      Artikujt ON PorosiaArt.IDArtikulli = Artikujt.IDArtikulli
WHERE     (PorosiaArt.IDPorosia = @IDPorosia)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT PorosiaArt.BUM, PorosiaArt.CmimiAktual, PorosiaArt.CmimiPaTVSH, PorosiaArt.DeviceID, PorosiaArt.Emri, PorosiaArt.Gratis, PorosiaArt.IDArsyeja, PorosiaArt.IDArtikulli, PorosiaArt.IDPorosia, PorosiaArt.Rabatet, PorosiaArt.SasiLiferuar, PorosiaArt.SasiaPako, PorosiaArt.SasiaPorositur, PorosiaArt.Seri, PorosiaArt.SyncStatus FROM PorosiaArt INNER JOIN Porosite ON PorosiaArt.IDPorosia = Porosite.IDPorosia WHERE (PorosiaArt.SasiaPorositur - PorosiaArt.SasiLiferuar > 0) AND (Porosite.IDVizita = @IDVizita)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"INSERT INTO PorosiaArt
                      (IDArtikulli, SasiaPorositur, CmimiAktual, Rabatet, IDPorosia, Emri, SasiLiferuar, Gratis, SasiaPako, DeviceID, SyncStatus, CmimiPaTVSH, BUM, Seri)
VALUES     (@IDArtikulli,@SasiaPorositur,@CmimiAktual,@Rabatet,@IDPorosia,@Emri,@SasiaLiferuar,@Gratis,@SasiaPako,@DeviceID,  0,@CmimiPaTVSH,@BUM,@Seri)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaPorositur", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPorositur", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CmimiAktual", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiAktual", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Rabatet", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rabatet", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Emri", global::System.Data.SqlDbType.NVarChar, 40, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaLiferuar", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Gratis", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gratis", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaPako", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPako", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CmimiPaTVSH", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiPaTVSH", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@BUM", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "BUM", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"INSERT INTO PorosiaArt
                      (IDArtikulli, SasiaPorositur, CmimiAktual, Rabatet, IDPorosia, Emri, SasiLiferuar, Gratis, SasiaPako, DeviceID, SyncStatus, IDArsyeja, CmimiPaTVSH, 
                      BUM, Seri)
VALUES     (@IDArtikulli,@SasiaPorositur,@CmimiAktual,@Rabatet,@IDPorosia,@Emri,@SasiaLiferuar,@Gratis,@SasiaPako,@DeviceID,  0,@Arsyeja,@CmimiPaTVSH,@BUM,@Seri)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaPorositur", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPorositur", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CmimiAktual", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiAktual", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Rabatet", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rabatet", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Emri", global::System.Data.SqlDbType.NVarChar, 40, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaLiferuar", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Gratis", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gratis", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaPako", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPako", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Arsyeja", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArsyeja", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CmimiPaTVSH", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiPaTVSH", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@BUM", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "BUM", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"SELECT PorosiaArt.BUM, PorosiaArt.CmimiAktual, PorosiaArt.CmimiPaTVSH, PorosiaArt.DeviceID, PorosiaArt.Emri, PorosiaArt.Gratis, PorosiaArt.IDArsyeja, PorosiaArt.IDArtikulli, PorosiaArt.IDPorosia, PorosiaArt.Rabatet, PorosiaArt.SasiLiferuar, PorosiaArt.SasiaPako, PorosiaArt.SasiaPorositur, PorosiaArt.Seri, PorosiaArt.SyncStatus FROM PorosiaArt INNER JOIN Porosite ON PorosiaArt.IDPorosia = Porosite.IDPorosia WHERE (Porosite.IDVizita = @IDVizita) AND (PorosiaArt.SasiLiferuar > 0) ORDER BY PorosiaArt.IDPorosia DESC";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "SELECT     SUM(SasiaPorositur * CmimiAktual - SasiaPorositur * CmimiAktual * Raba" +
                "tet / 100) AS Totali\r\nFROM         PorosiaArt\r\nWHERE     (IDPorosia = @IDPorosia" +
                ")";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[8] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "SELECT     SUM(SasiaPorositur * CmimiAktual - SasiaPorositur * CmimiAktual * Raba" +
                "tet / 100) AS Totali\r\nFROM         PorosiaArt\r\nWHERE     (IDPorosia = @IDPorosia" +
                ")";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[9] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "UPDATE    PorosiaArt\r\nSET              SasiLiferuar = SasiLiferuar + @SasiaLiferu" +
                "ar\r\nWHERE     (IDArtikulli = @IDArtikulli) AND (IDPorosia = @IDPorosia) AND (Ser" +
                "i = @Seri)";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaLiferuar", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiLiferuar", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[10] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "UPDATE    PorosiaArt\r\nSET              SasiaPorositur = @SasiaPorositur\r\nWHERE   " +
                "  (IDArtikulli = @IDArtikulli) AND (IDPorosia = @IDPorosia) AND (Seri = @Seri)";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaPorositur", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPorositur", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.PorosiaArtDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.PorosiaArtDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.PorosiaArtDataTable dataTable = new MyMobileDataSet.PorosiaArtDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetPorosiaByIDPorosia(MyMobileDataSet.PorosiaArtDataTable dataTable, System.Guid IDPorosia) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDPorosia));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.PorosiaArtDataTable GetDataBy1(System.Guid IDPorosia) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDPorosia));
            MyMobileDataSet.PorosiaArtDataTable dataTable = new MyMobileDataSet.PorosiaArtDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetPorositKlientit(MyMobileDataSet.PorosiaArtDataTable dataTable, System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.PorosiaArtDataTable GetDataBy2(System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            MyMobileDataSet.PorosiaArtDataTable dataTable = new MyMobileDataSet.PorosiaArtDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int LiferimetKryera(MyMobileDataSet.PorosiaArtDataTable dataTable, System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.PorosiaArtDataTable GetDataBy41(System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            MyMobileDataSet.PorosiaArtDataTable dataTable = new MyMobileDataSet.PorosiaArtDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.PorosiaArtDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PorosiaArt");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1, System.Guid p2, string p3) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(p2));
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(p3));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<double> p2, global::System.Nullable<float> p3, global::System.Nullable<float> p4, System.Guid p5, global::System.Nullable<double> p6, string p7, global::System.Nullable<double> p8, global::System.Nullable<double> p9, string p10, int p11, global::System.Nullable<int> p12, global::System.Nullable<float> p13, string p14, string p15) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((float)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((float)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.Guid)(p5));
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(p10));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(p11));
            if ((p12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(p12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((float)(p13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p14 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(p14));
            }
            if ((p15 == null)) {
                throw new global::System.ArgumentNullException("p15");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(p15));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string p1, 
                    global::System.Nullable<double> p2, 
                    global::System.Nullable<float> p3, 
                    global::System.Nullable<float> p4, 
                    System.Guid p5, 
                    global::System.Nullable<double> p6, 
                    string p7, 
                    global::System.Nullable<double> p8, 
                    global::System.Nullable<double> p9, 
                    string p10, 
                    int p11, 
                    global::System.Nullable<int> p12, 
                    global::System.Nullable<float> p13, 
                    string p14, 
                    string p15, 
                    string p16, 
                    System.Guid p17, 
                    string p18) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((float)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((float)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(p5));
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(p8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(p10));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(p11));
            if ((p12.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(p12.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((float)(p13.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p14 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(p14));
            }
            if ((p15 == null)) {
                throw new global::System.ArgumentNullException("p15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(p15));
            }
            if ((p16 == null)) {
                throw new global::System.ArgumentNullException("p16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(p16));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.Guid)(p17));
            if ((p18 == null)) {
                throw new global::System.ArgumentNullException("p18");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(p18));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteItem(System.Guid IDPorosia, string IDArtikulli, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((System.Guid)(IDPorosia));
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                command.Parameters[1].Value = ((string)(IDArtikulli));
            }
            if ((Seri == null)) {
                throw new global::System.ArgumentNullException("Seri");
            }
            else {
                command.Parameters[2].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertItemPA(string IDArtikulli, global::System.Nullable<double> SasiaPorositur, global::System.Nullable<float> CmimiAktual, global::System.Nullable<float> Rabatet, System.Guid IDPorosia, string Emri, global::System.Nullable<double> SasiaLiferuar, global::System.Nullable<double> Gratis, global::System.Nullable<double> SasiaPako, string DeviceID, global::System.Nullable<float> CmimiPaTVSH, string BUM, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[4];
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                command.Parameters[0].Value = ((string)(IDArtikulli));
            }
            if ((SasiaPorositur.HasValue == true)) {
                command.Parameters[1].Value = ((double)(SasiaPorositur.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CmimiAktual.HasValue == true)) {
                command.Parameters[2].Value = ((float)(CmimiAktual.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Rabatet.HasValue == true)) {
                command.Parameters[3].Value = ((float)(Rabatet.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            command.Parameters[4].Value = ((System.Guid)(IDPorosia));
            if ((Emri == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Emri));
            }
            if ((SasiaLiferuar.HasValue == true)) {
                command.Parameters[6].Value = ((double)(SasiaLiferuar.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Gratis.HasValue == true)) {
                command.Parameters[7].Value = ((double)(Gratis.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SasiaPako.HasValue == true)) {
                command.Parameters[8].Value = ((double)(SasiaPako.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DeviceID == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(DeviceID));
            }
            if ((CmimiPaTVSH.HasValue == true)) {
                command.Parameters[10].Value = ((float)(CmimiPaTVSH.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((BUM == null)) {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(BUM));
            }
            if ((Seri == null)) {
                throw new global::System.ArgumentNullException("Seri");
            }
            else {
                command.Parameters[12].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQueryWithArsyeje(string IDArtikulli, global::System.Nullable<double> SasiaPorositur, global::System.Nullable<float> CmimiAktual, global::System.Nullable<float> Rabatet, System.Guid IDPorosia, string Emri, global::System.Nullable<double> SasiaLiferuar, global::System.Nullable<double> Gratis, global::System.Nullable<double> SasiaPako, string DeviceID, global::System.Nullable<int> Arsyeja, global::System.Nullable<float> CmimiPaTVSH, string BUM, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[5];
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                command.Parameters[0].Value = ((string)(IDArtikulli));
            }
            if ((SasiaPorositur.HasValue == true)) {
                command.Parameters[1].Value = ((double)(SasiaPorositur.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((CmimiAktual.HasValue == true)) {
                command.Parameters[2].Value = ((float)(CmimiAktual.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Rabatet.HasValue == true)) {
                command.Parameters[3].Value = ((float)(Rabatet.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            command.Parameters[4].Value = ((System.Guid)(IDPorosia));
            if ((Emri == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Emri));
            }
            if ((SasiaLiferuar.HasValue == true)) {
                command.Parameters[6].Value = ((double)(SasiaLiferuar.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Gratis.HasValue == true)) {
                command.Parameters[7].Value = ((double)(Gratis.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SasiaPako.HasValue == true)) {
                command.Parameters[8].Value = ((double)(SasiaPako.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DeviceID == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(DeviceID));
            }
            if ((Arsyeja.HasValue == true)) {
                command.Parameters[10].Value = ((int)(Arsyeja.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((CmimiPaTVSH.HasValue == true)) {
                command.Parameters[11].Value = ((float)(CmimiPaTVSH.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((BUM == null)) {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(BUM));
            }
            if ((Seri == null)) {
                throw new global::System.ArgumentNullException("Seri");
            }
            else {
                command.Parameters[13].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<double> Totali(System.Guid IDPorosia) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[7];
            command.Parameters[0].Value = ((System.Guid)(IDPorosia));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<double>();
            }
            else {
                return new global::System.Nullable<double>(((double)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<double> Totali2(System.Guid IDPorosia) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[8];
            command.Parameters[0].Value = ((System.Guid)(IDPorosia));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<double>();
            }
            else {
                return new global::System.Nullable<double>(((double)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateItem(global::System.Nullable<double> SasiaLiferuar, string IDArtikulli, System.Guid IDPorosia, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[9];
            if ((SasiaLiferuar.HasValue == true)) {
                command.Parameters[0].Value = ((double)(SasiaLiferuar.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                command.Parameters[1].Value = ((string)(IDArtikulli));
            }
            command.Parameters[2].Value = ((System.Guid)(IDPorosia));
            if ((Seri == null)) {
                throw new global::System.ArgumentNullException("Seri");
            }
            else {
                command.Parameters[3].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateSasiaPorositur(global::System.Nullable<double> SasiaPorositur, string IDArtikulli, System.Guid IDPorosia, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[10];
            if ((SasiaPorositur.HasValue == true)) {
                command.Parameters[0].Value = ((double)(SasiaPorositur.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                command.Parameters[1].Value = ((string)(IDArtikulli));
            }
            command.Parameters[2].Value = ((System.Guid)(IDPorosia));
            if ((Seri == null)) {
                throw new global::System.ArgumentNullException("Seri");
            }
            else {
                command.Parameters[3].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class PorositeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PorositeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Porosite";
            tableMapping.ColumnMappings.Add("IDVizita", "IDVizita");
            tableMapping.ColumnMappings.Add("TitulliPorosise", "TitulliPorosise");
            tableMapping.ColumnMappings.Add("DataPerLiferim", "DataPerLiferim");
            tableMapping.ColumnMappings.Add("IDPorosia", "IDPorosia");
            tableMapping.ColumnMappings.Add("DataPorosise", "DataPorosise");
            tableMapping.ColumnMappings.Add("OraPorosise", "OraPorosise");
            tableMapping.ColumnMappings.Add("StatusiPorosise", "StatusiPorosise");
            tableMapping.ColumnMappings.Add("NrPorosise", "NrPorosise");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Porosite] ([IDVizita], [TitulliPorosise], [DataPerLiferim], [IDPoros" +
                "ia], [DataPorosise], [OraPorosise], [StatusiPorosise], [NrPorosise], [DeviceID]," +
                " [SyncStatus]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TitulliPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPerLiferim", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StatusiPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Porosite] SET [IDVizita] = @p1, [TitulliPorosise] = @p2, [DataPerLiferim] = @p3, [IDPorosia] = @p4, [DataPorosise] = @p5, [OraPorosise] = @p6, [StatusiPorosise] = @p7, [NrPorosise] = @p8, [DeviceID] = @p9, [SyncStatus] = @p10 WHERE (([IDPorosia] = @p11))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TitulliPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPerLiferim", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StatusiPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrPorosise", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     IDVizita, TitulliPorosise, DataPerLiferim, IDPorosia, DataPorosise, Or" +
                "aPorosise, StatusiPorosise, NrPorosise, DeviceID, SyncStatus\r\nFROM         Poros" +
                "ite\r\nWHERE     (IDVizita = @IDV)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDV", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO Porosite\r\n                      (IDVizita, DeviceID)\r\nVALUES     (@ID" +
                "Vizita,@DeviceID)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "UPDATE    Porosite\r\nSET              NrPorosise = @NrPorosise, DeviceID = @DevID," +
                " SyncStatus = 0\r\nWHERE     (IDPorosia = @IDPorosia)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NrPorosise", global::System.Data.SqlDbType.NVarChar, 25, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrPorosise", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DevID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"UPDATE    Porosite
SET              DataPerLiferim = @DataPerLiferim, DataPorosise = @DataPorosise, StatusiPorosise = @StatusiPorosise, IDVizita = @IDVizita, 
                      NrPorosise = @NrPorosise, SyncStatus = 0, OraPorosise = @OraPorosise
WHERE     (IDPorosia = @IDPorosia)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataPerLiferim", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPerLiferim", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataPorosise", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPorosise", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@StatusiPorosise", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "StatusiPorosise", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NrPorosise", global::System.Data.SqlDbType.NVarChar, 25, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrPorosise", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@OraPorosise", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraPorosise", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDPorosia", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPorosia", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.PorositeDataTable dataTable, global::System.Nullable<global::System.Guid> IDV) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDV.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDV.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.PorositeDataTable GetData(global::System.Nullable<global::System.Guid> IDV) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDV.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDV.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.PorositeDataTable dataTable = new MyMobileDataSet.PorositeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.PorositeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Porosite");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<global::System.Guid> p1) {
            if ((p1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(p1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<global::System.Guid> p1, string p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<global::System.Guid> p4, global::System.Nullable<global::System.DateTime> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<byte> p7, string p8, string p9, int p10) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((byte)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(p9));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(p10));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> p1, string p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<global::System.Guid> p4, global::System.Nullable<global::System.DateTime> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<byte> p7, string p8, string p9, int p10, global::System.Nullable<global::System.Guid> p11) {
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte)(p7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(p9));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(p10));
            if ((p11.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.Guid)(p11.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> p1, string p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<global::System.DateTime> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<byte> p7, string p8, string p9, int p10, global::System.Nullable<global::System.Guid> p11) {
            return this.Update(p1, p2, p3, p11, p5, p6, p7, p8, p9, p10, p11);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int KrijoPorosi(global::System.Nullable<global::System.Guid> IDVizita, string DeviceID) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[1];
            if ((IDVizita.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(IDVizita.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DeviceID == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(DeviceID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateNrPorDevID(string NrPorosise, string DevID, System.Guid IDPorosia) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[2];
            if ((NrPorosise == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(NrPorosise));
            }
            if ((DevID == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(DevID));
            }
            command.Parameters[2].Value = ((System.Guid)(IDPorosia));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePorosite(global::System.Nullable<global::System.DateTime> DataPerLiferim, global::System.Nullable<global::System.DateTime> DataPorosise, global::System.Nullable<byte> StatusiPorosise, System.Guid IDVizita, string NrPorosise, global::System.Nullable<global::System.DateTime> OraPorosise, System.Guid IDPorosia) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[3];
            if ((DataPerLiferim.HasValue == true)) {
                command.Parameters[0].Value = ((System.DateTime)(DataPerLiferim.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DataPorosise.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(DataPorosise.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((StatusiPorosise.HasValue == true)) {
                command.Parameters[2].Value = ((byte)(StatusiPorosise.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            command.Parameters[3].Value = ((System.Guid)(IDVizita));
            if ((NrPorosise == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(NrPorosise));
            }
            if ((OraPorosise.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(OraPorosise.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            command.Parameters[6].Value = ((System.Guid)(IDPorosia));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class PriceGroupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PriceGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PriceGroup";
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("PriceIncludesVAT", "PriceIncludesVAT");
            tableMapping.ColumnMappings.Add("AllowInvoiceDisc_", "AllowInvoiceDisc_");
            tableMapping.ColumnMappings.Add("VATBus_PostingGr_(Price)", "VATBus_PostingGr_(Price)");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Allow Line Disc_", "Allow Line Disc_");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [PriceGroup] WHERE (([Code] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Code", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [PriceGroup] ([Code], [PriceIncludesVAT], [AllowInvoiceDisc_], [VATBu" +
                "s_PostingGr_(Price)], [Description], [Allow Line Disc_]) VALUES (@p1, @p2, @p3, " +
                "@p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Code", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PriceIncludesVAT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AllowInvoiceDisc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "VATBus_PostingGr_(Price)", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Description", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Allow Line Disc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [PriceGroup] SET [Code] = @p1, [PriceIncludesVAT] = @p2, [AllowInvoiceDisc" +
                "_] = @p3, [VATBus_PostingGr_(Price)] = @p4, [Description] = @p5, [Allow Line Dis" +
                "c_] = @p6 WHERE (([Code] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Code", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PriceIncludesVAT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AllowInvoiceDisc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "VATBus_PostingGr_(Price)", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Description", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Allow Line Disc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Code", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Code], [PriceIncludesVAT], [AllowInvoiceDisc_], [VATBus_PostingGr_(Price)" +
                "], [Description], [Allow Line Disc_] FROM [PriceGroup]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.PriceGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.PriceGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.PriceGroupDataTable dataTable = new MyMobileDataSet.PriceGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.PriceGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PriceGroup");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, byte p2, byte p3, string p4, string p5, byte p6) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((byte)(p2));
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(p3));
            if ((p4 == null)) {
                throw new global::System.ArgumentNullException("p4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((byte)(p6));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, byte p2, byte p3, string p4, string p5, byte p6, string p7) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((byte)(p2));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(p3));
            if ((p4 == null)) {
                throw new global::System.ArgumentNullException("p4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((byte)(p6));
            if ((p7 == null)) {
                throw new global::System.ArgumentNullException("p7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(byte p2, byte p3, string p4, string p5, byte p6, string p7) {
            return this.Update(p7, p2, p3, p4, p5, p6, p7);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class RabatetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RabatetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rabatet";
            tableMapping.ColumnMappings.Add("IDRabat", "IDRabat");
            tableMapping.ColumnMappings.Add("GrRabatet", "GrRabatet");
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("Rabatet", "Rabatet");
            tableMapping.ColumnMappings.Add("CopGratis", "CopGratis");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Rabatet] WHERE (([IDRabat] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDRabat", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Rabatet] ([GrRabatet], [IDArtikulli], [Rabatet], [CopGratis]) VALUES" +
                " (@p1, @p2, @p3, @p4)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GrRabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CopGratis", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Rabatet] SET [GrRabatet] = @p1, [IDArtikulli] = @p2, [Rabatet] = @p3, [Co" +
                "pGratis] = @p4 WHERE (([IDRabat] = @p5))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "GrRabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rabatet", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CopGratis", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDRabat", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     IDRabat, GrRabatet, IDArtikulli, Rabatet, CopGratis\r\nFROM         Raba" +
                "tet";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.RabatetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.RabatetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.RabatetDataTable dataTable = new MyMobileDataSet.RabatetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.RabatetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rabatet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, global::System.Nullable<float> p3, global::System.Nullable<int> p4) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((float)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, global::System.Nullable<float> p3, global::System.Nullable<int> p4, int p5) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((float)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(p5));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class SalesPriceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SalesPriceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SalesPrice";
            tableMapping.ColumnMappings.Add("ItemNo_", "ItemNo_");
            tableMapping.ColumnMappings.Add("SalesType", "SalesType");
            tableMapping.ColumnMappings.Add("SalesCode", "SalesCode");
            tableMapping.ColumnMappings.Add("StartingDate", "StartingDate");
            tableMapping.ColumnMappings.Add("CurrencyCode", "CurrencyCode");
            tableMapping.ColumnMappings.Add("VariantCode", "VariantCode");
            tableMapping.ColumnMappings.Add("UnitofMeasureCode", "UnitofMeasureCode");
            tableMapping.ColumnMappings.Add("MinimumQuantity", "MinimumQuantity");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("PriceIncludesVAT", "PriceIncludesVAT");
            tableMapping.ColumnMappings.Add("AllowInvoiceDisc_", "AllowInvoiceDisc_");
            tableMapping.ColumnMappings.Add("VATBus_PostingGr_(Price)", "VATBus_PostingGr_(Price)");
            tableMapping.ColumnMappings.Add("EndingDate", "EndingDate");
            tableMapping.ColumnMappings.Add("AllowLineDisc_", "AllowLineDisc_");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [SalesPrice] WHERE (([ItemNo_] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ItemNo_", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [SalesPrice] ([ItemNo_], [SalesType], [SalesCode], [StartingDate], [CurrencyCode], [VariantCode], [UnitofMeasureCode], [MinimumQuantity], [UnitPrice], [PriceIncludesVAT], [AllowInvoiceDisc_], [VATBus_PostingGr_(Price)], [EndingDate], [AllowLineDisc_]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ItemNo_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SalesType", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SalesCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StartingDate", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CurrencyCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "VariantCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "UnitofMeasureCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "MinimumQuantity", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "UnitPrice", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PriceIncludesVAT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AllowInvoiceDisc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "VATBus_PostingGr_(Price)", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EndingDate", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AllowLineDisc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SalesPrice] SET [ItemNo_] = @p1, [SalesType] = @p2, [SalesCode] = @p3, [StartingDate] = @p4, [CurrencyCode] = @p5, [VariantCode] = @p6, [UnitofMeasureCode] = @p7, [MinimumQuantity] = @p8, [UnitPrice] = @p9, [PriceIncludesVAT] = @p10, [AllowInvoiceDisc_] = @p11, [VATBus_PostingGr_(Price)] = @p12, [EndingDate] = @p13, [AllowLineDisc_] = @p14 WHERE (([ItemNo_] = @p15))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ItemNo_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SalesType", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SalesCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StartingDate", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CurrencyCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "VariantCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "UnitofMeasureCode", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "MinimumQuantity", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "UnitPrice", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PriceIncludesVAT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AllowInvoiceDisc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "VATBus_PostingGr_(Price)", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "EndingDate", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "AllowLineDisc_", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ItemNo_", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [ItemNo_], [SalesType], [SalesCode], [StartingDate], [CurrencyCode], [VariantCode], [UnitofMeasureCode], [MinimumQuantity], [UnitPrice], [PriceIncludesVAT], [AllowInvoiceDisc_], [VATBus_PostingGr_(Price)], [EndingDate], [AllowLineDisc_] FROM [SalesPrice]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.SalesPriceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.SalesPriceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.SalesPriceDataTable dataTable = new MyMobileDataSet.SalesPriceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.SalesPriceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SalesPrice");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, int p2, string p3, System.DateTime p4, string p5, string p6, string p7, double p8, double p9, byte p10, byte p11, string p12, System.DateTime p13, byte p14) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(p2));
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(p4));
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                throw new global::System.ArgumentNullException("p6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                throw new global::System.ArgumentNullException("p7");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(p8));
            this.Adapter.InsertCommand.Parameters[8].Value = ((double)(p9));
            this.Adapter.InsertCommand.Parameters[9].Value = ((byte)(p10));
            this.Adapter.InsertCommand.Parameters[10].Value = ((byte)(p11));
            if ((p12 == null)) {
                throw new global::System.ArgumentNullException("p12");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(p12));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(p13));
            this.Adapter.InsertCommand.Parameters[13].Value = ((byte)(p14));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, int p2, string p3, System.DateTime p4, string p5, string p6, string p7, double p8, double p9, byte p10, byte p11, string p12, System.DateTime p13, byte p14, string p15) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(p2));
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(p4));
            if ((p5 == null)) {
                throw new global::System.ArgumentNullException("p5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                throw new global::System.ArgumentNullException("p6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                throw new global::System.ArgumentNullException("p7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(p8));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(p9));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((byte)(p10));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((byte)(p11));
            if ((p12 == null)) {
                throw new global::System.ArgumentNullException("p12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(p12));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(p13));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((byte)(p14));
            if ((p15 == null)) {
                throw new global::System.ArgumentNullException("p15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(p15));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int p2, string p3, System.DateTime p4, string p5, string p6, string p7, double p8, double p9, byte p10, byte p11, string p12, System.DateTime p13, byte p14, string p15) {
            return this.Update(p15, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class StatusiVizitesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StatusiVizitesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StatusiVizites";
            tableMapping.ColumnMappings.Add("IDStatusiVizites", "IDStatusiVizites");
            tableMapping.ColumnMappings.Add("Gjendja", "Gjendja");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [StatusiVizites] WHERE (([IDStatusiVizites] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [StatusiVizites] ([IDStatusiVizites], [Gjendja]) VALUES (@p1, @p2)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gjendja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [StatusiVizites] SET [IDStatusiVizites] = @p1, [Gjendja] = @p2 WHERE (([ID" +
                "StatusiVizites] = @p3))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gjendja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDStatusiVizites, Gjendja FROM StatusiVizites";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Gjendja, IDStatusiVizites FROM StatusiVizites WHERE (IDStatusiVizites = @I" +
                "DStat)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDStat", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.StatusiVizitesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.StatusiVizitesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.StatusiVizitesDataTable dataTable = new MyMobileDataSet.StatusiVizitesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDstat(MyMobileDataSet.StatusiVizitesDataTable dataTable, string IDStat) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDStat == null)) {
                throw new global::System.ArgumentNullException("IDStat");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDStat));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.StatusiVizitesDataTable GetDataBy(string IDStat) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDStat == null)) {
                throw new global::System.ArgumentNullException("IDStat");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDStat));
            }
            MyMobileDataSet.StatusiVizitesDataTable dataTable = new MyMobileDataSet.StatusiVizitesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.StatusiVizitesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "StatusiVizites");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, string p3) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, string p3) {
            return this.Update(p3, p2, p3);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class StoqetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StoqetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Stoqet";
            tableMapping.ColumnMappings.Add("Shifra", "Shifra");
            tableMapping.ColumnMappings.Add("Depo", "Depo");
            tableMapping.ColumnMappings.Add("NjesiaMatse", "NjesiaMatse");
            tableMapping.ColumnMappings.Add("Paketimi", "Paketimi");
            tableMapping.ColumnMappings.Add("Sasia", "Sasia");
            tableMapping.ColumnMappings.Add("Paketa", "Paketa");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("Seri", "Seri");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Stoqet] ([Shifra], [Depo], [NjesiaMatse], [Paketimi], [Sasia], [Pake" +
                "ta], [SyncStatus], [Seri]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Shifra", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NjesiaMatse", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Paketimi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Paketa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Shifra], [Depo], [NjesiaMatse], [Paketimi], [Sasia], [Paketa], [SyncStatu" +
                "s], [Seri] FROM [Stoqet]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    Stoqet\r\nSET              Sasia = Sasia - @Sasia\r\nWHERE     (Shifra = @I" +
                "DArtikuli) AND (Depo = @Depo) AND (Seri = @Seri)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Sasia", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikuli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "Shifra", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Depo", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "UPDATE    Stoqet\r\nSET              Sasia = Sasia - @Sasia, SyncStatus = 0\r\nWHERE " +
                "    (Shifra = @Shifra) AND (Depo = @Depo) AND (Seri = @Seri)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Sasia", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Shifra", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "Shifra", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Depo", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Seri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Seri", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.StoqetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.StoqetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.StoqetDataTable dataTable = new MyMobileDataSet.StoqetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.StoqetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Stoqet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, global::System.Nullable<double> p4, double p5, global::System.Nullable<double> p6, global::System.Nullable<int> p7, string p8) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(p5));
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateSasiaKthyer(double Sasia, string IDArtikuli, string Depo, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((double)(Sasia));
            if ((IDArtikuli == null)) {
                throw new global::System.ArgumentNullException("IDArtikuli");
            }
            else {
                command.Parameters[1].Value = ((string)(IDArtikuli));
            }
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                command.Parameters[2].Value = ((string)(Depo));
            }
            if ((Seri == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStoku(double Sasia, string Shifra, string Depo, string Seri) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((double)(Sasia));
            if ((Shifra == null)) {
                throw new global::System.ArgumentNullException("Shifra");
            }
            else {
                command.Parameters[1].Value = ((string)(Shifra));
            }
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                command.Parameters[2].Value = ((string)(Depo));
            }
            if ((Seri == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Seri));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class SyncConfigurationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SyncConfigurationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SyncConfiguration";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            tableMapping.ColumnMappings.Add("SyncDirection", "SyncDirection");
            tableMapping.ColumnMappings.Add("SyncDay", "SyncDay");
            tableMapping.ColumnMappings.Add("SyncOrder", "SyncOrder");
            tableMapping.ColumnMappings.Add("FilterUp", "FilterUp");
            tableMapping.ColumnMappings.Add("FilterDwn", "FilterDwn");
            tableMapping.ColumnMappings.Add("PK_FieldName", "PK_FieldName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [SyncConfiguration] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [SyncConfiguration] ([TableName], [SyncDirection], [SyncDay], [SyncOr" +
                "der], [FilterUp], [FilterDwn], [PK_FieldName]) VALUES (@p1, @p2, @p3, @p4, @p5, " +
                "@p6, @p7)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TableName", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncDirection", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncDay", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncOrder", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "FilterUp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "FilterDwn", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PK_FieldName", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [SyncConfiguration] SET [TableName] = @p1, [SyncDirection] = @p2, [SyncDay" +
                "] = @p3, [SyncOrder] = @p4, [FilterUp] = @p5, [FilterDwn] = @p6, [PK_FieldName] " +
                "= @p7 WHERE (([ID] = @p8))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TableName", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncDirection", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncDay", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncOrder", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "FilterUp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "FilterDwn", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PK_FieldName", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [TableName], [SyncDirection], [SyncDay], [SyncOrder], [FilterUp], [F" +
                "ilterDwn], [PK_FieldName] FROM [SyncConfiguration]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.SyncConfigurationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.SyncConfigurationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.SyncConfigurationDataTable dataTable = new MyMobileDataSet.SyncConfigurationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.SyncConfigurationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SyncConfiguration");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<int> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, string p5, string p6, string p7) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<int> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, string p5, string p6, string p7, int p8) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(p8));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class VendetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VendetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Vendet";
            tableMapping.ColumnMappings.Add("IDVendi", "IDVendi");
            tableMapping.ColumnMappings.Add("NrPostal", "NrPostal");
            tableMapping.ColumnMappings.Add("Qyteti", "Qyteti");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Vendet] WHERE (([IDVendi] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVendi", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Vendet] ([NrPostal], [Qyteti]) VALUES (@p1, @p2)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrPostal", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Qyteti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Vendet] SET [NrPostal] = @p1, [Qyteti] = @p2 WHERE (([IDVendi] = @p3))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrPostal", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Qyteti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVendi", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IDVendi], [NrPostal], [Qyteti] FROM [Vendet]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.VendetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.VendetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.VendetDataTable dataTable = new MyMobileDataSet.VendetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.VendetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Vendet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, int p3) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class VizitatTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VizitatTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Vizitat";
            tableMapping.ColumnMappings.Add("IDVizita", "IDVizita");
            tableMapping.ColumnMappings.Add("DataPlanifikimit", "DataPlanifikimit");
            tableMapping.ColumnMappings.Add("OraPlanifikimit", "OraPlanifikimit");
            tableMapping.ColumnMappings.Add("DataAritjes", "DataAritjes");
            tableMapping.ColumnMappings.Add("OraArritjes", "OraArritjes");
            tableMapping.ColumnMappings.Add("DataRealizimit", "DataRealizimit");
            tableMapping.ColumnMappings.Add("OraRealizimit", "OraRealizimit");
            tableMapping.ColumnMappings.Add("IDAgjenti", "IDAgjenti");
            tableMapping.ColumnMappings.Add("NrRendor", "NrRendor");
            tableMapping.ColumnMappings.Add("IDStatusiVizites", "IDStatusiVizites");
            tableMapping.ColumnMappings.Add("IDKlientDheLokacion", "IDKlientDheLokacion");
            tableMapping.ColumnMappings.Add("MenyraVizites", "MenyraVizites");
            tableMapping.ColumnMappings.Add("Komenti", "Komenti");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Vizitat] WHERE (([IDVizita] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Vizitat] ([IDVizita], [DataPlanifikimit], [OraPlanifikimit], [DataAritjes], [OraArritjes], [DataRealizimit], [OraRealizimit], [IDAgjenti], [NrRendor], [IDStatusiVizites], [IDKlientDheLokacion], [MenyraVizites], [Komenti], [DeviceID], [SyncStatus]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataAritjes", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraArritjes", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataRealizimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraRealizimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrRendor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "MenyraVizites", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Komenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Vizitat] SET [IDVizita] = @p1, [DataPlanifikimit] = @p2, [OraPlanifikimit] = @p3, [DataAritjes] = @p4, [OraArritjes] = @p5, [DataRealizimit] = @p6, [OraRealizimit] = @p7, [IDAgjenti] = @p8, [NrRendor] = @p9, [IDStatusiVizites] = @p10, [IDKlientDheLokacion] = @p11, [MenyraVizites] = @p12, [Komenti] = @p13, [DeviceID] = @p14, [SyncStatus] = @p15 WHERE (([IDVizita] = @p16))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataAritjes", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraArritjes", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataRealizimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraRealizimit", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrRendor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "MenyraVizites", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Komenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[12];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [IDVizita], [DataPlanifikimit], [OraPlanifikimit], [DataAritjes], [OraArritjes], [DataRealizimit], [OraRealizimit], [IDAgjenti], [NrRendor], [IDStatusiVizites], [IDKlientDheLokacion], [MenyraVizites], [Komenti], [DeviceID], [SyncStatus] FROM [Vizitat]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT DataAritjes, DataPlanifikimit, DataRealizimit, DeviceID, IDAgjenti, IDKlientDheLokacion, IDStatusiVizites, IDVizita, Komenti, MenyraVizites, NrRendor, OraArritjes, OraPlanifikimit, OraRealizimit, SyncStatus FROM Vizitat WHERE (IDKlientDheLokacion = @IDKlientDheLokacion) AND (DataPlanifikimit BETWEEN @frstDate AND @lstDate)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlientDheLokacion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@frstDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@lstDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT DataAritjes, DataPlanifikimit, DataRealizimit, DeviceID, IDAgjenti, IDKlientDheLokacion, IDStatusiVizites, IDVizita, Komenti, MenyraVizites, NrRendor, OraArritjes, OraPlanifikimit, OraRealizimit, SyncStatus FROM Vizitat WHERE (IDKlientDheLokacion = @IDKlientDheLokacion) AND (DataPlanifikimit = @DataPlanifikimit)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlientDheLokacion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataPlanifikimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT DataAritjes, DataPlanifikimit, DataRealizimit, DeviceID, IDAgjenti, IDKlie" +
                "ntDheLokacion, IDStatusiVizites, IDVizita, Komenti, MenyraVizites, NrRendor, Ora" +
                "Arritjes, OraPlanifikimit, OraRealizimit, SyncStatus FROM Vizitat WHERE (IDVizit" +
                "a = @IDVizita)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT DataAritjes, DataPlanifikimit, DataRealizimit, DeviceID, IDAgjenti, IDKlientDheLokacion, IDStatusiVizites, IDVizita, Komenti, MenyraVizites, NrRendor, OraArritjes, OraPlanifikimit, OraRealizimit, SyncStatus FROM Vizitat WHERE (IDAgjenti = @IDAgjenti) AND (DataPlanifikimit BETWEEN @frsDate AND @lstDate)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDAgjenti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@frsDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@lstDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT     MAX(IDVizita) AS MIDVIZITA\r\nFROM         Vizitat";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"INSERT INTO Vizitat
                      (DataPlanifikimit, OraPlanifikimit, IDAgjenti, IDStatusiVizites, IDKlientDheLokacion, MenyraVizites, DeviceID, IDVizita, SyncStatus)
VALUES     (@DataPlanifikimit,@OraPlanifikimit,@IDAgjenti, 4,@IDKlientDheLokacion, 1,@DeviceID,@IDVizita, 0)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataPlanifikimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@OraPlanifikimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDAgjenti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlientDheLokacion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = @"INSERT INTO Vizitat
                      (IDAgjenti, NrRendor, IDStatusiVizites, DeviceID, SyncStatus, DataPlanifikimit, DataAritjes, IDKlientDheLokacion, Longitude, Latitude)
VALUES     (@IDAgjenti,@NrRendor,@IDStatusiVizites,@DeviceID,@SyncStatus,@DataPlanifikimit, @DataAritjes, @IDKlientDheLokacion, @Longitude, @Latitude)";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDAgjenti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NrRendor", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrRendor", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDStatusiVizites", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DeviceID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SyncStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataPlanifikimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataAritjes", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataAritjes", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlientDheLokacion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Longitude", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, true, 0, 0, "Longitude", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Latitude", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, true, 0, 0, "Latitude", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[8] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = @"SELECT     DataAritjes, DataPlanifikimit, DataRealizimit, DeviceID, IDAgjenti, IDKlientDheLokacion, IDStatusiVizites, IDVizita, Komenti, MenyraVizites, NrRendor, 
                      OraArritjes, OraPlanifikimit, OraRealizimit, SyncStatus
FROM         Vizitat
WHERE     (IDKlientDheLokacion = @IDKlientLokacion) AND (CONVERT(NCHAR(8), DataPlanifikimit, 3) = @DataPlanifikimi)";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlientLokacion", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@DataPlanifikimi";
            param.Size = 1024;
            param.IsNullable = true;
            this._commandCollection[8].Parameters.Add(param);
            this._commandCollection[9] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit, Vizitat.IDVizita, Vizitat.DataPlanifikimit, Vizitat.OraPlanifikimit, Vizitat.DataAritjes, Vizitat.OraArritjes, 
                      Vizitat.DataRealizimit, Vizitat.OraRealizimit, Vizitat.IDAgjenti, Vizitat.NrRendor, Vizitat.IDStatusiVizites, Vizitat.IDKlientDheLokacion, 
                      Vizitat.MenyraVizites, Vizitat.Komenti, Vizitat.DeviceID, Vizitat.SyncStatus
FROM         Vizitat INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion
WHERE     (Vizitat.IDVizita = @IDvizita)";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDvizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[10] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "UPDATE    Vizitat\r\nSET              IDStatusiVizites = 6, SyncStatus = 0\r\nWHERE  " +
                "   (IDVizita = @IDVizita)";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[11] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "UPDATE    Vizitat\r\nSET              IDStatusiVizites = @IDStatusiVizites, SyncSta" +
                "tus = 0, DataRealizimit = @DataRealizimit, OraRealizimit = @OraRealizimit\r\nWHERE" +
                "     (IDVizita = @IDVizita)";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDStatusiVizites", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDStatusiVizites", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataRealizimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataRealizimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@OraRealizimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "OraRealizimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.VizitatDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.VizitatDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDKlientDheLokacion(MyMobileDataSet.VizitatDataTable dataTable, string IDKlientDheLokacion, System.DateTime frstDate, System.DateTime lstDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientDheLokacion));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(frstDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(lstDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy9(string IDKlientDheLokacion, System.DateTime frstDate, System.DateTime lstDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientDheLokacion));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(frstDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(lstDate));
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDLokacioni(MyMobileDataSet.VizitatDataTable dataTable, string IDKlientDheLokacion, System.DateTime DataPlanifikimit) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientDheLokacion));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DataPlanifikimit));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy(string IDKlientDheLokacion, System.DateTime DataPlanifikimit) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientDheLokacion));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DataPlanifikimit));
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDViz(MyMobileDataSet.VizitatDataTable dataTable, System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy7(System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetLokacionet(MyMobileDataSet.VizitatDataTable dataTable, string IDAgjenti, System.DateTime frsDate, System.DateTime lstDate) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(frsDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(lstDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy8(string IDAgjenti, System.DateTime frsDate, System.DateTime lstDate) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(frsDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(lstDate));
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetMaxIDVizita(MyMobileDataSet.VizitatDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy4() {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SearchVizitat(MyMobileDataSet.VizitatDataTable dataTable, string IDKlientLokacion, string DataPlanifikimi) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((IDKlientLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientLokacion));
            }
            if ((DataPlanifikimi == null)) {
                throw new global::System.ArgumentNullException("DataPlanifikimi");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(DataPlanifikimi));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy21(string IDKlientLokacion, string DataPlanifikimi) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((IDKlientLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientLokacion");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlientLokacion));
            }
            if ((DataPlanifikimi == null)) {
                throw new global::System.ArgumentNullException("DataPlanifikimi");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(DataPlanifikimi));
            }
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SelectLokacioni(MyMobileDataSet.VizitatDataTable dataTable, System.Guid IDvizita) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDvizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.VizitatDataTable GetDataBy5(System.Guid IDvizita) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDvizita));
            MyMobileDataSet.VizitatDataTable dataTable = new MyMobileDataSet.VizitatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.VizitatDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Vizitat");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid p1, System.DateTime p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<global::System.DateTime> p4, global::System.Nullable<global::System.DateTime> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<global::System.DateTime> p7, string p8, global::System.Nullable<int> p9, string p10, string p11, global::System.Nullable<int> p12, string p13, string p14, global::System.Nullable<int> p15) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(p1));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(p2));
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10 == null)) {
                throw new global::System.ArgumentNullException("p10");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11 == null)) {
                throw new global::System.ArgumentNullException("p11");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(p12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(p13));
            }
            if ((p14 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(p14));
            }
            if ((p15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(p15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid p1, 
                    System.DateTime p2, 
                    global::System.Nullable<global::System.DateTime> p3, 
                    global::System.Nullable<global::System.DateTime> p4, 
                    global::System.Nullable<global::System.DateTime> p5, 
                    global::System.Nullable<global::System.DateTime> p6, 
                    global::System.Nullable<global::System.DateTime> p7, 
                    string p8, 
                    global::System.Nullable<int> p9, 
                    string p10, 
                    string p11, 
                    global::System.Nullable<int> p12, 
                    string p13, 
                    string p14, 
                    global::System.Nullable<int> p15, 
                    System.Guid p16) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(p1));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(p2));
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(p7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10 == null)) {
                throw new global::System.ArgumentNullException("p10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11 == null)) {
                throw new global::System.ArgumentNullException("p11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(p12.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((p13 == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(p13));
            }
            if ((p14 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(p14));
            }
            if ((p15.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(p15.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.Guid)(p16));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<global::System.DateTime> p4, global::System.Nullable<global::System.DateTime> p5, global::System.Nullable<global::System.DateTime> p6, global::System.Nullable<global::System.DateTime> p7, string p8, global::System.Nullable<int> p9, string p10, string p11, global::System.Nullable<int> p12, string p13, string p14, global::System.Nullable<int> p15, System.Guid p16) {
            return this.Update(p16, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(System.DateTime DataPlanifikimit, global::System.Nullable<global::System.DateTime> OraPlanifikimit, string IDAgjenti, string IDKlientDheLokacion, string DeviceID, System.Guid IDVizita) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[6];
            command.Parameters[0].Value = ((System.DateTime)(DataPlanifikimit));
            if ((OraPlanifikimit.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(OraPlanifikimit.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                command.Parameters[2].Value = ((string)(IDAgjenti));
            }
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                command.Parameters[3].Value = ((string)(IDKlientDheLokacion));
            }
            if ((DeviceID == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(DeviceID));
            }
            command.Parameters[5].Value = ((System.Guid)(IDVizita));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int KrijoVizite(string IDAgjenti, global::System.Nullable<int> NrRendor, string IDStatusiVizites, string DeviceID, global::System.Nullable<int> SyncStatus, System.DateTime DataPlanifikimit, global::System.Nullable<global::System.DateTime> DataAritjes, string IDKlientDheLokacion, string Longitude, string Latitude) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[7];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                command.Parameters[0].Value = ((string)(IDAgjenti));
            }
            if ((NrRendor.HasValue == true)) {
                command.Parameters[1].Value = ((int)(NrRendor.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDStatusiVizites == null)) {
                throw new global::System.ArgumentNullException("IDStatusiVizites");
            }
            else {
                command.Parameters[2].Value = ((string)(IDStatusiVizites));
            }
            if ((DeviceID == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(DeviceID));
            }
            if ((SyncStatus.HasValue == true)) {
                command.Parameters[4].Value = ((int)(SyncStatus.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            command.Parameters[5].Value = ((System.DateTime)(DataPlanifikimit));
            if ((DataAritjes.HasValue == true)) {
                command.Parameters[6].Value = ((System.DateTime)(DataAritjes.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((IDKlientDheLokacion == null)) {
                throw new global::System.ArgumentNullException("IDKlientDheLokacion");
            }
            else {
                command.Parameters[7].Value = ((string)(IDKlientDheLokacion));
            }
            if ((Longitude == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(Longitude));
            }
            if ((Latitude == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(Latitude));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStatus(System.Guid IDVizita) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[10];
            command.Parameters[0].Value = ((System.Guid)(IDVizita));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateViziten(string IDStatusiVizites, global::System.Nullable<global::System.DateTime> DataRealizimit, global::System.Nullable<global::System.DateTime> OraRealizimit, System.Guid IDVizita) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[11];
            if ((IDStatusiVizites == null)) {
                throw new global::System.ArgumentNullException("IDStatusiVizites");
            }
            else {
                command.Parameters[0].Value = ((string)(IDStatusiVizites));
            }
            if ((DataRealizimit.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(DataRealizimit.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((OraRealizimit.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(OraRealizimit.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            command.Parameters[3].Value = ((System.Guid)(IDVizita));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ListaLiferimeveTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaLiferimeveTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListaLiferimeve";
            tableMapping.ColumnMappings.Add("Shifra", "Shifra");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("CmimiNjesi", "CmimiNjesi");
            tableMapping.ColumnMappings.Add("SasiaPorositur", "SasiaPorositur");
            tableMapping.ColumnMappings.Add("IDPorosia", "IDPorosia");
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("SasiLiferuar", "SasiLiferuar");
            tableMapping.ColumnMappings.Add("TitulliLiferimit", "TitulliLiferimit");
            tableMapping.ColumnMappings.Add("DataLiferimit", "DataLiferimit");
            tableMapping.ColumnMappings.Add("KohaLiferimit", "KohaLiferimit");
            tableMapping.ColumnMappings.Add("EmriLokacionit", "EmriLokacionit");
            tableMapping.ColumnMappings.Add("Liferuar", "Liferuar");
            tableMapping.ColumnMappings.Add("IDLiferimi", "IDLiferimi");
            tableMapping.ColumnMappings.Add("StokuAktual", "StokuAktual");
            tableMapping.ColumnMappings.Add("DataLiferuar", "DataLiferuar");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     Artikujt.Shifra, Artikujt.Emri, Artikujt.CmimiNjesi, PorosiaArt.SasiaPorositur, Porosite.IDPorosia, Artikujt.IDArtikulli, PorosiaArt.SasiLiferuar, 
                      Liferimi.TitulliLiferimit, Liferimi.DataLiferimit, Liferimi.KohaLiferimit, KlientDheLokacion.EmriLokacionit, Liferimi.Liferuar, Liferimi.IDLiferimi, 
                      Artikujt.StokuAktual, Liferimi.DataLiferuar
FROM         Artikujt INNER JOIN
                      PorosiaArt ON Artikujt.IDArtikulli = PorosiaArt.IDArtikulli INNER JOIN
                      Porosite ON PorosiaArt.IDPorosia = Porosite.IDPorosia INNER JOIN
                      Liferimi ON PorosiaArt.IDPorosia = Liferimi.IDPorosia INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion
GROUP BY Artikujt.Shifra, Artikujt.Emri, Artikujt.CmimiNjesi, PorosiaArt.SasiaPorositur, Porosite.IDPorosia, Artikujt.IDArtikulli, PorosiaArt.SasiLiferuar, 
                      Liferimi.TitulliLiferimit, Liferimi.DataLiferimit, Liferimi.KohaLiferimit, KlientDheLokacion.EmriLokacionit, Liferimi.Liferuar, Porosite.IDVizita, 
                      PorosiaArt.SasiaPorositur - PorosiaArt.SasiLiferuar, Liferimi.IDLiferimi, Artikujt.StokuAktual, Liferimi.DataLiferuar
HAVING      (Porosite.IDVizita = @IDVizita)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     Artikujt.Shifra, Artikujt.Emri, Artikujt.CmimiNjesi, PorosiaArt.SasiaPorositur, Porosite.IDPorosia, Artikujt.IDArtikulli, PorosiaArt.SasiLiferuar, 
                      Liferimi.TitulliLiferimit, Liferimi.DataLiferimit, Liferimi.KohaLiferimit, KlientDheLokacion.EmriLokacionit, Liferimi.Liferuar, Liferimi.IDLiferimi, 
                      Artikujt.StokuAktual, Liferimi.DataLiferuar
FROM         Artikujt INNER JOIN
                      PorosiaArt ON Artikujt.IDArtikulli = PorosiaArt.IDArtikulli INNER JOIN
                      Porosite ON PorosiaArt.IDPorosia = Porosite.IDPorosia INNER JOIN
                      Liferimi ON PorosiaArt.IDPorosia = Liferimi.IDPorosia INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion
GROUP BY Artikujt.Shifra, Artikujt.Emri, Artikujt.CmimiNjesi, PorosiaArt.SasiaPorositur, Porosite.IDPorosia, Artikujt.IDArtikulli, PorosiaArt.SasiLiferuar, 
                      Liferimi.TitulliLiferimit, Liferimi.DataLiferimit, Liferimi.KohaLiferimit, KlientDheLokacion.EmriLokacionit, Liferimi.Liferuar, Porosite.IDVizita, 
                      PorosiaArt.SasiaPorositur - PorosiaArt.SasiLiferuar, Liferimi.IDLiferimi, Artikujt.StokuAktual, Liferimi.DataLiferuar
HAVING      (Porosite.IDVizita = @IDVizita) AND (PorosiaArt.SasiLiferuar > 0)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.ListaLiferimeveDataTable dataTable, System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ListaLiferimeveDataTable GetData(System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            MyMobileDataSet.ListaLiferimeveDataTable dataTable = new MyMobileDataSet.ListaLiferimeveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int LiferimetKryera(MyMobileDataSet.ListaLiferimeveDataTable dataTable, System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaLiferimeveDataTable GetDataBy(System.Guid IDVizita) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            MyMobileDataSet.ListaLiferimeveDataTable dataTable = new MyMobileDataSet.ListaLiferimeveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ListaVizitaveTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaVizitaveTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListaVizitave";
            tableMapping.ColumnMappings.Add("Lokacioni", "Lokacioni");
            tableMapping.ColumnMappings.Add("Qyteti", "Qyteti");
            tableMapping.ColumnMappings.Add("Tel/Mobil", "Tel/Mobil");
            tableMapping.ColumnMappings.Add("DataPlanifikimit", "DataPlanifikimit");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Adresa", "Adresa");
            tableMapping.ColumnMappings.Add("Barkodi", "Barkodi");
            tableMapping.ColumnMappings.Add("IDKlientDheLokacion", "IDKlientDheLokacion");
            tableMapping.ColumnMappings.Add("KontaktEmriMbiemri", "KontaktEmriMbiemri");
            tableMapping.ColumnMappings.Add("IDStatusiVizites", "IDStatusiVizites");
            tableMapping.ColumnMappings.Add("IDVizita", "IDVizita");
            tableMapping.ColumnMappings.Add("ShkKlienti", "ShkKlienti");
            tableMapping.ColumnMappings.Add("IDKlienti", "IDKlienti");
            tableMapping.ColumnMappings.Add("NrRendor", "NrRendor");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit AS Lokacioni, Vendet.Qyteti, KlientDheLokacion.[Tel/Mobil], Vizitat.DataPlanifikimit, Klientet.Emri, 
                      KlientDheLokacion.Adresa, KlientDheLokacion.Barkodi, KlientDheLokacion.IDKlientDheLokacion, KlientDheLokacion.KontaktEmriMbiemri, 
                      Vizitat.IDStatusiVizites, Vizitat.IDVizita, Klientet.ShkKlienti, Klientet.IDKlienti, Vizitat.NrRendor
FROM         Vizitat INNER JOIN
                      Agjendet ON Vizitat.IDAgjenti = Agjendet.IDAgjenti INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti INNER JOIN
                      Vendet ON KlientDheLokacion.IDVendi = Vendet.NrPostal
WHERE     (Agjendet.IDAgjenti = @IDAgjenti)
ORDER BY Vizitat.DataPlanifikimit, Vizitat.NrRendor";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDAgjenti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit AS Lokacioni, Vendet.Qyteti, KlientDheLokacion.[Tel/Mobil], Vizitat.DataPlanifikimit, Klientet.Emri, 
                      KlientDheLokacion.Adresa, KlientDheLokacion.Barkodi, KlientDheLokacion.IDKlientDheLokacion, KlientDheLokacion.KontaktEmriMbiemri, 
                      Vizitat.IDStatusiVizites, Vizitat.IDVizita, Klientet.ShkKlienti, Klientet.IDKlienti
FROM         Vizitat INNER JOIN
                      Agjendet ON Vizitat.IDAgjenti = Agjendet.IDAgjenti INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti INNER JOIN
                      Vendet ON KlientDheLokacion.IDVendi = Vendet.NrPostal
WHERE     (Agjendet.IDAgjenti = @IDAgjenti) AND (Vizitat.DataPlanifikimit BETWEEN @FirstDate AND @LastDate)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDAgjenti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@FirstDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@LastDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit AS Lokacioni, Vendet.Qyteti, KlientDheLokacion.[Tel/Mobil], Vizitat.DataPlanifikimit, Klientet.Emri, 
                      KlientDheLokacion.Adresa, KlientDheLokacion.Barkodi, KlientDheLokacion.IDKlientDheLokacion, KlientDheLokacion.KontaktEmriMbiemri, 
                      Vizitat.IDStatusiVizites, Vizitat.IDVizita, Klientet.ShkKlienti, Klientet.IDKlienti, Vizitat.NrRendor
FROM         Vizitat INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti INNER JOIN
                      Vendet ON KlientDheLokacion.IDVendi = Vendet.NrPostal
WHERE     (Vizitat.DataPlanifikimit BETWEEN @frsDate AND @lastDate)
ORDER BY Vizitat.DataPlanifikimit, Vizitat.NrRendor";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@frsDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@lastDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit AS Lokacioni, Vendet.Qyteti, KlientDheLokacion.[Tel/Mobil], Klientet.Emri, KlientDheLokacion.Adresa, 
                      KlientDheLokacion.IDKlientDheLokacion, KlientDheLokacion.KontaktEmriMbiemri, Vizitat.IDStatusiVizites, Vizitat.IDVizita, Klientet.IDKlienti, 
                      Vizitat.NrRendor
FROM         Vizitat INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti INNER JOIN
                      Vendet ON KlientDheLokacion.IDVendi = Vendet.IDVendi
WHERE     (Vizitat.DeviceID = @DevID)
ORDER BY Vizitat.NrRendor";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DevID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT       
KlientDheLokacion.EmriLokacionit AS Lokacioni, Vendet.Qyteti, KlientDheLokacion.[Tel/Mobil], Klientet.Emri, KlientDheLokacion.Adresa, 
KlientDheLokacion.IDKlientDheLokacion, KlientDheLokacion.KontaktEmriMbiemri, Vizitat.IDStatusiVizites, Vizitat.IDVizita, Klientet.IDKlienti, 
Vizitat.NrRendor
FROM         Vizitat INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti INNER JOIN
                      Vendet ON KlientDheLokacion.IDVendi = Vendet.IDVendi
WHERE     (Vizitat.DeviceID = @DevID) AND 
		   Vizitat.DataPlanifikimit between 
@DaysFromDayOfWeek and  @DaysTillEndOfWeek 
ORDER BY Vizitat.NrRendor;";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DevID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DaysFromDayOfWeek", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DaysTillEndOfWeek", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPlanifikimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"SELECT     Porosite.IDVizita, Porosite.IDPorosia, Liferimi.IDLiferimi, ListaArtPorositur.IDListaArtPorositur
FROM         Porosite INNER JOIN
                      ListaArtPorositur ON Porosite.IDVizita = ListaArtPorositur.IDVizita LEFT OUTER JOIN
                      Liferimi ON Porosite.IDPorosia = Liferimi.IDPorosia
WHERE     (Porosite.IDVizita = @IDV)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDV", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByUidAndStatus(MyMobileDataSet.ListaVizitaveDataTable dataTable, string IDAgjenti) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ListaVizitaveDataTable GetData(string IDAgjenti) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            MyMobileDataSet.ListaVizitaveDataTable dataTable = new MyMobileDataSet.ListaVizitaveDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByAgentAndDate(MyMobileDataSet.ListaVizitaveDataTable dataTable, string IDAgjenti, global::System.Nullable<global::System.DateTime> FirstDate, global::System.Nullable<global::System.DateTime> LastDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            if ((FirstDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(FirstDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LastDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(LastDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaVizitaveDataTable GetDataBy1(string IDAgjenti, global::System.Nullable<global::System.DateTime> FirstDate, global::System.Nullable<global::System.DateTime> LastDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDAgjenti == null)) {
                throw new global::System.ArgumentNullException("IDAgjenti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDAgjenti));
            }
            if ((FirstDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(FirstDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((LastDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(LastDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.ListaVizitaveDataTable dataTable = new MyMobileDataSet.ListaVizitaveDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDate(MyMobileDataSet.ListaVizitaveDataTable dataTable, System.DateTime frsDate, System.DateTime lastDate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(frsDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(lastDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaVizitaveDataTable GetDataBy2(System.DateTime frsDate, System.DateTime lastDate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(frsDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(lastDate));
            MyMobileDataSet.ListaVizitaveDataTable dataTable = new MyMobileDataSet.ListaVizitaveDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDeviceIDandNumber(MyMobileDataSet.ListaVizitaveDataTable dataTable, string DevID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((DevID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DevID));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaVizitaveDataTable GetDataBy3(string DevID) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((DevID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DevID));
            }
            MyMobileDataSet.ListaVizitaveDataTable dataTable = new MyMobileDataSet.ListaVizitaveDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDevIdAndNumberAndPeriodTillEndOfWeek(MyMobileDataSet.ListaVizitaveDataTable dataTable, string DevID, System.DateTime DaysFromDayOfWeek, System.DateTime DaysTillEndOfWeek) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((DevID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DevID));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DaysFromDayOfWeek));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(DaysTillEndOfWeek));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaVizitaveDataTable GetDataBy4(string DevID, System.DateTime DaysFromDayOfWeek, System.DateTime DaysTillEndOfWeek) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((DevID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DevID));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DaysFromDayOfWeek));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(DaysTillEndOfWeek));
            MyMobileDataSet.ListaVizitaveDataTable dataTable = new MyMobileDataSet.ListaVizitaveDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Get_Porosi_Liferim_PorosiPritje(MyMobileDataSet.ListaVizitaveDataTable dataTable, global::System.Nullable<global::System.Guid> IDV) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((IDV.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDV.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaVizitaveDataTable GetDataBy(global::System.Nullable<global::System.Guid> IDV) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((IDV.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDV.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.ListaVizitaveDataTable dataTable = new MyMobileDataSet.ListaVizitaveDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ListaShitjeveTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListaShitjeveTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListaShitjeve";
            tableMapping.ColumnMappings.Add("EmriLokacionit", "EmriLokacionit");
            tableMapping.ColumnMappings.Add("NrPorosise", "NrPorosise");
            tableMapping.ColumnMappings.Add("DataPlanifikimit", "DataPlanifikimit");
            tableMapping.ColumnMappings.Add("IDVizita", "IDVizita");
            tableMapping.ColumnMappings.Add("CmimiTotal", "CmimiTotal");
            tableMapping.ColumnMappings.Add("DataLiferimit", "DataLiferimit");
            tableMapping.ColumnMappings.Add("IDLiferimi", "IDLiferimi");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("IDKlientDheLokacion", "IDKlientDheLokacion");
            tableMapping.ColumnMappings.Add("ShkKlienti", "ShkKlienti");
            tableMapping.ColumnMappings.Add("IDKlienti", "IDKlienti");
            tableMapping.ColumnMappings.Add("KontaktEmriMbiemri", "KontaktEmriMbiemri");
            tableMapping.ColumnMappings.Add("ShumaPaguar", "ShumaPaguar");
            tableMapping.ColumnMappings.Add("NrLiferimit", "NrLiferimit");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit, Porosite.NrPorosise, Vizitat.DataPlanifikimit, Vizitat.IDVizita, Liferimi.CmimiTotal, Liferimi.DataLiferimit, 
                      Liferimi.IDLiferimi, Klientet.Emri, KlientDheLokacion.IDKlientDheLokacion, Klientet.ShkKlienti, Klientet.IDKlienti, 
                      KlientDheLokacion.KontaktEmriMbiemri, Liferimi.ShumaPaguar, Liferimi.NrLiferimit
FROM         Porosite INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita INNER JOIN
                      Liferimi ON Porosite.IDPorosia = Liferimi.IDPorosia INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit, Porosite.NrPorosise, Vizitat.DataPlanifikimit, Vizitat.IDVizita, Liferimi.CmimiTotal, Liferimi.DataLiferimit, 
                      Liferimi.IDLiferimi, Klientet.Emri, KlientDheLokacion.IDKlientDheLokacion, Klientet.ShkKlienti, Klientet.IDKlienti
FROM         Porosite INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita INNER JOIN
                      Liferimi ON Porosite.IDPorosia = Liferimi.IDPorosia INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti
WHERE     (Liferimi.DataLiferimit BETWEEN @frsDate AND @finDate) AND (Klientet.IDKlienti = @IDKlienti)
ORDER BY Liferimi.DataLiferimit";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@frsDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@finDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit, Porosite.NrPorosise, Vizitat.DataPlanifikimit, Vizitat.IDVizita, Liferimi.CmimiTotal, Liferimi.DataLiferimit, 
                      Liferimi.IDLiferimi, Klientet.Emri, KlientDheLokacion.IDKlientDheLokacion, Klientet.ShkKlienti, Klientet.IDKlienti
FROM         Porosite INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita INNER JOIN
                      Liferimi ON Porosite.IDPorosia = Liferimi.IDPorosia INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti
WHERE     (Liferimi.DataLiferimit BETWEEN @frsDate AND @finDate) AND (KlientDheLokacion.IDKlientDheLokacion = @IDKlienti)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@frsDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@finDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     KlientDheLokacion.EmriLokacionit, Vizitat.DataPlanifikimit, Vizitat.IDVizita, Liferimi.CmimiTotal, Liferimi.IDLiferimi, Liferimi.DataLiferuar, 
                      Liferimi.DataLiferimit, KlientDheLokacion.KontaktEmriMbiemri, Porosite.IDPorosia, Liferimi.Aprovuar, Liferimi.ShumaPaguar, Liferimi.NrLiferimit, 
                      KlientDheLokacion.IDKlientDheLokacion, Porosite.NrPorosise
FROM         Porosite INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita INNER JOIN
                      Liferimi ON Porosite.IDPorosia = Liferimi.IDPorosia INNER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion
WHERE     (Liferimi.Aprovuar = @aprovuar)
ORDER BY Porosite.NrPorosise";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@aprovuar", global::System.Data.SqlDbType.Bit, 2, global::System.Data.ParameterDirection.Input, true, 0, 0, "Aprovuar", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.ListaShitjeveDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ListaShitjeveDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.ListaShitjeveDataTable dataTable = new MyMobileDataSet.ListaShitjeveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillListByKlientANDdate(MyMobileDataSet.ListaShitjeveDataTable dataTable, global::System.Nullable<global::System.DateTime> frsDate, global::System.Nullable<global::System.DateTime> finDate, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((frsDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(frsDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((finDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(finDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDKlienti == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaShitjeveDataTable GetDataBy(global::System.Nullable<global::System.DateTime> frsDate, global::System.Nullable<global::System.DateTime> finDate, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((frsDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(frsDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((finDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(finDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDKlienti == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ListaShitjeveDataTable dataTable = new MyMobileDataSet.ListaShitjeveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillListByKLokacion(MyMobileDataSet.ListaShitjeveDataTable dataTable, global::System.Nullable<global::System.DateTime> frsDate, global::System.Nullable<global::System.DateTime> finDate, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((frsDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(frsDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((finDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(finDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDKlienti == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaShitjeveDataTable GetDataBy1(global::System.Nullable<global::System.DateTime> frsDate, global::System.Nullable<global::System.DateTime> finDate, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((frsDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(frsDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((finDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(finDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDKlienti == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ListaShitjeveDataTable dataTable = new MyMobileDataSet.ListaShitjeveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SearchLiferimet(MyMobileDataSet.ListaShitjeveDataTable dataTable, global::System.Nullable<bool> aprovuar) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((aprovuar.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((bool)(aprovuar.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ListaShitjeveDataTable GetDataBy2(global::System.Nullable<bool> aprovuar) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((aprovuar.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((bool)(aprovuar.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.ListaShitjeveDataTable dataTable = new MyMobileDataSet.ListaShitjeveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ArtikujtShiturTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujtShiturTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ArtikujtShitur";
            tableMapping.ColumnMappings.Add("CmimiTotal", "CmimiTotal");
            tableMapping.ColumnMappings.Add("NrLiferimit", "NrLiferimit");
            tableMapping.ColumnMappings.Add("ArtEmri", "ArtEmri");
            tableMapping.ColumnMappings.Add("Cmimi", "Cmimi");
            tableMapping.ColumnMappings.Add("Totali", "Totali");
            tableMapping.ColumnMappings.Add("IDLiferimi", "IDLiferimi");
            tableMapping.ColumnMappings.Add("DataLiferimit", "DataLiferimit");
            tableMapping.ColumnMappings.Add("IDVizita", "IDVizita");
            tableMapping.ColumnMappings.Add("EmriLokacionit", "EmriLokacionit");
            tableMapping.ColumnMappings.Add("Adresa", "Adresa");
            tableMapping.ColumnMappings.Add("KontaktEmriMbiemri", "KontaktEmriMbiemri");
            tableMapping.ColumnMappings.Add("Tel/Mobil", "Tel/Mobil");
            tableMapping.ColumnMappings.Add("Qyteti", "Qyteti");
            tableMapping.ColumnMappings.Add("SasiaLiferuar", "SasiaLiferuar");
            tableMapping.ColumnMappings.Add("Seri", "Seri");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     Liferimi.CmimiTotal, Liferimi.NrLiferimit, (LiferimiArt.ArtEmri + '     ' + LiferimiArt.Seri) as ArtEmri, LiferimiArt.Cmimi, LiferimiArt.SasiaLiferuar, LiferimiArt.Totali, Liferimi.IDLiferimi, 
                      Liferimi.DataLiferimit, Porosite.IDVizita, KlientDheLokacion.EmriLokacionit, KlientDheLokacion.Adresa, KlientDheLokacion.KontaktEmriMbiemri, 
                      KlientDheLokacion.[Tel/Mobil], Vendet.Qyteti,LiferimiArt.Seri
FROM         LiferimiArt INNER JOIN
                      Liferimi ON LiferimiArt.IDLiferimi = Liferimi.IDLiferimi INNER JOIN
                      Porosite ON Liferimi.IDPorosia = Porosite.IDPorosia INNER JOIN
                      Vizitat ON Porosite.IDVizita = Vizitat.IDVizita LEFT OUTER JOIN
                      KlientDheLokacion ON Vizitat.IDKlientDheLokacion = KlientDheLokacion.IDKlientDheLokacion INNER JOIN
                      Klientet ON KlientDheLokacion.IDKlienti = Klientet.IDKlienti LEFT OUTER JOIN
                      Vendet ON KlientDheLokacion.IDVendi = Vendet.NrPostal
WHERE     (Porosite.IDVizita = @IDVizita) AND (Liferimi.DataLiferimit = @DataLiferimit) AND (Liferimi.IDLiferimi = @IDLiferimi)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDVizita", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDVizita", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DataLiferimit", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataLiferimit", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDLiferimi", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDLiferimi", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.ArtikujtShiturDataTable dataTable, System.Guid IDVizita, global::System.Nullable<global::System.DateTime> DataLiferimit, System.Guid IDLiferimi) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((DataLiferimit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DataLiferimit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.Guid)(IDLiferimi));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ArtikujtShiturDataTable GetData(System.Guid IDVizita, global::System.Nullable<global::System.DateTime> DataLiferimit, System.Guid IDLiferimi) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDVizita));
            if ((DataLiferimit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DataLiferimit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.Guid)(IDLiferimi));
            MyMobileDataSet.ArtikujtShiturDataTable dataTable = new MyMobileDataSet.ArtikujtShiturDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ArtikujtTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujtTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Artikujt";
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("CmimiNjesi", "CmimiNjesi");
            tableMapping.ColumnMappings.Add("SasiaPako", "SasiaPako");
            tableMapping.ColumnMappings.Add("Sasia", "Sasia");
            tableMapping.ColumnMappings.Add("CmimiPako", "CmimiPako");
            tableMapping.ColumnMappings.Add("Shifra", "Shifra");
            tableMapping.ColumnMappings.Add("Barkod", "Barkod");
            tableMapping.ColumnMappings.Add("StokuAktual", "StokuAktual");
            tableMapping.ColumnMappings.Add("TePorositur", "TePorositur");
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("Standard", "Standard");
            tableMapping.ColumnMappings.Add("BUM", "BUM");
            tableMapping.ColumnMappings.Add("UPP", "UPP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Artikujt] WHERE (([IDArtikulli] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Artikujt] ([Emri], [CmimiNjesi], [SasiaPako], [Sasia], [CmimiPako], " +
                "[Shifra], [Barkod], [StokuAktual], [TePorositur], [IDArtikulli], [Standard], [BU" +
                "M], [UPP]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12" +
                ", @p13)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiNjesi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPako", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiPako", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Shifra", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkod", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StokuAktual", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TePorositur", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Standard", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "BUM", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "UPP", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Artikujt] SET [Emri] = @p1, [CmimiNjesi] = @p2, [SasiaPako] = @p3, [Sasia] = @p4, [CmimiPako] = @p5, [Shifra] = @p6, [Barkod] = @p7, [StokuAktual] = @p8, [TePorositur] = @p9, [IDArtikulli] = @p10, [Standard] = @p11, [BUM] = @p12, [UPP] = @p13 WHERE (([IDArtikulli] = @p14))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiNjesi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SasiaPako", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CmimiPako", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Shifra", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkod", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StokuAktual", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TePorositur", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Standard", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "BUM", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "UPP", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[8];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     Emri, CmimiNjesi, SasiaPako, Sasia, CmimiPako, Shifra, Barkod, StokuAk" +
                "tual, TePorositur, IDArtikulli, Standard, BUM, UPP\r\nFROM         Artikujt";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT BUM, Barkod, CmimiNjesi, CmimiPako, Emri, IDArtikulli, Sasia, SasiaPako, S" +
                "hifra, Standard, StokuAktual, TePorositur, UPP FROM Artikujt WHERE (Emri = @Emri" +
                ")";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Emri", global::System.Data.SqlDbType.NVarChar, 40, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     Artikujt.Barkod, Artikujt.CmimiNjesi, Artikujt.CmimiPako, Artikujt.Emri, Artikujt.IDArtikulli, Artikujt.Sasia, Artikujt.SasiaPako, Artikujt.Shifra, 
                      Artikujt.StokuAktual, Artikujt.TePorositur, Rabatet.Rabatet
FROM         Artikujt INNER JOIN
                      Rabatet ON Artikujt.IDArtikulli = Rabatet.IDArtikulli
WHERE     (Artikujt.Standard = 1)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT BUM, Barkod, CmimiNjesi, CmimiPako, Emri, IDArtikulli, Sasia, SasiaPako, S" +
                "hifra, Standard, StokuAktual, TePorositur, UPP FROM Artikujt WHERE (StokuAktual " +
                "> 0)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT BUM, Barkod, CmimiNjesi, CmimiPako, Emri, IDArtikulli, Sasia, SasiaPako, S" +
                "hifra, Standard, StokuAktual, TePorositur, UPP FROM Artikujt WHERE (Barkod = @Ba" +
                "rkod)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Barkod", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkod", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Artikujt.CmimiNjesi, Artikujt.SasiaPako, Artikujt.Sasia, Artikujt.CmimiPako, Artikujt.Shifra, Artikujt.Barkod, 
                      Artikujt.StokuAktual, Artikujt.TePorositur, Artikujt.Standard, Rabatet.Rabatet, Rabatet.CopGratis
FROM         Artikujt INNER JOIN
                      Rabatet ON Artikujt.IDArtikulli = Rabatet.IDArtikulli";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "UPDATE    Artikujt\r\nSET              Standard = 1\r\nWHERE     (IDArtikulli = @IDAr" +
                "tikulli)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._commandCollection[7] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE    Artikujt\r\nSET              StokuAktual = StokuAktual - @SasiaLiferuar\r\n" +
                "WHERE     (IDArtikulli = @IDArtikulli)";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SasiaLiferuar", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "StokuAktual", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.ArtikujtDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ArtikujtDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.ArtikujtDataTable dataTable = new MyMobileDataSet.ArtikujtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy2(MyMobileDataSet.ArtikujtDataTable dataTable, string Emri) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Emri == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Emri));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtDataTable GetDataBy(string Emri) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Emri == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Emri));
            }
            MyMobileDataSet.ArtikujtDataTable dataTable = new MyMobileDataSet.ArtikujtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillStandartArt(MyMobileDataSet.ArtikujtDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtDataTable GetDataBy3() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            MyMobileDataSet.ArtikujtDataTable dataTable = new MyMobileDataSet.ArtikujtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillStok(MyMobileDataSet.ArtikujtDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtDataTable GetDataBy4() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MyMobileDataSet.ArtikujtDataTable dataTable = new MyMobileDataSet.ArtikujtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SearchByBarcode(MyMobileDataSet.ArtikujtDataTable dataTable, string Barkod) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((Barkod == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Barkod));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtDataTable GetDataBy1(string Barkod) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((Barkod == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Barkod));
            }
            MyMobileDataSet.ArtikujtDataTable dataTable = new MyMobileDataSet.ArtikujtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int test(MyMobileDataSet.ArtikujtDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtDataTable GetDataBy6() {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            MyMobileDataSet.ArtikujtDataTable dataTable = new MyMobileDataSet.ArtikujtDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.ArtikujtDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Artikujt");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<float> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, global::System.Nullable<float> p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, string p10, global::System.Nullable<byte> p11, string p12, global::System.Nullable<decimal> p13) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((float)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((float)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10 == null)) {
                throw new global::System.ArgumentNullException("p10");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((byte)(p11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((p12 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(p12));
            }
            if ((p13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(p13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<float> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, global::System.Nullable<float> p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, string p10, global::System.Nullable<byte> p11, string p12, global::System.Nullable<decimal> p13, string p14) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((float)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((float)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10 == null)) {
                throw new global::System.ArgumentNullException("p10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte)(p11.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((p12 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(p12));
            }
            if ((p13.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(p13.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((p14 == null)) {
                throw new global::System.ArgumentNullException("p14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(p14));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<float> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, global::System.Nullable<float> p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, global::System.Nullable<byte> p11, string p12, global::System.Nullable<decimal> p13, string p14) {
            return this.Update(p1, p2, p3, p4, p5, p6, p7, p8, p9, p14, p11, p12, p13, p14);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStandardArt(int IDArtikulli) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[6];
            command.Parameters[0].Value = ((int)(IDArtikulli));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStokAkt(global::System.Nullable<int> SasiaLiferuar, int IDArtikulli) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[7];
            if ((SasiaLiferuar.HasValue == true)) {
                command.Parameters[0].Value = ((int)(SasiaLiferuar.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(IDArtikulli));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ArtikujtStoqetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujtStoqetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ArtikujtStoqet";
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Rabatet", "Rabatet");
            tableMapping.ColumnMappings.Add("CopGratis", "CopGratis");
            tableMapping.ColumnMappings.Add("Sasia", "Sasia");
            tableMapping.ColumnMappings.Add("Paketa", "Paketa");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("Totali", "Totali");
            tableMapping.ColumnMappings.Add("Depo", "Depo");
            tableMapping.ColumnMappings.Add("Paketimi", "Paketimi");
            tableMapping.ColumnMappings.Add("Barkod", "Barkod");
            tableMapping.ColumnMappings.Add("Dhurate", "Dhurate");
            tableMapping.ColumnMappings.Add("BUM", "BUM");
            tableMapping.ColumnMappings.Add("Seri", "Seri");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[15];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, Stoqet.Paketa, SalesPrice.UnitPrice, Rabatet.Rabatet, 
                      SalesPrice.UnitPrice - SalesPrice.UnitPrice * Rabatet.Rabatet / 100 AS Totali, Rabatet.CopGratis,                    Stoqet.Depo, Stoqet.Paketimi, Artikujt.Barkod, Stoqet.Dhurate, Artikujt.BUM, Stoqet.Seri
FROM  Rabatet INNER JOIN
                      Artikujt ON Rabatet.IDArtikulli = Artikujt.IDArtikulli INNER JOIN
                      Klientet ON Rabatet.GrRabatet = Klientet.GrRabatet INNER JOIN
                      SalesPrice ON Klientet.GrCmimoret = SalesPrice.SalesCode AND Artikujt.IDArtikulli = SalesPrice.ItemNo_ INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti)
order by Artikujt.IDArtikulli";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, SalesPrice.UnitPrice, Stoqet.Depo, Artikujt.Barkod, Artikujt.BUM, Stoqet.Dhurate, Stoqet.Seri
FROM         SalesPrice INNER JOIN
                      Klientet ON SalesPrice.SalesCode = Klientet.IDKlienti INNER JOIN
                      Artikujt ON SalesPrice.ItemNo_ = Artikujt.IDArtikulli INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti) AND (Stoqet.Sasia > 0)
order by Artikujt.IDArtikulli ";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, SalesPrice.UnitPrice, Stoqet.Depo, Artikujt.Barkod, Artikujt.BUM, Stoqet.Dhurate, Stoqet.Seri
FROM         SalesPrice INNER JOIN
                      Klientet ON SalesPrice.SalesCode = Klientet.IDKlienti INNER JOIN
                      Artikujt ON SalesPrice.ItemNo_ = Artikujt.IDArtikulli INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti) AND  Stoqet.Sasia > 0 and  Artikujt.IDArtikulli in ('MF01','MF02','MF03','MF04','MF05','MF06','MF07','MF08','MF09','MF10','MF11','MF12','MF13','MF14','MF15','MF16','MF17','MF18','MF19','MF20','MF21','MF22','MF23','MF24','MF25','MF26','MF27')
order by Artikujt.IDArtikulli 
";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[3] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, SalesPrice.UnitPrice, Stoqet.Depo, Artikujt.Barkod, Artikujt.BUM, Stoqet.Dhurate, Stoqet.Seri
FROM         SalesPrice INNER JOIN
                      Klientet ON SalesPrice.SalesCode = Klientet.IDKlienti INNER JOIN
                      Artikujt ON SalesPrice.ItemNo_ = Artikujt.IDArtikulli INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti)  and Artikujt.IDArtikulli in
('MF01','MF02','MF03','MF04','MF05','MF06','MF07','MF08','MF09','MF10','MF11','MF12','MF13','MF14','MF15','MF16','MF17','MF18','MF19','MF20','MF21','MF22','MF23','MF24','MF25','MF26','MF27')
order by Artikujt.IDArtikulli ";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[4] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, SalesPrice.UnitPrice, Stoqet.Depo, Artikujt.Barkod, Artikujt.BUM, Stoqet.Dhurate,  Stoqet.Seri
FROM         SalesPrice INNER JOIN
                      Klientet ON SalesPrice.SalesCode = Klientet.IDKlienti INNER JOIN
                      Artikujt ON SalesPrice.ItemNo_ = Artikujt.IDArtikulli INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti) 
order by Artikujt.IDArtikulli ";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[5] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, Stoqet.Paketa, SalesPrice.UnitPrice, Rabatet.Rabatet, 
                      SalesPrice.UnitPrice - SalesPrice.UnitPrice * Rabatet.Rabatet / 100 AS Totali, Rabatet.CopGratis, Stoqet.Seri
FROM         Rabatet INNER JOIN
                      Artikujt ON Rabatet.IDArtikulli = Artikujt.IDArtikulli INNER JOIN
                      Klientet ON Rabatet.GrRabatet = Klientet.GrRabatet INNER JOIN
                      SalesPrice ON Klientet.GrCmimoret = SalesPrice.SalesCode AND Artikujt.IDArtikulli = SalesPrice.ItemNo_ INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Stoqet.Depo = @Depo)
order by Artikujt.IDArtikulli ";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Depo", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[6] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, Stoqet.Paketa, Stoqet.Depo, Stoqet.Seri
FROM         Artikujt INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Stoqet.Depo = @Depo) AND (Stoqet.Sasia > 0) AND (Stoqet.Paketa > 0)
order by Artikujt.IDArtikulli ";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Depo", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[7] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, Stoqet.Paketa, SalesPrice.UnitPrice, Rabatet.Rabatet, 
                      SalesPrice.UnitPrice - SalesPrice.UnitPrice * Rabatet.Rabatet / 100 AS Totali, Rabatet.CopGratis, Stoqet.Seri
FROM         Rabatet INNER JOIN
                      Artikujt ON Rabatet.IDArtikulli = Artikujt.IDArtikulli INNER JOIN
                      Klientet ON Rabatet.GrRabatet = Klientet.GrRabatet INNER JOIN
                      SalesPrice ON Klientet.GrCmimoret = SalesPrice.SalesCode AND Artikujt.IDArtikulli = SalesPrice.ItemNo_ INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Artikujt.IDArtikulli = @IDArtikulli) 
Order by Artikujt.IDArtikulli ";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[8] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, SalesPrice.UnitPrice, Stoqet.Depo, Artikujt.Barkod, Artikujt.BUM, Stoqet.Dhurate, Stoqet.Seri
FROM         SalesPrice INNER JOIN
                      Klientet ON SalesPrice.SalesCode = Klientet.IDKlienti INNER JOIN
                      Artikujt ON SalesPrice.ItemNo_ = Artikujt.IDArtikulli INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti)
order by Artikujt.IDArtikulli ";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[9] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Depo, Artikujt.Barkod, Art" +
                "ikujt.BUM, Stoqet.Seri\r\nFROM         Artikujt INNER JOIN\r\n                      " +
                "Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra\r\norder by Artikujt.IDArtikulli ";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Stoqet.Sasia, SalesPrice.UnitPrice, Stoqet.Depo, Artikujt.Barkod, Artikujt.BUM, Stoqet.Dhurate, Stoqet.Seri
FROM         SalesPrice INNER JOIN
                      Klientet ON SalesPrice.SalesCode = Klientet.IDKlienti INNER JOIN
                      Artikujt ON SalesPrice.ItemNo_ = Artikujt.IDArtikulli INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Klientet.IDKlienti = @IDKlienti) and Stoqet.Sasia > 0
order by Artikujt.IDArtikulli ";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDKlienti", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlienti", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[11] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Artikujt.CmimiNjesi, Artikujt.CmimiPako, Artikujt.StokuAktual, Artikujt.Barkod, Artikujt.Standard, Rabatet.Rabatet, 
                      Rabatet.CopGratis, Artikujt.SasiaPako, Artikujt.Sasia
FROM         Artikujt INNER JOIN
                      Rabatet ON Artikujt.IDArtikulli = Rabatet.IDArtikulli
WHERE     (Artikujt.Standard = 1)
order by Artikujt.IDArtikulli ";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Artikujt.CmimiNjesi, Artikujt.CmimiPako, Artikujt.StokuAktual, Rabatet.Rabatet, Rabatet.CopGratis, Artikujt.Barkod, 
                      Artikujt.Standard, Artikujt.SasiaPako, Artikujt.Sasia, Artikujt.Shifra, Artikujt.TePorositur
FROM         Artikujt INNER JOIN
                      Rabatet ON Artikujt.IDArtikulli = Rabatet.IDArtikulli
WHERE     (Artikujt.Barkod = @barkod)
order by Artikujt.IDArtikulli ";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@barkod", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "Barkod", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[13] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = @"SELECT     Artikujt.IDArtikulli, Artikujt.Emri, Artikujt.CmimiNjesi, Artikujt.CmimiPako, Artikujt.StokuAktual, Rabatet.Rabatet, Rabatet.CopGratis, Artikujt.Barkod, 
                      Artikujt.Standard, Artikujt.SasiaPako, Artikujt.Sasia
FROM         Artikujt INNER JOIN
                      Rabatet ON Artikujt.IDArtikulli = Rabatet.IDArtikulli
WHERE     (Artikujt.IDArtikulli = @IDartikulli)
order by Artikujt.IDArtikulli ";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDartikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[14] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[14].Connection = this.Connection;
            this._commandCollection[14].CommandText = "UPDATE    Artikujt\r\nSET              Standard = 1, SyncStatus = 0\r\nWHERE     (IDA" +
                "rtikulli = @IDArtikulli)";
            this._commandCollection[14].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[14].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetData(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Fill_For_Sale(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy11(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Fill_For_Sale_AT(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy13(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Fill_Levizja_Hyrje_AT(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy12(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Fill_Levizje_Hyrje(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy10(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAll(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string Depo) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Depo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy4(string Depo) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Depo));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDepo(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string Depo) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Depo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy6(string Depo) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Depo));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDArtikulli(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDArtikulli) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDArtikulli));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy5(string IDArtikulli) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDArtikulli));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByKlienti2(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy7(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillFor_Orders(MyMobileDataSet.ArtikujtStoqetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy9() {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillForSale(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy8(string IDKlienti) {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if ((IDKlienti == null)) {
                throw new global::System.ArgumentNullException("IDKlienti");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDKlienti));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillStandardArt(MyMobileDataSet.ArtikujtStoqetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy2() {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SearchByBarcode(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string barkod) {
            this.Adapter.SelectCommand = this.CommandCollection[12];
            if ((barkod == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(barkod));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy1(string barkod) {
            this.Adapter.SelectCommand = this.CommandCollection[12];
            if ((barkod == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(barkod));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int SearchByIDArt(MyMobileDataSet.ArtikujtStoqetDataTable dataTable, string IDartikulli) {
            this.Adapter.SelectCommand = this.CommandCollection[13];
            if ((IDartikulli == null)) {
                throw new global::System.ArgumentNullException("IDartikulli");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDartikulli));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujtStoqetDataTable GetDataBy3(string IDartikulli) {
            this.Adapter.SelectCommand = this.CommandCollection[13];
            if ((IDartikulli == null)) {
                throw new global::System.ArgumentNullException("IDartikulli");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDartikulli));
            }
            MyMobileDataSet.ArtikujtStoqetDataTable dataTable = new MyMobileDataSet.ArtikujtStoqetDataTable(true);
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateStandardArt(string IDArtikulli) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[14];
            if ((IDArtikulli == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(IDArtikulli));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class Log_SyncErrorsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Log_SyncErrorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Log_SyncErrors";
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("SessionID", "SessionID");
            tableMapping.ColumnMappings.Add("Err_Code", "Err_Code");
            tableMapping.ColumnMappings.Add("Err_Message", "Err_Message");
            tableMapping.ColumnMappings.Add("Err_Module", "Err_Module");
            tableMapping.ColumnMappings.Add("Err_Line", "Err_Line");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Log_SyncErrors] ([DeviceID], [SessionID], [Err_Code], [Err_Message]," +
                " [Err_Module], [Err_Line]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SessionID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Err_Code", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Err_Message", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Err_Module", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Err_Line", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [DeviceID], [SessionID], [Err_Code], [Err_Message], [Err_Module], [Err_Lin" +
                "e] FROM [Log_SyncErrors]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.Log_SyncErrorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.Log_SyncErrorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.Log_SyncErrorsDataTable dataTable = new MyMobileDataSet.Log_SyncErrorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.Log_SyncErrorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Log_SyncErrors");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<global::System.Guid> p2, global::System.Nullable<int> p3, string p4, string p5, global::System.Nullable<int> p6) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class ArtikujDepoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArtikujDepoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ArtikujDepo";
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Sasia", "Sasia");
            tableMapping.ColumnMappings.Add("Shifra", "Shifra");
            tableMapping.ColumnMappings.Add("Depo", "Depo");
            tableMapping.ColumnMappings.Add("Barkod", "Barkod");
            tableMapping.ColumnMappings.Add("Seri", "Seri");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     Artikujt.Shifra, Artikujt.Emri, Stoqet.Sasia, Stoqet.Depo, Artikujt.Barkod,Stoqet.Seri
FROM         Artikujt INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Stoqet.Depo = @Depo) AND (Stoqet.Sasia > 0)
order by Artikujt.IDArtikulli ";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Depo", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     Artikujt.Emri, Stoqet.NjesiaMatse, Stoqet.Sasia, Artikujt.Shifra, Artikujt.IDArtikulli, Artikujt.CmimiNjesi,Stoqet.Seri
FROM         Artikujt INNER JOIN
                      Stoqet ON Artikujt.IDArtikulli = Stoqet.Shifra
WHERE     (Artikujt.IDArtikulli = @IDArtikulli)
order by Artikujt.IDArtikulli ";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillArtikujtDepo(MyMobileDataSet.ArtikujDepoDataTable dataTable, string Depo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Depo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.ArtikujDepoDataTable GetData(string Depo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Depo == null)) {
                throw new global::System.ArgumentNullException("Depo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Depo));
            }
            MyMobileDataSet.ArtikujDepoDataTable dataTable = new MyMobileDataSet.ArtikujDepoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByIDArtikulli(MyMobileDataSet.ArtikujDepoDataTable dataTable, string IDArtikulli) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDArtikulli));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.ArtikujDepoDataTable GetDataBy(string IDArtikulli) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IDArtikulli));
            }
            MyMobileDataSet.ArtikujDepoDataTable dataTable = new MyMobileDataSet.ArtikujDepoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class FaturatPagesatTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FaturatPagesatTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FaturatPagesat";
            tableMapping.ColumnMappings.Add("NrFatures", "NrFatures");
            tableMapping.ColumnMappings.Add("DataFatures", "DataFatures");
            tableMapping.ColumnMappings.Add("DataPerPages", "DataPerPages");
            tableMapping.ColumnMappings.Add("ShumaFatures", "ShumaFatures");
            tableMapping.ColumnMappings.Add("Borxhi", "Borxhi");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [FaturatPagesat] WHERE (([NrFatures] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrFatures", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [FaturatPagesat] ([NrFatures], [DataFatures], [DataPerPages], [ShumaF" +
                "atures], [Borxhi], [SyncStatus]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPerPages", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Borxhi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [FaturatPagesat] SET [NrFatures] = @p1, [DataFatures] = @p2, [DataPerPages" +
                "] = @p3, [ShumaFatures] = @p4, [Borxhi] = @p5, [SyncStatus] = @p6 WHERE (([NrFat" +
                "ures] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataPerPages", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ShumaFatures", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Borxhi", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrFatures", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [NrFatures], [DataFatures], [DataPerPages], [ShumaFatures], [Borxhi], [Syn" +
                "cStatus] FROM [FaturatPagesat]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.FaturatPagesatDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.FaturatPagesatDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.FaturatPagesatDataTable dataTable = new MyMobileDataSet.FaturatPagesatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.FaturatPagesatDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FaturatPagesat");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<global::System.DateTime> p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<decimal> p4, global::System.Nullable<decimal> p5, global::System.Nullable<int> p6) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<global::System.DateTime> p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<decimal> p4, global::System.Nullable<decimal> p5, global::System.Nullable<int> p6, string p7) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7 == null)) {
                throw new global::System.ArgumentNullException("p7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.DateTime> p2, global::System.Nullable<global::System.DateTime> p3, global::System.Nullable<decimal> p4, global::System.Nullable<decimal> p5, global::System.Nullable<int> p6, string p7) {
            return this.Update(p7, p2, p3, p4, p5, p6, p7);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class NumriFaturaveTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NumriFaturaveTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NumriFaturave";
            tableMapping.ColumnMappings.Add("KOD", "KOD");
            tableMapping.ColumnMappings.Add("NRKUFIS", "NRKUFIS");
            tableMapping.ColumnMappings.Add("NRKUFIP", "NRKUFIP");
            tableMapping.ColumnMappings.Add("NRKUFIPJT", "NRKUFIPJT");
            tableMapping.ColumnMappings.Add("NRKUFISJT", "NRKUFISJT");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("IDNumri", "IDNumri");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [NumriFaturave] WHERE (([IDNumri] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDNumri", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [NumriFaturave] ([KOD], [NRKUFIS], [NRKUFIP], [NRKUFIPJT], [NRKUFISJT" +
                "], [SyncStatus]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KOD", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFIS", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFIP", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFIPJT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFISJT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [NumriFaturave] SET [KOD] = @p1, [NRKUFIS] = @p2, [NRKUFIP] = @p3, [NRKUFI" +
                "PJT] = @p4, [NRKUFISJT] = @p5, [SyncStatus] = @p6 WHERE (([IDNumri] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "KOD", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFIS", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFIP", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFIPJT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NRKUFISJT", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDNumri", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     NumriFaturave.*\r\nFROM         NumriFaturave";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.NumriFaturaveDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.NumriFaturaveDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.NumriFaturaveDataTable dataTable = new MyMobileDataSet.NumriFaturaveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.NumriFaturaveDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NumriFaturave");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<int> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, string p5, global::System.Nullable<int> p6) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<int> p2, global::System.Nullable<int> p3, global::System.Nullable<int> p4, string p5, global::System.Nullable<int> p6, int p7) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p7));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class OrdersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrdersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Orders";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("IDOrder", "IDOrder");
            tableMapping.ColumnMappings.Add("DeviceID", "DeviceID");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("Depo", "Depo");
            tableMapping.ColumnMappings.Add("IDAgjenti", "IDAgjenti");
            tableMapping.ColumnMappings.Add("IDKlientDheLokacion", "IDKlientDheLokacion");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("ImpStatus", "ImpStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Orders] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Orders] ([ID], [IDOrder], [DeviceID], [Data], [Depo], [IDAgjenti], [" +
                "IDKlientDheLokacion], [SyncStatus], [ImpStatus]) VALUES (@p1, @p2, @p3, @p4, @p5" +
                ", @p6, @p7, @p8, @p9)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImpStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Orders] SET [ID] = @p1, [IDOrder] = @p2, [DeviceID] = @p3, [Data] = @p4, " +
                "[Depo] = @p5, [IDAgjenti] = @p6, [IDKlientDheLokacion] = @p7, [SyncStatus] = @p8" +
                ", [ImpStatus] = @p9 WHERE (([ID] = @p10))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DeviceID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Depo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDAgjenti", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDKlientDheLokacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImpStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        ID, IDOrder, DeviceID, Data, Depo, IDAgjenti, IDKlientDheLokacion, " +
                "SyncStatus, ImpStatus\r\nFROM            Orders";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        Data, Depo, DeviceID, ID, IDAgjenti, IDKlientDheLokacion, IDOrder, " +
                "ImpStatus, SyncStatus\r\nFROM            Orders\r\nWHERE        (Data >= @Data)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Data", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.OrdersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.OrdersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.OrdersDataTable dataTable = new MyMobileDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_Date(MyMobileDataSet.OrdersDataTable dataTable, global::System.Nullable<global::System.DateTime> Data) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Data.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Data.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.OrdersDataTable GetDataBy(global::System.Nullable<global::System.DateTime> Data) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Data.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Data.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.OrdersDataTable dataTable = new MyMobileDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.OrdersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Orders");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid p1, string p2, string p3, global::System.Nullable<global::System.DateTime> p4, string p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid p1, string p2, string p3, global::System.Nullable<global::System.DateTime> p4, string p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, System.Guid p10) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(p8.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((p9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(p10));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, string p3, global::System.Nullable<global::System.DateTime> p4, string p5, string p6, string p7, global::System.Nullable<int> p8, global::System.Nullable<int> p9, System.Guid p10) {
            return this.Update(p10, p2, p3, p4, p5, p6, p7, p8, p9, p10);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class Order_DetailsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Order_DetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Order_Details";
            tableMapping.ColumnMappings.Add("IDOrder", "IDOrder");
            tableMapping.ColumnMappings.Add("NrRendor", "NrRendor");
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Sasia_Porositur", "Sasia_Porositur");
            tableMapping.ColumnMappings.Add("SyncStatus", "SyncStatus");
            tableMapping.ColumnMappings.Add("ImpStatus", "ImpStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Order_Details] WHERE (([IDOrder] = @p1) AND ([IDArtikulli] = @p2))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Original, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Order_Details] ([IDOrder], [NrRendor], [IDArtikulli], [Emri], [Sasia" +
                "_Porositur], [SyncStatus], [ImpStatus]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p" +
                "7)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrRendor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia_Porositur", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImpStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Order_Details] SET [IDOrder] = @p1, [NrRendor] = @p2, [IDArtikulli] = @p3" +
                ", [Emri] = @p4, [Sasia_Porositur] = @p5, [SyncStatus] = @p6, [ImpStatus] = @p7 W" +
                "HERE (([IDOrder] = @p8) AND ([IDArtikulli] = @p9))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrRendor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia_Porositur", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImpStatus", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        IDOrder, NrRendor, IDArtikulli, Emri, Sasia_Porositur, SyncStatus, " +
                "ImpStatus\r\nFROM            Order_Details";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     Order_Details.Emri, Order_Details.IDArtikulli, Order_Details.IDOrder, Order_Details.NrRendor, Order_Details.Sasia_Porositur, 
                      Order_Details.SyncStatus, Artikujt.BUM
FROM         Order_Details INNER JOIN
                      Artikujt ON Order_Details.IDArtikulli = Artikujt.IDArtikulli
WHERE     (Order_Details.IDOrder = @para)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@para", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO Order_Details\r\n                         (IDOrder, NrRendor, IDArtikul" +
                "li, Emri, Sasia_Porositur, SyncStatus, ImpStatus)\r\nVALUES        (@IDOrder,@NrRe" +
                "ndor,@IDArtikulli,@Emri,@Sasia_Porositur,@SyncStatus, @ImpStatus)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDOrder", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NrRendor", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "NrRendor", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@IDArtikulli", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDArtikulli", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Emri", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Emri", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Sasia_Porositur", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "Sasia_Porositur", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@SyncStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "SyncStatus", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ImpStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImpStatus", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyMobileDataSet.Order_DetailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.Order_DetailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyMobileDataSet.Order_DetailsDataTable dataTable = new MyMobileDataSet.Order_DetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillFor_Orders(MyMobileDataSet.Order_DetailsDataTable dataTable, string para) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((para == null)) {
                throw new global::System.ArgumentNullException("para");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(para));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.Order_DetailsDataTable GetDataBy(string para) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((para == null)) {
                throw new global::System.ArgumentNullException("para");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(para));
            }
            MyMobileDataSet.Order_DetailsDataTable dataTable = new MyMobileDataSet.Order_DetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet.Order_DetailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(MyMobileDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Order_Details");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1, string p2) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<int> p2, string p3, string p4, global::System.Nullable<float> p5, global::System.Nullable<int> p6, global::System.Nullable<int> p7) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((float)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(p7.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<int> p2, string p3, string p4, global::System.Nullable<float> p5, global::System.Nullable<int> p6, global::System.Nullable<int> p7, string p8, string p9) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3 == null)) {
                throw new global::System.ArgumentNullException("p3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((float)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((p7.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p7.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                throw new global::System.ArgumentNullException("p9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(p9));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> p2, string p4, global::System.Nullable<float> p5, global::System.Nullable<int> p6, global::System.Nullable<int> p7, string p8, string p9) {
            return this.Update(p8, p2, p9, p4, p5, p6, p7, p8, p9);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string IDOrder, global::System.Nullable<int> NrRendor, string IDArtikulli, string Emri, global::System.Nullable<float> Sasia_Porositur, global::System.Nullable<int> SyncStatus, global::System.Nullable<int> ImpStatus) {
            global::System.Data.SqlServerCe.SqlCeCommand command = this.CommandCollection[2];
            if ((IDOrder == null)) {
                throw new global::System.ArgumentNullException("IDOrder");
            }
            else {
                command.Parameters[0].Value = ((string)(IDOrder));
            }
            if ((NrRendor.HasValue == true)) {
                command.Parameters[1].Value = ((int)(NrRendor.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDArtikulli == null)) {
                throw new global::System.ArgumentNullException("IDArtikulli");
            }
            else {
                command.Parameters[2].Value = ((string)(IDArtikulli));
            }
            if ((Emri == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Emri));
            }
            if ((Sasia_Porositur.HasValue == true)) {
                command.Parameters[4].Value = ((float)(Sasia_Porositur.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((SyncStatus.HasValue == true)) {
                command.Parameters[5].Value = ((int)(SyncStatus.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ImpStatus.HasValue == true)) {
                command.Parameters[6].Value = ((int)(ImpStatus.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class rptOrder_DetailsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rptOrder_DetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "rptOrder_Details";
            tableMapping.ColumnMappings.Add("IDArtikulli", "IDArtikulli");
            tableMapping.ColumnMappings.Add("Emri", "Emri");
            tableMapping.ColumnMappings.Add("Sasia", "Sasia");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\MobileDatabase.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     od.IDArtikulli, od.Emri, SUM(od.Sasia_Porositur) AS Sasia\r\nFROM       " +
                "  Order_Details AS od INNER JOIN\r\n                      Orders AS o ON od.IDOrde" +
                "r = o.IDOrder\r\nWHERE     (o.Data = @Data)\r\nGROUP BY od.Emri, od.IDArtikulli";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Data", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT        od.IDArtikulli, od.Emri, od.Sasia_Porositur AS Sasia, CASE WHEN Artikujt.BUM IS NOT NULL THEN Artikujt.BUM ELSE '' END AS BUM
FROM            Order_Details AS od LEFT OUTER JOIN
                         Artikujt ON od.IDArtikulli = Artikujt.IDArtikulli
WHERE        (od.IDOrder = @id)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@id", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     IDArtikulli, Emri, Sasia_Porositur AS Sasia\r\nFROM         Order_Detail" +
                "s AS od\r\nWHERE     (IDOrder = @id)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@id", global::System.Data.SqlDbType.NVarChar, 20, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDOrder", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillRpt_Porosite(MyMobileDataSet.rptOrder_DetailsDataTable dataTable, global::System.Nullable<global::System.DateTime> Data) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Data.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Data.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyMobileDataSet.rptOrder_DetailsDataTable GetData(global::System.Nullable<global::System.DateTime> Data) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((Data.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(Data.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            MyMobileDataSet.rptOrder_DetailsDataTable dataTable = new MyMobileDataSet.rptOrder_DetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Fill_rpOrderDetails(MyMobileDataSet.rptOrder_DetailsDataTable dataTable, string id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id == null)) {
                throw new global::System.ArgumentNullException("id");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.rptOrder_DetailsDataTable GetDataBy(string id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id == null)) {
                throw new global::System.ArgumentNullException("id");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(id));
            }
            MyMobileDataSet.rptOrder_DetailsDataTable dataTable = new MyMobileDataSet.rptOrder_DetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy_ID(MyMobileDataSet.rptOrder_DetailsDataTable dataTable, string id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((id == null)) {
                throw new global::System.ArgumentNullException("id");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MyMobileDataSet.rptOrder_DetailsDataTable GetDataBy1(string id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((id == null)) {
                throw new global::System.ArgumentNullException("id");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(id));
            }
            MyMobileDataSet.rptOrder_DetailsDataTable dataTable = new MyMobileDataSet.rptOrder_DetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}
namespace MyMobileDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
